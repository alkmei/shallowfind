/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Shallowfind
 * Shallowfind Financial Planner
 * OpenAPI spec version: 0.0.1
 */
import {
  createMutation,
  createQuery
} from '@tanstack/svelte-query';
import type {
  CreateMutationOptions,
  CreateMutationResult,
  CreateQueryOptions,
  CreateQueryResult,
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey
} from '@tanstack/svelte-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  PatchedUser,
  User
} from '../shallowfind.schemas';


// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;





/**
 * A viewset for viewing and editing user instances.
 */
export const usersList = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User[]>> => {
    
    
    return axios.get(
      `/api/users/`,options
    );
  }


export const getUsersListQueryKey = () => {
    return [`/api/users/`] as const;
    }

    
export const getUsersListQueryOptions = <TData = Awaited<ReturnType<typeof usersList>>, TError = AxiosError<unknown>>( options?: { query?:Partial<CreateQueryOptions<Awaited<ReturnType<typeof usersList>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersList>>> = ({ signal }) => usersList({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as CreateQueryOptions<Awaited<ReturnType<typeof usersList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersListQueryResult = NonNullable<Awaited<ReturnType<typeof usersList>>>
export type UsersListQueryError = AxiosError<unknown>



export function createUsersList<TData = Awaited<ReturnType<typeof usersList>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<CreateQueryOptions<Awaited<ReturnType<typeof usersList>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersListQueryOptions(options)

  const query = createQuery(queryOptions , queryClient) as CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * A viewset for viewing and editing user instances.
 */
export const usersCreate = (
    user: NonReadonly<User>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    
    return axios.post(
      `/api/users/`,
      user,options
    );
  }



export const getUsersCreateMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof usersCreate>>, TError,{data: NonReadonly<User>}, TContext>, axios?: AxiosRequestConfig}
): CreateMutationOptions<Awaited<ReturnType<typeof usersCreate>>, TError,{data: NonReadonly<User>}, TContext> => {

const mutationKey = ['usersCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersCreate>>, {data: NonReadonly<User>}> = (props) => {
          const {data} = props ?? {};

          return  usersCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersCreateMutationResult = NonNullable<Awaited<ReturnType<typeof usersCreate>>>
    export type UsersCreateMutationBody = NonReadonly<User>
    export type UsersCreateMutationError = AxiosError<unknown>

    export const createUsersCreate = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof usersCreate>>, TError,{data: NonReadonly<User>}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): CreateMutationResult<
        Awaited<ReturnType<typeof usersCreate>>,
        TError,
        {data: NonReadonly<User>},
        TContext
      > => {

      const mutationOptions = getUsersCreateMutationOptions(options);

      return createMutation(mutationOptions , queryClient);
    }
    /**
 * A viewset for viewing and editing user instances.
 */
export const usersRetrieve = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    
    return axios.get(
      `/api/users/${id}/`,options
    );
  }


export const getUsersRetrieveQueryKey = (id: number,) => {
    return [`/api/users/${id}/`] as const;
    }

    
export const getUsersRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof usersRetrieve>>, TError = AxiosError<unknown>>(id: number, options?: { query?:Partial<CreateQueryOptions<Awaited<ReturnType<typeof usersRetrieve>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersRetrieve>>> = ({ signal }) => usersRetrieve(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as CreateQueryOptions<Awaited<ReturnType<typeof usersRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof usersRetrieve>>>
export type UsersRetrieveQueryError = AxiosError<unknown>



export function createUsersRetrieve<TData = Awaited<ReturnType<typeof usersRetrieve>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:Partial<CreateQueryOptions<Awaited<ReturnType<typeof usersRetrieve>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersRetrieveQueryOptions(id,options)

  const query = createQuery(queryOptions , queryClient) as CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * A viewset for viewing and editing user instances.
 */
export const usersUpdate = (
    id: number,
    user: NonReadonly<User>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    
    return axios.put(
      `/api/users/${id}/`,
      user,options
    );
  }



export const getUsersUpdateMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof usersUpdate>>, TError,{id: number;data: NonReadonly<User>}, TContext>, axios?: AxiosRequestConfig}
): CreateMutationOptions<Awaited<ReturnType<typeof usersUpdate>>, TError,{id: number;data: NonReadonly<User>}, TContext> => {

const mutationKey = ['usersUpdate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersUpdate>>, {id: number;data: NonReadonly<User>}> = (props) => {
          const {id,data} = props ?? {};

          return  usersUpdate(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof usersUpdate>>>
    export type UsersUpdateMutationBody = NonReadonly<User>
    export type UsersUpdateMutationError = AxiosError<unknown>

    export const createUsersUpdate = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof usersUpdate>>, TError,{id: number;data: NonReadonly<User>}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): CreateMutationResult<
        Awaited<ReturnType<typeof usersUpdate>>,
        TError,
        {id: number;data: NonReadonly<User>},
        TContext
      > => {

      const mutationOptions = getUsersUpdateMutationOptions(options);

      return createMutation(mutationOptions , queryClient);
    }
    /**
 * A viewset for viewing and editing user instances.
 */
export const usersPartialUpdate = (
    id: number,
    patchedUser: NonReadonly<PatchedUser>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    
    return axios.patch(
      `/api/users/${id}/`,
      patchedUser,options
    );
  }



export const getUsersPartialUpdateMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof usersPartialUpdate>>, TError,{id: number;data: NonReadonly<PatchedUser>}, TContext>, axios?: AxiosRequestConfig}
): CreateMutationOptions<Awaited<ReturnType<typeof usersPartialUpdate>>, TError,{id: number;data: NonReadonly<PatchedUser>}, TContext> => {

const mutationKey = ['usersPartialUpdate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersPartialUpdate>>, {id: number;data: NonReadonly<PatchedUser>}> = (props) => {
          const {id,data} = props ?? {};

          return  usersPartialUpdate(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof usersPartialUpdate>>>
    export type UsersPartialUpdateMutationBody = NonReadonly<PatchedUser>
    export type UsersPartialUpdateMutationError = AxiosError<unknown>

    export const createUsersPartialUpdate = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof usersPartialUpdate>>, TError,{id: number;data: NonReadonly<PatchedUser>}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): CreateMutationResult<
        Awaited<ReturnType<typeof usersPartialUpdate>>,
        TError,
        {id: number;data: NonReadonly<PatchedUser>},
        TContext
      > => {

      const mutationOptions = getUsersPartialUpdateMutationOptions(options);

      return createMutation(mutationOptions , queryClient);
    }
    /**
 * A viewset for viewing and editing user instances.
 */
export const usersDestroy = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/api/users/${id}/`,options
    );
  }



export const getUsersDestroyMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof usersDestroy>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): CreateMutationOptions<Awaited<ReturnType<typeof usersDestroy>>, TError,{id: number}, TContext> => {

const mutationKey = ['usersDestroy'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersDestroy>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  usersDestroy(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof usersDestroy>>>
    
    export type UsersDestroyMutationError = AxiosError<unknown>

    export const createUsersDestroy = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof usersDestroy>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): CreateMutationResult<
        Awaited<ReturnType<typeof usersDestroy>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getUsersDestroyMutationOptions(options);

      return createMutation(mutationOptions , queryClient);
    }
    