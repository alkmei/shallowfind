/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Shallowfind
 * Shallowfind Financial Planner
 * OpenAPI spec version: 0.0.1
 */
export interface AdminUser {
  readonly id: number;
  /**
   * Required. Enter a valid email address.
   * @maxLength 254
   */
  email: string;
  /** @maxLength 150 */
  firstName?: string;
  /** @maxLength 150 */
  lastName?: string;
  password?: string;
  passwordConfirm?: string;
  /** Designates whether this user should be treated as active. Unselect this instead of deleting accounts. */
  isActive?: boolean;
  /** Designates whether the user can log into this admin site. */
  isStaff?: boolean;
  /** Designates that this user has all permissions without explicitly assigning them. */
  isSuperuser?: boolean;
  readonly dateJoined: string;
  /** @nullable */
  readonly lastLogin: string | null;
}

export interface AssetAllocation {
  readonly investmentId: string;
  percentage: number;
  isFinalAllocation?: boolean;
}

export type BlankEnum = (typeof BlankEnum)[keyof typeof BlankEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BlankEnum = {
  '': ''
} as const;

export interface Distribution {
  type: DistributionTypeEnum;
  /** @nullable */
  value?: number | null;
  /** @nullable */
  mean?: number | null;
  /** @nullable */
  stdev?: number | null;
  /** @nullable */
  lower?: number | null;
  /** @nullable */
  upper?: number | null;
}

/**
 * * `fixed` - Fixed
 * `normal` - Normal
 * `uniform` - Uniform
 */
export type DistributionTypeEnum = (typeof DistributionTypeEnum)[keyof typeof DistributionTypeEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DistributionTypeEnum = {
  fixed: 'fixed',
  normal: 'normal',
  uniform: 'uniform'
} as const;

/**
 * @nullable
 */
export type EventSeriesStartDistribution = Distribution | null;

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventSeriesChangeAmtOrPct = {
  ...IncomeAmtOrPctEnum,
  ...BlankEnum,
  ...NullEnum
} as const;
/**
 * @nullable
 */
export type EventSeriesChangeAmtOrPct =
  | (typeof EventSeriesChangeAmtOrPct)[keyof typeof EventSeriesChangeAmtOrPct]
  | null;

/**
 * @nullable
 */
export type EventSeriesChangeDistribution = Distribution | null;

export type EventSeriesAssetAllocationInput = { [key: string]: unknown };

export type EventSeriesAssetAllocation2Input = { [key: string]: unknown };

export interface EventSeries {
  /** @maxLength 100 */
  name: string;
  description?: string;
  startType: StartTypeEnum;
  /** @nullable */
  startDistribution?: EventSeriesStartDistribution;
  readonly startWithEventName: string;
  readonly startAfterEventName: string;
  durationDistribution: Distribution;
  type: EventSeriesTypeEnum;
  /** @nullable */
  initialAmount?: number | null;
  /** @nullable */
  changeAmtOrPct?: EventSeriesChangeAmtOrPct;
  /** @nullable */
  changeDistribution?: EventSeriesChangeDistribution;
  inflationAdjusted?: boolean;
  /** @nullable */
  userFraction?: number | null;
  socialSecurity?: boolean;
  discretionary?: boolean;
  /** @nullable */
  maxCash?: number | null;
  glidePath?: boolean;
  readonly assetAllocations: readonly AssetAllocation[];
  startWithEventNameInput?: string;
  startAfterEventNameInput?: string;
  assetAllocationInput?: EventSeriesAssetAllocationInput;
  assetAllocation2Input?: EventSeriesAssetAllocation2Input;
}

/**
 * * `income` - Income
 * `expense` - Expense
 * `invest` - Invest
 * `rebalance` - Rebalance
 */
export type EventSeriesTypeEnum = (typeof EventSeriesTypeEnum)[keyof typeof EventSeriesTypeEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventSeriesTypeEnum = {
  income: 'income',
  expense: 'expense',
  invest: 'invest',
  rebalance: 'rebalance'
} as const;

export interface ExpenseWithdrawalStrategyItem {
  readonly investmentId: string;
  /**
   * @minimum 0
   * @maximum 9223372036854776000
   */
  order: number;
}

/**
 * * `amount` - Amount
 * `percent` - Percent
 */
export type IncomeAmtOrPctEnum = (typeof IncomeAmtOrPctEnum)[keyof typeof IncomeAmtOrPctEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IncomeAmtOrPctEnum = {
  amount: 'amount',
  percent: 'percent'
} as const;

export interface Investment {
  investmentType: InvestmentType;
  value: number;
  taxStatus: TaxStatusEnum;
  /** @maxLength 100 */
  investmentId: string;
}

export interface InvestmentType {
  /** @maxLength 100 */
  name: string;
  description: string;
  returnAmtOrPct: IncomeAmtOrPctEnum;
  returnDistribution: Distribution;
  expenseRatio: number;
  incomeAmtOrPct: IncomeAmtOrPctEnum;
  incomeDistribution: Distribution;
  taxability: boolean;
}

/**
 * * `individual` - Individual
 * `couple` - Couple
 */
export type MaritalStatusEnum = (typeof MaritalStatusEnum)[keyof typeof MaritalStatusEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MaritalStatusEnum = {
  individual: 'individual',
  couple: 'couple'
} as const;

export type NullEnum = (typeof NullEnum)[keyof typeof NullEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NullEnum = {} as const;

export interface PatchedAdminUser {
  readonly id?: number;
  /**
   * Required. Enter a valid email address.
   * @maxLength 254
   */
  email?: string;
  /** @maxLength 150 */
  firstName?: string;
  /** @maxLength 150 */
  lastName?: string;
  password?: string;
  passwordConfirm?: string;
  /** Designates whether this user should be treated as active. Unselect this instead of deleting accounts. */
  isActive?: boolean;
  /** Designates whether the user can log into this admin site. */
  isStaff?: boolean;
  /** Designates that this user has all permissions without explicitly assigning them. */
  isSuperuser?: boolean;
  readonly dateJoined?: string;
  /** @nullable */
  readonly lastLogin?: string | null;
}

/**
 * @nullable
 */
export type PatchedScenarioSpouseLifeExpectancy = Distribution | null;

export interface PatchedScenario {
  readonly id?: number;
  /** @maxLength 200 */
  name?: string;
  maritalStatus?: MaritalStatusEnum;
  /**
   * @minimum -9223372036854776000
   * @maximum 9223372036854776000
   */
  userBirthYear?: number;
  /**
   * @minimum -9223372036854776000
   * @maximum 9223372036854776000
   * @nullable
   */
  spouseBirthYear?: number | null;
  userLifeExpectancy?: Distribution;
  /** @nullable */
  spouseLifeExpectancy?: PatchedScenarioSpouseLifeExpectancy;
  inflationAssumption?: Distribution;
  afterTaxContributionLimit?: number;
  financialGoal?: number;
  /** @maxLength 2 */
  residenceState?: string;
  rothConversionOpt?: boolean;
  /**
   * @minimum -9223372036854776000
   * @maximum 9223372036854776000
   * @nullable
   */
  rothConversionStart?: number | null;
  /**
   * @minimum -9223372036854776000
   * @maximum 9223372036854776000
   * @nullable
   */
  rothConversionEnd?: number | null;
  investments?: Investment[];
  eventSeries?: EventSeries[];
  readonly spendingStrategyItems?: readonly SpendingStrategyItem[];
  readonly expenseWithdrawalStrategyItems?: readonly ExpenseWithdrawalStrategyItem[];
  readonly rmdStrategyItems?: readonly RMDStrategyItem[];
  readonly rothConversionStrategyItems?: readonly RothConversionStrategyItem[];
  readonly createdAt?: string;
  readonly updatedAt?: string;
  spendingStrategyInput?: string[];
  expenseWithdrawalStrategyInput?: string[];
  rmdStrategyInput?: string[];
  rothConversionStrategyInput?: string[];
}

export interface PatchedUser {
  readonly id?: number;
  /**
   * Required. Enter a valid email address.
   * @maxLength 254
   */
  email?: string;
  /** @maxLength 150 */
  firstName?: string;
  /** @maxLength 150 */
  lastName?: string;
  password?: string;
  passwordConfirm?: string;
  /** Designates whether this user should be treated as active. Unselect this instead of deleting accounts. */
  isActive?: boolean;
  /** Designates whether the user can log into this admin site. */
  isStaff?: boolean;
  readonly dateJoined?: string;
  /** @nullable */
  readonly lastLogin?: string | null;
}

export interface RMDStrategyItem {
  readonly investmentId: string;
  /**
   * @minimum 0
   * @maximum 9223372036854776000
   */
  order: number;
}

export interface RothConversionStrategyItem {
  readonly investmentId: string;
  /**
   * @minimum 0
   * @maximum 9223372036854776000
   */
  order: number;
}

/**
 * @nullable
 */
export type ScenarioSpouseLifeExpectancy = Distribution | null;

export interface Scenario {
  readonly id: number;
  /** @maxLength 200 */
  name: string;
  maritalStatus: MaritalStatusEnum;
  /**
   * @minimum -9223372036854776000
   * @maximum 9223372036854776000
   */
  userBirthYear: number;
  /**
   * @minimum -9223372036854776000
   * @maximum 9223372036854776000
   * @nullable
   */
  spouseBirthYear?: number | null;
  userLifeExpectancy: Distribution;
  /** @nullable */
  spouseLifeExpectancy?: ScenarioSpouseLifeExpectancy;
  inflationAssumption: Distribution;
  afterTaxContributionLimit: number;
  financialGoal: number;
  /** @maxLength 2 */
  residenceState: string;
  rothConversionOpt?: boolean;
  /**
   * @minimum -9223372036854776000
   * @maximum 9223372036854776000
   * @nullable
   */
  rothConversionStart?: number | null;
  /**
   * @minimum -9223372036854776000
   * @maximum 9223372036854776000
   * @nullable
   */
  rothConversionEnd?: number | null;
  investments: Investment[];
  eventSeries: EventSeries[];
  readonly spendingStrategyItems: readonly SpendingStrategyItem[];
  readonly expenseWithdrawalStrategyItems: readonly ExpenseWithdrawalStrategyItem[];
  readonly rmdStrategyItems: readonly RMDStrategyItem[];
  readonly rothConversionStrategyItems: readonly RothConversionStrategyItem[];
  readonly createdAt: string;
  readonly updatedAt: string;
  spendingStrategyInput?: string[];
  expenseWithdrawalStrategyInput?: string[];
  rmdStrategyInput?: string[];
  rothConversionStrategyInput?: string[];
}

/**
 * Serializer for handling user login data.
 */
export interface Session {
  /** @maxLength 150 */
  email: string;
  password: string;
}

export interface SpendingStrategyItem {
  readonly eventSeriesName: string;
  /**
   * @minimum 0
   * @maximum 9223372036854776000
   */
  order: number;
}

/**
 * * `distribution` - Distribution
 * `start_with` - Start With Event
 * `start_after` - Start After Event
 */
export type StartTypeEnum = (typeof StartTypeEnum)[keyof typeof StartTypeEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StartTypeEnum = {
  distribution: 'distribution',
  start_with: 'start_with',
  start_after: 'start_after'
} as const;

/**
 * * `non-retirement` - Non-retirement
 * `pre-tax` - Pre-tax Retirement
 * `after-tax` - After-tax Retirement
 */
export type TaxStatusEnum = (typeof TaxStatusEnum)[keyof typeof TaxStatusEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaxStatusEnum = {
  'non-retirement': 'non-retirement',
  'pre-tax': 'pre-tax',
  'after-tax': 'after-tax'
} as const;

export interface User {
  readonly id: number;
  /**
   * Required. Enter a valid email address.
   * @maxLength 254
   */
  email: string;
  /** @maxLength 150 */
  firstName?: string;
  /** @maxLength 150 */
  lastName?: string;
  password: string;
  passwordConfirm: string;
  /** Designates whether this user should be treated as active. Unselect this instead of deleting accounts. */
  isActive?: boolean;
  /** Designates whether the user can log into this admin site. */
  isStaff?: boolean;
  readonly dateJoined: string;
  /** @nullable */
  readonly lastLogin: string | null;
}
