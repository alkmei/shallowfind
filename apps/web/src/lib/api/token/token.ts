/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Shallowfind
 * Shallowfind Financial Planner
 * OpenAPI spec version: 0.0.1
 */
import {
  createMutation
} from '@tanstack/svelte-query';
import type {
  CreateMutationOptions,
  CreateMutationResult,
  MutationFunction
} from '@tanstack/svelte-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  TokenBlacklist,
  TokenObtainPair,
  TokenRefresh
} from '../shallowfind.schemas';


// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;





/**
 * Takes a set of user credentials and returns an access and refresh JSON web
token pair to prove the authentication of those credentials.
 */
export const tokenCreate = (
    tokenObtainPair: NonReadonly<TokenObtainPair>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TokenObtainPair>> => {
    
    
    return axios.post(
      `/api/token/`,
      tokenObtainPair,options
    );
  }



export const getTokenCreateMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof tokenCreate>>, TError,{data: NonReadonly<TokenObtainPair>}, TContext>, axios?: AxiosRequestConfig}
): CreateMutationOptions<Awaited<ReturnType<typeof tokenCreate>>, TError,{data: NonReadonly<TokenObtainPair>}, TContext> => {

const mutationKey = ['tokenCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tokenCreate>>, {data: NonReadonly<TokenObtainPair>}> = (props) => {
          const {data} = props ?? {};

          return  tokenCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TokenCreateMutationResult = NonNullable<Awaited<ReturnType<typeof tokenCreate>>>
    export type TokenCreateMutationBody = NonReadonly<TokenObtainPair>
    export type TokenCreateMutationError = AxiosError<unknown>

    export const createTokenCreate = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof tokenCreate>>, TError,{data: NonReadonly<TokenObtainPair>}, TContext>, axios?: AxiosRequestConfig}
 ): CreateMutationResult<
        Awaited<ReturnType<typeof tokenCreate>>,
        TError,
        {data: NonReadonly<TokenObtainPair>},
        TContext
      > => {

      const mutationOptions = getTokenCreateMutationOptions(options);

      return createMutation(mutationOptions );
    }
    /**
 * Takes a token and blacklists it. Must be used with the
`rest_framework_simplejwt.token_blacklist` app installed.
 */
export const tokenDestroyCreate = (
    tokenBlacklist: TokenBlacklist, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TokenBlacklist>> => {
    
    
    return axios.post(
      `/api/token/destroy/`,
      tokenBlacklist,options
    );
  }



export const getTokenDestroyCreateMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof tokenDestroyCreate>>, TError,{data: TokenBlacklist}, TContext>, axios?: AxiosRequestConfig}
): CreateMutationOptions<Awaited<ReturnType<typeof tokenDestroyCreate>>, TError,{data: TokenBlacklist}, TContext> => {

const mutationKey = ['tokenDestroyCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tokenDestroyCreate>>, {data: TokenBlacklist}> = (props) => {
          const {data} = props ?? {};

          return  tokenDestroyCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TokenDestroyCreateMutationResult = NonNullable<Awaited<ReturnType<typeof tokenDestroyCreate>>>
    export type TokenDestroyCreateMutationBody = TokenBlacklist
    export type TokenDestroyCreateMutationError = AxiosError<unknown>

    export const createTokenDestroyCreate = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof tokenDestroyCreate>>, TError,{data: TokenBlacklist}, TContext>, axios?: AxiosRequestConfig}
 ): CreateMutationResult<
        Awaited<ReturnType<typeof tokenDestroyCreate>>,
        TError,
        {data: TokenBlacklist},
        TContext
      > => {

      const mutationOptions = getTokenDestroyCreateMutationOptions(options);

      return createMutation(mutationOptions );
    }
    /**
 * Takes a refresh type JSON web token and returns an access type JSON web
token if the refresh token is valid.
 */
export const tokenRefreshCreate = (
    tokenRefresh: NonReadonly<TokenRefresh>, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TokenRefresh>> => {
    
    
    return axios.post(
      `/api/token/refresh/`,
      tokenRefresh,options
    );
  }



export const getTokenRefreshCreateMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof tokenRefreshCreate>>, TError,{data: NonReadonly<TokenRefresh>}, TContext>, axios?: AxiosRequestConfig}
): CreateMutationOptions<Awaited<ReturnType<typeof tokenRefreshCreate>>, TError,{data: NonReadonly<TokenRefresh>}, TContext> => {

const mutationKey = ['tokenRefreshCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tokenRefreshCreate>>, {data: NonReadonly<TokenRefresh>}> = (props) => {
          const {data} = props ?? {};

          return  tokenRefreshCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TokenRefreshCreateMutationResult = NonNullable<Awaited<ReturnType<typeof tokenRefreshCreate>>>
    export type TokenRefreshCreateMutationBody = NonReadonly<TokenRefresh>
    export type TokenRefreshCreateMutationError = AxiosError<unknown>

    export const createTokenRefreshCreate = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof tokenRefreshCreate>>, TError,{data: NonReadonly<TokenRefresh>}, TContext>, axios?: AxiosRequestConfig}
 ): CreateMutationResult<
        Awaited<ReturnType<typeof tokenRefreshCreate>>,
        TError,
        {data: NonReadonly<TokenRefresh>},
        TContext
      > => {

      const mutationOptions = getTokenRefreshCreateMutationOptions(options);

      return createMutation(mutationOptions );
    }
    