/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Shallowfind
 * Shallowfind Financial Planner
 * OpenAPI spec version: 0.0.1
 */
import { z as zod } from 'zod';

/**
 * ViewSet for managing scenarios with full CRUD operations.
Provides list, create, retrieve, update, destroy actions.
 */
export const scenariosListResponseNameMax = 200;
export const scenariosListResponseInvestmentTypesItemNameMax = 100;
export const scenariosListResponseEventSeriesItemNameMax = 100;

export const scenariosListResponseItem = zod
  .object({
    name: zod.string().max(scenariosListResponseNameMax),
    maritalStatus: zod.string(),
    birthYears: zod.array(zod.number()),
    lifeExpectancy: zod.array(
      zod
        .object({
          type: zod
            .enum(['fixed', 'normal', 'uniform'])
            .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .describe('Serializer for probability distributions')
    ),
    investmentTypes: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosListResponseInvestmentTypesItemNameMax),
          description: zod.string(),
          returnAmtOrPct: zod.string(),
          returnDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          expenseRatio: zod.number(),
          incomeAmtOrPct: zod.string(),
          incomeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          taxability: zod.boolean()
        })
        .describe('Serializer for investment types')
    ),
    investments: zod.array(
      zod
        .object({
          investmentType: zod.string(),
          value: zod.number(),
          taxStatus: zod.string(),
          id: zod.string()
        })
        .describe('Serializer for individual investments')
    ),
    eventSeries: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosListResponseEventSeriesItemNameMax),
          start: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          duration: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          type: zod
            .enum(['income', 'expense', 'invest', 'rebalance'])
            .describe(
              '* `income` - Income\n* `expense` - Expense\n* `invest` - Invest\n* `rebalance` - Rebalance'
            ),
          initialAmount: zod.number().optional(),
          changeAmtOrPct: zod.string().optional(),
          changeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          inflationAdjusted: zod.boolean().optional(),
          userFraction: zod.number().optional(),
          socialSecurity: zod.boolean().optional(),
          discretionary: zod.boolean().optional(),
          assetAllocation: zod
            .record(zod.string(), zod.any())
            .describe('Get initial asset allocation as dict'),
          glidePath: zod.boolean().optional(),
          assetAllocation2: zod
            .record(zod.string(), zod.any())
            .describe('Get final asset allocation for glide path'),
          maxCash: zod.number().optional()
        })
        .describe('Serializer for event series with complex nested data')
    ),
    inflationAssumption: zod
      .object({
        type: zod
          .enum(['fixed', 'normal', 'uniform'])
          .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      })
      .describe('Serializer for probability distributions'),
    afterTaxContributionLimit: zod.number(),
    spendingStrategy: zod.array(zod.string()),
    expenseWithdrawalStrategy: zod.array(zod.string()),
    RMDStrategy: zod.array(zod.string()),
    RothConversionOpt: zod.boolean(),
    RothConversionStart: zod.number().optional(),
    RothConversionEnd: zod.number().optional(),
    RothConversionStrategy: zod.array(zod.string()),
    financialGoal: zod.number(),
    residenceState: zod.string()
  })
  .describe('Main serializer for complete scenarios matching YAML format');
export const scenariosListResponse = zod.array(scenariosListResponseItem);

/**
 * ViewSet for managing scenarios with full CRUD operations.
Provides list, create, retrieve, update, destroy actions.
 */
export const scenariosCreateBodyNameMax = 200;
export const scenariosCreateBodyInvestmentTypesItemNameMax = 100;
export const scenariosCreateBodyEventSeriesItemNameMax = 100;

export const scenariosCreateBody = zod
  .object({
    name: zod.string().max(scenariosCreateBodyNameMax),
    maritalStatus: zod.string(),
    investmentTypes: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosCreateBodyInvestmentTypesItemNameMax),
          description: zod.string(),
          returnAmtOrPct: zod.string(),
          returnDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          expenseRatio: zod.number(),
          incomeAmtOrPct: zod.string(),
          incomeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          taxability: zod.boolean()
        })
        .describe('Serializer for investment types')
    ),
    investments: zod.array(
      zod
        .object({
          investmentType: zod.string(),
          value: zod.number(),
          taxStatus: zod.string(),
          id: zod.string()
        })
        .describe('Serializer for individual investments')
    ),
    eventSeries: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosCreateBodyEventSeriesItemNameMax),
          start: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          duration: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          type: zod
            .enum(['income', 'expense', 'invest', 'rebalance'])
            .describe(
              '* `income` - Income\n* `expense` - Expense\n* `invest` - Invest\n* `rebalance` - Rebalance'
            ),
          initialAmount: zod.number().optional(),
          changeAmtOrPct: zod.string().optional(),
          changeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          inflationAdjusted: zod.boolean().optional(),
          userFraction: zod.number().optional(),
          socialSecurity: zod.boolean().optional(),
          discretionary: zod.boolean().optional(),
          assetAllocation: zod
            .record(zod.string(), zod.any())
            .describe('Get initial asset allocation as dict'),
          glidePath: zod.boolean().optional(),
          assetAllocation2: zod
            .record(zod.string(), zod.any())
            .describe('Get final asset allocation for glide path'),
          maxCash: zod.number().optional()
        })
        .describe('Serializer for event series with complex nested data')
    ),
    inflationAssumption: zod
      .object({
        type: zod
          .enum(['fixed', 'normal', 'uniform'])
          .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      })
      .describe('Serializer for probability distributions'),
    afterTaxContributionLimit: zod.number(),
    RothConversionOpt: zod.boolean(),
    RothConversionStart: zod.number().optional(),
    RothConversionEnd: zod.number().optional(),
    financialGoal: zod.number(),
    residenceState: zod.string()
  })
  .describe('Main serializer for complete scenarios matching YAML format');

/**
 * ViewSet for managing scenarios with full CRUD operations.
Provides list, create, retrieve, update, destroy actions.
 */
export const scenariosRetrieveParams = zod.object({
  id: zod.number().describe('A unique integer value identifying this scenario.')
});

export const scenariosRetrieveResponseNameMax = 200;
export const scenariosRetrieveResponseInvestmentTypesItemNameMax = 100;
export const scenariosRetrieveResponseEventSeriesItemNameMax = 100;

export const scenariosRetrieveResponse = zod
  .object({
    name: zod.string().max(scenariosRetrieveResponseNameMax),
    maritalStatus: zod.string(),
    birthYears: zod.array(zod.number()),
    lifeExpectancy: zod.array(
      zod
        .object({
          type: zod
            .enum(['fixed', 'normal', 'uniform'])
            .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .describe('Serializer for probability distributions')
    ),
    investmentTypes: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosRetrieveResponseInvestmentTypesItemNameMax),
          description: zod.string(),
          returnAmtOrPct: zod.string(),
          returnDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          expenseRatio: zod.number(),
          incomeAmtOrPct: zod.string(),
          incomeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          taxability: zod.boolean()
        })
        .describe('Serializer for investment types')
    ),
    investments: zod.array(
      zod
        .object({
          investmentType: zod.string(),
          value: zod.number(),
          taxStatus: zod.string(),
          id: zod.string()
        })
        .describe('Serializer for individual investments')
    ),
    eventSeries: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosRetrieveResponseEventSeriesItemNameMax),
          start: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          duration: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          type: zod
            .enum(['income', 'expense', 'invest', 'rebalance'])
            .describe(
              '* `income` - Income\n* `expense` - Expense\n* `invest` - Invest\n* `rebalance` - Rebalance'
            ),
          initialAmount: zod.number().optional(),
          changeAmtOrPct: zod.string().optional(),
          changeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          inflationAdjusted: zod.boolean().optional(),
          userFraction: zod.number().optional(),
          socialSecurity: zod.boolean().optional(),
          discretionary: zod.boolean().optional(),
          assetAllocation: zod
            .record(zod.string(), zod.any())
            .describe('Get initial asset allocation as dict'),
          glidePath: zod.boolean().optional(),
          assetAllocation2: zod
            .record(zod.string(), zod.any())
            .describe('Get final asset allocation for glide path'),
          maxCash: zod.number().optional()
        })
        .describe('Serializer for event series with complex nested data')
    ),
    inflationAssumption: zod
      .object({
        type: zod
          .enum(['fixed', 'normal', 'uniform'])
          .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      })
      .describe('Serializer for probability distributions'),
    afterTaxContributionLimit: zod.number(),
    spendingStrategy: zod.array(zod.string()),
    expenseWithdrawalStrategy: zod.array(zod.string()),
    RMDStrategy: zod.array(zod.string()),
    RothConversionOpt: zod.boolean(),
    RothConversionStart: zod.number().optional(),
    RothConversionEnd: zod.number().optional(),
    RothConversionStrategy: zod.array(zod.string()),
    financialGoal: zod.number(),
    residenceState: zod.string()
  })
  .describe('Main serializer for complete scenarios matching YAML format');

/**
 * ViewSet for managing scenarios with full CRUD operations.
Provides list, create, retrieve, update, destroy actions.
 */
export const scenariosUpdateParams = zod.object({
  id: zod.number().describe('A unique integer value identifying this scenario.')
});

export const scenariosUpdateBodyNameMax = 200;
export const scenariosUpdateBodyInvestmentTypesItemNameMax = 100;
export const scenariosUpdateBodyEventSeriesItemNameMax = 100;

export const scenariosUpdateBody = zod
  .object({
    name: zod.string().max(scenariosUpdateBodyNameMax),
    maritalStatus: zod.string(),
    investmentTypes: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosUpdateBodyInvestmentTypesItemNameMax),
          description: zod.string(),
          returnAmtOrPct: zod.string(),
          returnDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          expenseRatio: zod.number(),
          incomeAmtOrPct: zod.string(),
          incomeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          taxability: zod.boolean()
        })
        .describe('Serializer for investment types')
    ),
    investments: zod.array(
      zod
        .object({
          investmentType: zod.string(),
          value: zod.number(),
          taxStatus: zod.string(),
          id: zod.string()
        })
        .describe('Serializer for individual investments')
    ),
    eventSeries: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosUpdateBodyEventSeriesItemNameMax),
          start: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          duration: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          type: zod
            .enum(['income', 'expense', 'invest', 'rebalance'])
            .describe(
              '* `income` - Income\n* `expense` - Expense\n* `invest` - Invest\n* `rebalance` - Rebalance'
            ),
          initialAmount: zod.number().optional(),
          changeAmtOrPct: zod.string().optional(),
          changeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          inflationAdjusted: zod.boolean().optional(),
          userFraction: zod.number().optional(),
          socialSecurity: zod.boolean().optional(),
          discretionary: zod.boolean().optional(),
          assetAllocation: zod
            .record(zod.string(), zod.any())
            .describe('Get initial asset allocation as dict'),
          glidePath: zod.boolean().optional(),
          assetAllocation2: zod
            .record(zod.string(), zod.any())
            .describe('Get final asset allocation for glide path'),
          maxCash: zod.number().optional()
        })
        .describe('Serializer for event series with complex nested data')
    ),
    inflationAssumption: zod
      .object({
        type: zod
          .enum(['fixed', 'normal', 'uniform'])
          .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      })
      .describe('Serializer for probability distributions'),
    afterTaxContributionLimit: zod.number(),
    RothConversionOpt: zod.boolean(),
    RothConversionStart: zod.number().optional(),
    RothConversionEnd: zod.number().optional(),
    financialGoal: zod.number(),
    residenceState: zod.string()
  })
  .describe('Main serializer for complete scenarios matching YAML format');

export const scenariosUpdateResponseNameMax = 200;
export const scenariosUpdateResponseInvestmentTypesItemNameMax = 100;
export const scenariosUpdateResponseEventSeriesItemNameMax = 100;

export const scenariosUpdateResponse = zod
  .object({
    name: zod.string().max(scenariosUpdateResponseNameMax),
    maritalStatus: zod.string(),
    birthYears: zod.array(zod.number()),
    lifeExpectancy: zod.array(
      zod
        .object({
          type: zod
            .enum(['fixed', 'normal', 'uniform'])
            .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .describe('Serializer for probability distributions')
    ),
    investmentTypes: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosUpdateResponseInvestmentTypesItemNameMax),
          description: zod.string(),
          returnAmtOrPct: zod.string(),
          returnDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          expenseRatio: zod.number(),
          incomeAmtOrPct: zod.string(),
          incomeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          taxability: zod.boolean()
        })
        .describe('Serializer for investment types')
    ),
    investments: zod.array(
      zod
        .object({
          investmentType: zod.string(),
          value: zod.number(),
          taxStatus: zod.string(),
          id: zod.string()
        })
        .describe('Serializer for individual investments')
    ),
    eventSeries: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosUpdateResponseEventSeriesItemNameMax),
          start: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          duration: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          type: zod
            .enum(['income', 'expense', 'invest', 'rebalance'])
            .describe(
              '* `income` - Income\n* `expense` - Expense\n* `invest` - Invest\n* `rebalance` - Rebalance'
            ),
          initialAmount: zod.number().optional(),
          changeAmtOrPct: zod.string().optional(),
          changeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          inflationAdjusted: zod.boolean().optional(),
          userFraction: zod.number().optional(),
          socialSecurity: zod.boolean().optional(),
          discretionary: zod.boolean().optional(),
          assetAllocation: zod
            .record(zod.string(), zod.any())
            .describe('Get initial asset allocation as dict'),
          glidePath: zod.boolean().optional(),
          assetAllocation2: zod
            .record(zod.string(), zod.any())
            .describe('Get final asset allocation for glide path'),
          maxCash: zod.number().optional()
        })
        .describe('Serializer for event series with complex nested data')
    ),
    inflationAssumption: zod
      .object({
        type: zod
          .enum(['fixed', 'normal', 'uniform'])
          .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      })
      .describe('Serializer for probability distributions'),
    afterTaxContributionLimit: zod.number(),
    spendingStrategy: zod.array(zod.string()),
    expenseWithdrawalStrategy: zod.array(zod.string()),
    RMDStrategy: zod.array(zod.string()),
    RothConversionOpt: zod.boolean(),
    RothConversionStart: zod.number().optional(),
    RothConversionEnd: zod.number().optional(),
    RothConversionStrategy: zod.array(zod.string()),
    financialGoal: zod.number(),
    residenceState: zod.string()
  })
  .describe('Main serializer for complete scenarios matching YAML format');

/**
 * ViewSet for managing scenarios with full CRUD operations.
Provides list, create, retrieve, update, destroy actions.
 */
export const scenariosPartialUpdateParams = zod.object({
  id: zod.number().describe('A unique integer value identifying this scenario.')
});

export const scenariosPartialUpdateBodyNameMax = 200;
export const scenariosPartialUpdateBodyInvestmentTypesItemNameMax = 100;
export const scenariosPartialUpdateBodyEventSeriesItemNameMax = 100;

export const scenariosPartialUpdateBody = zod
  .object({
    name: zod.string().max(scenariosPartialUpdateBodyNameMax).optional(),
    maritalStatus: zod.string().optional(),
    investmentTypes: zod
      .array(
        zod
          .object({
            name: zod.string().max(scenariosPartialUpdateBodyInvestmentTypesItemNameMax),
            description: zod.string(),
            returnAmtOrPct: zod.string(),
            returnDistribution: zod
              .object({
                type: zod
                  .enum(['fixed', 'normal', 'uniform'])
                  .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .describe('Serializer for probability distributions'),
            expenseRatio: zod.number(),
            incomeAmtOrPct: zod.string(),
            incomeDistribution: zod
              .object({
                type: zod
                  .enum(['fixed', 'normal', 'uniform'])
                  .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .describe('Serializer for probability distributions'),
            taxability: zod.boolean()
          })
          .describe('Serializer for investment types')
      )
      .optional(),
    investments: zod
      .array(
        zod
          .object({
            investmentType: zod.string(),
            value: zod.number(),
            taxStatus: zod.string(),
            id: zod.string()
          })
          .describe('Serializer for individual investments')
      )
      .optional(),
    eventSeries: zod
      .array(
        zod
          .object({
            name: zod.string().max(scenariosPartialUpdateBodyEventSeriesItemNameMax),
            start: zod
              .object({
                type: zod
                  .enum(['fixed', 'normal', 'uniform'])
                  .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .optional()
              .describe('Serializer for probability distributions'),
            duration: zod
              .object({
                type: zod
                  .enum(['fixed', 'normal', 'uniform'])
                  .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .describe('Serializer for probability distributions'),
            type: zod
              .enum(['income', 'expense', 'invest', 'rebalance'])
              .describe(
                '* `income` - Income\n* `expense` - Expense\n* `invest` - Invest\n* `rebalance` - Rebalance'
              ),
            initialAmount: zod.number().optional(),
            changeAmtOrPct: zod.string().optional(),
            changeDistribution: zod
              .object({
                type: zod
                  .enum(['fixed', 'normal', 'uniform'])
                  .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .optional()
              .describe('Serializer for probability distributions'),
            inflationAdjusted: zod.boolean().optional(),
            userFraction: zod.number().optional(),
            socialSecurity: zod.boolean().optional(),
            discretionary: zod.boolean().optional(),
            assetAllocation: zod
              .record(zod.string(), zod.any())
              .describe('Get initial asset allocation as dict'),
            glidePath: zod.boolean().optional(),
            assetAllocation2: zod
              .record(zod.string(), zod.any())
              .describe('Get final asset allocation for glide path'),
            maxCash: zod.number().optional()
          })
          .describe('Serializer for event series with complex nested data')
      )
      .optional(),
    inflationAssumption: zod
      .object({
        type: zod
          .enum(['fixed', 'normal', 'uniform'])
          .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      })
      .optional()
      .describe('Serializer for probability distributions'),
    afterTaxContributionLimit: zod.number().optional(),
    RothConversionOpt: zod.boolean().optional(),
    RothConversionStart: zod.number().optional(),
    RothConversionEnd: zod.number().optional(),
    financialGoal: zod.number().optional(),
    residenceState: zod.string().optional()
  })
  .describe('Main serializer for complete scenarios matching YAML format');

export const scenariosPartialUpdateResponseNameMax = 200;
export const scenariosPartialUpdateResponseInvestmentTypesItemNameMax = 100;
export const scenariosPartialUpdateResponseEventSeriesItemNameMax = 100;

export const scenariosPartialUpdateResponse = zod
  .object({
    name: zod.string().max(scenariosPartialUpdateResponseNameMax),
    maritalStatus: zod.string(),
    birthYears: zod.array(zod.number()),
    lifeExpectancy: zod.array(
      zod
        .object({
          type: zod
            .enum(['fixed', 'normal', 'uniform'])
            .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .describe('Serializer for probability distributions')
    ),
    investmentTypes: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosPartialUpdateResponseInvestmentTypesItemNameMax),
          description: zod.string(),
          returnAmtOrPct: zod.string(),
          returnDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          expenseRatio: zod.number(),
          incomeAmtOrPct: zod.string(),
          incomeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          taxability: zod.boolean()
        })
        .describe('Serializer for investment types')
    ),
    investments: zod.array(
      zod
        .object({
          investmentType: zod.string(),
          value: zod.number(),
          taxStatus: zod.string(),
          id: zod.string()
        })
        .describe('Serializer for individual investments')
    ),
    eventSeries: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosPartialUpdateResponseEventSeriesItemNameMax),
          start: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          duration: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          type: zod
            .enum(['income', 'expense', 'invest', 'rebalance'])
            .describe(
              '* `income` - Income\n* `expense` - Expense\n* `invest` - Invest\n* `rebalance` - Rebalance'
            ),
          initialAmount: zod.number().optional(),
          changeAmtOrPct: zod.string().optional(),
          changeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          inflationAdjusted: zod.boolean().optional(),
          userFraction: zod.number().optional(),
          socialSecurity: zod.boolean().optional(),
          discretionary: zod.boolean().optional(),
          assetAllocation: zod
            .record(zod.string(), zod.any())
            .describe('Get initial asset allocation as dict'),
          glidePath: zod.boolean().optional(),
          assetAllocation2: zod
            .record(zod.string(), zod.any())
            .describe('Get final asset allocation for glide path'),
          maxCash: zod.number().optional()
        })
        .describe('Serializer for event series with complex nested data')
    ),
    inflationAssumption: zod
      .object({
        type: zod
          .enum(['fixed', 'normal', 'uniform'])
          .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      })
      .describe('Serializer for probability distributions'),
    afterTaxContributionLimit: zod.number(),
    spendingStrategy: zod.array(zod.string()),
    expenseWithdrawalStrategy: zod.array(zod.string()),
    RMDStrategy: zod.array(zod.string()),
    RothConversionOpt: zod.boolean(),
    RothConversionStart: zod.number().optional(),
    RothConversionEnd: zod.number().optional(),
    RothConversionStrategy: zod.array(zod.string()),
    financialGoal: zod.number(),
    residenceState: zod.string()
  })
  .describe('Main serializer for complete scenarios matching YAML format');

/**
 * ViewSet for managing scenarios with full CRUD operations.
Provides list, create, retrieve, update, destroy actions.
 */
export const scenariosDestroyParams = zod.object({
  id: zod.number().describe('A unique integer value identifying this scenario.')
});

/**
 * Clone an existing scenario
 */
export const scenariosCloneCreateParams = zod.object({
  id: zod.number().describe('A unique integer value identifying this scenario.')
});

export const scenariosCloneCreateBodyNameMax = 200;
export const scenariosCloneCreateBodyInvestmentTypesItemNameMax = 100;
export const scenariosCloneCreateBodyEventSeriesItemNameMax = 100;

export const scenariosCloneCreateBody = zod
  .object({
    name: zod.string().max(scenariosCloneCreateBodyNameMax),
    maritalStatus: zod.string(),
    investmentTypes: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosCloneCreateBodyInvestmentTypesItemNameMax),
          description: zod.string(),
          returnAmtOrPct: zod.string(),
          returnDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          expenseRatio: zod.number(),
          incomeAmtOrPct: zod.string(),
          incomeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          taxability: zod.boolean()
        })
        .describe('Serializer for investment types')
    ),
    investments: zod.array(
      zod
        .object({
          investmentType: zod.string(),
          value: zod.number(),
          taxStatus: zod.string(),
          id: zod.string()
        })
        .describe('Serializer for individual investments')
    ),
    eventSeries: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosCloneCreateBodyEventSeriesItemNameMax),
          start: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          duration: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          type: zod
            .enum(['income', 'expense', 'invest', 'rebalance'])
            .describe(
              '* `income` - Income\n* `expense` - Expense\n* `invest` - Invest\n* `rebalance` - Rebalance'
            ),
          initialAmount: zod.number().optional(),
          changeAmtOrPct: zod.string().optional(),
          changeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          inflationAdjusted: zod.boolean().optional(),
          userFraction: zod.number().optional(),
          socialSecurity: zod.boolean().optional(),
          discretionary: zod.boolean().optional(),
          assetAllocation: zod
            .record(zod.string(), zod.any())
            .describe('Get initial asset allocation as dict'),
          glidePath: zod.boolean().optional(),
          assetAllocation2: zod
            .record(zod.string(), zod.any())
            .describe('Get final asset allocation for glide path'),
          maxCash: zod.number().optional()
        })
        .describe('Serializer for event series with complex nested data')
    ),
    inflationAssumption: zod
      .object({
        type: zod
          .enum(['fixed', 'normal', 'uniform'])
          .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      })
      .describe('Serializer for probability distributions'),
    afterTaxContributionLimit: zod.number(),
    RothConversionOpt: zod.boolean(),
    RothConversionStart: zod.number().optional(),
    RothConversionEnd: zod.number().optional(),
    financialGoal: zod.number(),
    residenceState: zod.string()
  })
  .describe('Main serializer for complete scenarios matching YAML format');

export const scenariosCloneCreateResponseNameMax = 200;
export const scenariosCloneCreateResponseInvestmentTypesItemNameMax = 100;
export const scenariosCloneCreateResponseEventSeriesItemNameMax = 100;

export const scenariosCloneCreateResponse = zod
  .object({
    name: zod.string().max(scenariosCloneCreateResponseNameMax),
    maritalStatus: zod.string(),
    birthYears: zod.array(zod.number()),
    lifeExpectancy: zod.array(
      zod
        .object({
          type: zod
            .enum(['fixed', 'normal', 'uniform'])
            .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .describe('Serializer for probability distributions')
    ),
    investmentTypes: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosCloneCreateResponseInvestmentTypesItemNameMax),
          description: zod.string(),
          returnAmtOrPct: zod.string(),
          returnDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          expenseRatio: zod.number(),
          incomeAmtOrPct: zod.string(),
          incomeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          taxability: zod.boolean()
        })
        .describe('Serializer for investment types')
    ),
    investments: zod.array(
      zod
        .object({
          investmentType: zod.string(),
          value: zod.number(),
          taxStatus: zod.string(),
          id: zod.string()
        })
        .describe('Serializer for individual investments')
    ),
    eventSeries: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosCloneCreateResponseEventSeriesItemNameMax),
          start: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          duration: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          type: zod
            .enum(['income', 'expense', 'invest', 'rebalance'])
            .describe(
              '* `income` - Income\n* `expense` - Expense\n* `invest` - Invest\n* `rebalance` - Rebalance'
            ),
          initialAmount: zod.number().optional(),
          changeAmtOrPct: zod.string().optional(),
          changeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          inflationAdjusted: zod.boolean().optional(),
          userFraction: zod.number().optional(),
          socialSecurity: zod.boolean().optional(),
          discretionary: zod.boolean().optional(),
          assetAllocation: zod
            .record(zod.string(), zod.any())
            .describe('Get initial asset allocation as dict'),
          glidePath: zod.boolean().optional(),
          assetAllocation2: zod
            .record(zod.string(), zod.any())
            .describe('Get final asset allocation for glide path'),
          maxCash: zod.number().optional()
        })
        .describe('Serializer for event series with complex nested data')
    ),
    inflationAssumption: zod
      .object({
        type: zod
          .enum(['fixed', 'normal', 'uniform'])
          .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      })
      .describe('Serializer for probability distributions'),
    afterTaxContributionLimit: zod.number(),
    spendingStrategy: zod.array(zod.string()),
    expenseWithdrawalStrategy: zod.array(zod.string()),
    RMDStrategy: zod.array(zod.string()),
    RothConversionOpt: zod.boolean(),
    RothConversionStart: zod.number().optional(),
    RothConversionEnd: zod.number().optional(),
    RothConversionStrategy: zod.array(zod.string()),
    financialGoal: zod.number(),
    residenceState: zod.string()
  })
  .describe('Main serializer for complete scenarios matching YAML format');

/**
 * Export scenario as YAML
 */
export const scenariosExportRetrieveParams = zod.object({
  id: zod.number().describe('A unique integer value identifying this scenario.')
});

export const scenariosExportRetrieveResponseNameMax = 200;
export const scenariosExportRetrieveResponseInvestmentTypesItemNameMax = 100;
export const scenariosExportRetrieveResponseEventSeriesItemNameMax = 100;

export const scenariosExportRetrieveResponse = zod
  .object({
    name: zod.string().max(scenariosExportRetrieveResponseNameMax),
    maritalStatus: zod.string(),
    birthYears: zod.array(zod.number()),
    lifeExpectancy: zod.array(
      zod
        .object({
          type: zod
            .enum(['fixed', 'normal', 'uniform'])
            .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .describe('Serializer for probability distributions')
    ),
    investmentTypes: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosExportRetrieveResponseInvestmentTypesItemNameMax),
          description: zod.string(),
          returnAmtOrPct: zod.string(),
          returnDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          expenseRatio: zod.number(),
          incomeAmtOrPct: zod.string(),
          incomeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          taxability: zod.boolean()
        })
        .describe('Serializer for investment types')
    ),
    investments: zod.array(
      zod
        .object({
          investmentType: zod.string(),
          value: zod.number(),
          taxStatus: zod.string(),
          id: zod.string()
        })
        .describe('Serializer for individual investments')
    ),
    eventSeries: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosExportRetrieveResponseEventSeriesItemNameMax),
          start: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          duration: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          type: zod
            .enum(['income', 'expense', 'invest', 'rebalance'])
            .describe(
              '* `income` - Income\n* `expense` - Expense\n* `invest` - Invest\n* `rebalance` - Rebalance'
            ),
          initialAmount: zod.number().optional(),
          changeAmtOrPct: zod.string().optional(),
          changeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          inflationAdjusted: zod.boolean().optional(),
          userFraction: zod.number().optional(),
          socialSecurity: zod.boolean().optional(),
          discretionary: zod.boolean().optional(),
          assetAllocation: zod
            .record(zod.string(), zod.any())
            .describe('Get initial asset allocation as dict'),
          glidePath: zod.boolean().optional(),
          assetAllocation2: zod
            .record(zod.string(), zod.any())
            .describe('Get final asset allocation for glide path'),
          maxCash: zod.number().optional()
        })
        .describe('Serializer for event series with complex nested data')
    ),
    inflationAssumption: zod
      .object({
        type: zod
          .enum(['fixed', 'normal', 'uniform'])
          .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      })
      .describe('Serializer for probability distributions'),
    afterTaxContributionLimit: zod.number(),
    spendingStrategy: zod.array(zod.string()),
    expenseWithdrawalStrategy: zod.array(zod.string()),
    RMDStrategy: zod.array(zod.string()),
    RothConversionOpt: zod.boolean(),
    RothConversionStart: zod.number().optional(),
    RothConversionEnd: zod.number().optional(),
    RothConversionStrategy: zod.array(zod.string()),
    financialGoal: zod.number(),
    residenceState: zod.string()
  })
  .describe('Main serializer for complete scenarios matching YAML format');

/**
 * Run Monte Carlo simulations for this scenario
 */
export const scenariosSimulateCreateParams = zod.object({
  id: zod.number().describe('A unique integer value identifying this scenario.')
});

export const scenariosSimulateCreateBodyNameMax = 200;
export const scenariosSimulateCreateBodyInvestmentTypesItemNameMax = 100;
export const scenariosSimulateCreateBodyEventSeriesItemNameMax = 100;

export const scenariosSimulateCreateBody = zod
  .object({
    name: zod.string().max(scenariosSimulateCreateBodyNameMax),
    maritalStatus: zod.string(),
    investmentTypes: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosSimulateCreateBodyInvestmentTypesItemNameMax),
          description: zod.string(),
          returnAmtOrPct: zod.string(),
          returnDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          expenseRatio: zod.number(),
          incomeAmtOrPct: zod.string(),
          incomeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          taxability: zod.boolean()
        })
        .describe('Serializer for investment types')
    ),
    investments: zod.array(
      zod
        .object({
          investmentType: zod.string(),
          value: zod.number(),
          taxStatus: zod.string(),
          id: zod.string()
        })
        .describe('Serializer for individual investments')
    ),
    eventSeries: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosSimulateCreateBodyEventSeriesItemNameMax),
          start: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          duration: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          type: zod
            .enum(['income', 'expense', 'invest', 'rebalance'])
            .describe(
              '* `income` - Income\n* `expense` - Expense\n* `invest` - Invest\n* `rebalance` - Rebalance'
            ),
          initialAmount: zod.number().optional(),
          changeAmtOrPct: zod.string().optional(),
          changeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          inflationAdjusted: zod.boolean().optional(),
          userFraction: zod.number().optional(),
          socialSecurity: zod.boolean().optional(),
          discretionary: zod.boolean().optional(),
          assetAllocation: zod
            .record(zod.string(), zod.any())
            .describe('Get initial asset allocation as dict'),
          glidePath: zod.boolean().optional(),
          assetAllocation2: zod
            .record(zod.string(), zod.any())
            .describe('Get final asset allocation for glide path'),
          maxCash: zod.number().optional()
        })
        .describe('Serializer for event series with complex nested data')
    ),
    inflationAssumption: zod
      .object({
        type: zod
          .enum(['fixed', 'normal', 'uniform'])
          .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      })
      .describe('Serializer for probability distributions'),
    afterTaxContributionLimit: zod.number(),
    RothConversionOpt: zod.boolean(),
    RothConversionStart: zod.number().optional(),
    RothConversionEnd: zod.number().optional(),
    financialGoal: zod.number(),
    residenceState: zod.string()
  })
  .describe('Main serializer for complete scenarios matching YAML format');

export const scenariosSimulateCreateResponseNameMax = 200;
export const scenariosSimulateCreateResponseInvestmentTypesItemNameMax = 100;
export const scenariosSimulateCreateResponseEventSeriesItemNameMax = 100;

export const scenariosSimulateCreateResponse = zod
  .object({
    name: zod.string().max(scenariosSimulateCreateResponseNameMax),
    maritalStatus: zod.string(),
    birthYears: zod.array(zod.number()),
    lifeExpectancy: zod.array(
      zod
        .object({
          type: zod
            .enum(['fixed', 'normal', 'uniform'])
            .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .describe('Serializer for probability distributions')
    ),
    investmentTypes: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosSimulateCreateResponseInvestmentTypesItemNameMax),
          description: zod.string(),
          returnAmtOrPct: zod.string(),
          returnDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          expenseRatio: zod.number(),
          incomeAmtOrPct: zod.string(),
          incomeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          taxability: zod.boolean()
        })
        .describe('Serializer for investment types')
    ),
    investments: zod.array(
      zod
        .object({
          investmentType: zod.string(),
          value: zod.number(),
          taxStatus: zod.string(),
          id: zod.string()
        })
        .describe('Serializer for individual investments')
    ),
    eventSeries: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosSimulateCreateResponseEventSeriesItemNameMax),
          start: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          duration: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          type: zod
            .enum(['income', 'expense', 'invest', 'rebalance'])
            .describe(
              '* `income` - Income\n* `expense` - Expense\n* `invest` - Invest\n* `rebalance` - Rebalance'
            ),
          initialAmount: zod.number().optional(),
          changeAmtOrPct: zod.string().optional(),
          changeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          inflationAdjusted: zod.boolean().optional(),
          userFraction: zod.number().optional(),
          socialSecurity: zod.boolean().optional(),
          discretionary: zod.boolean().optional(),
          assetAllocation: zod
            .record(zod.string(), zod.any())
            .describe('Get initial asset allocation as dict'),
          glidePath: zod.boolean().optional(),
          assetAllocation2: zod
            .record(zod.string(), zod.any())
            .describe('Get final asset allocation for glide path'),
          maxCash: zod.number().optional()
        })
        .describe('Serializer for event series with complex nested data')
    ),
    inflationAssumption: zod
      .object({
        type: zod
          .enum(['fixed', 'normal', 'uniform'])
          .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      })
      .describe('Serializer for probability distributions'),
    afterTaxContributionLimit: zod.number(),
    spendingStrategy: zod.array(zod.string()),
    expenseWithdrawalStrategy: zod.array(zod.string()),
    RMDStrategy: zod.array(zod.string()),
    RothConversionOpt: zod.boolean(),
    RothConversionStart: zod.number().optional(),
    RothConversionEnd: zod.number().optional(),
    RothConversionStrategy: zod.array(zod.string()),
    financialGoal: zod.number(),
    residenceState: zod.string()
  })
  .describe('Main serializer for complete scenarios matching YAML format');

/**
 * Validate scenario for simulation readiness
 */
export const scenariosValidateScenarioRetrieveParams = zod.object({
  id: zod.number().describe('A unique integer value identifying this scenario.')
});

export const scenariosValidateScenarioRetrieveResponseNameMax = 200;
export const scenariosValidateScenarioRetrieveResponseInvestmentTypesItemNameMax = 100;
export const scenariosValidateScenarioRetrieveResponseEventSeriesItemNameMax = 100;

export const scenariosValidateScenarioRetrieveResponse = zod
  .object({
    name: zod.string().max(scenariosValidateScenarioRetrieveResponseNameMax),
    maritalStatus: zod.string(),
    birthYears: zod.array(zod.number()),
    lifeExpectancy: zod.array(
      zod
        .object({
          type: zod
            .enum(['fixed', 'normal', 'uniform'])
            .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .describe('Serializer for probability distributions')
    ),
    investmentTypes: zod.array(
      zod
        .object({
          name: zod
            .string()
            .max(scenariosValidateScenarioRetrieveResponseInvestmentTypesItemNameMax),
          description: zod.string(),
          returnAmtOrPct: zod.string(),
          returnDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          expenseRatio: zod.number(),
          incomeAmtOrPct: zod.string(),
          incomeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          taxability: zod.boolean()
        })
        .describe('Serializer for investment types')
    ),
    investments: zod.array(
      zod
        .object({
          investmentType: zod.string(),
          value: zod.number(),
          taxStatus: zod.string(),
          id: zod.string()
        })
        .describe('Serializer for individual investments')
    ),
    eventSeries: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosValidateScenarioRetrieveResponseEventSeriesItemNameMax),
          start: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          duration: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          type: zod
            .enum(['income', 'expense', 'invest', 'rebalance'])
            .describe(
              '* `income` - Income\n* `expense` - Expense\n* `invest` - Invest\n* `rebalance` - Rebalance'
            ),
          initialAmount: zod.number().optional(),
          changeAmtOrPct: zod.string().optional(),
          changeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          inflationAdjusted: zod.boolean().optional(),
          userFraction: zod.number().optional(),
          socialSecurity: zod.boolean().optional(),
          discretionary: zod.boolean().optional(),
          assetAllocation: zod
            .record(zod.string(), zod.any())
            .describe('Get initial asset allocation as dict'),
          glidePath: zod.boolean().optional(),
          assetAllocation2: zod
            .record(zod.string(), zod.any())
            .describe('Get final asset allocation for glide path'),
          maxCash: zod.number().optional()
        })
        .describe('Serializer for event series with complex nested data')
    ),
    inflationAssumption: zod
      .object({
        type: zod
          .enum(['fixed', 'normal', 'uniform'])
          .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      })
      .describe('Serializer for probability distributions'),
    afterTaxContributionLimit: zod.number(),
    spendingStrategy: zod.array(zod.string()),
    expenseWithdrawalStrategy: zod.array(zod.string()),
    RMDStrategy: zod.array(zod.string()),
    RothConversionOpt: zod.boolean(),
    RothConversionStart: zod.number().optional(),
    RothConversionEnd: zod.number().optional(),
    RothConversionStrategy: zod.array(zod.string()),
    financialGoal: zod.number(),
    residenceState: zod.string()
  })
  .describe('Main serializer for complete scenarios matching YAML format');

/**
 * Import scenario from YAML file
 */
export const scenariosImportScenarioCreateBodyNameMax = 200;
export const scenariosImportScenarioCreateBodyInvestmentTypesItemNameMax = 100;
export const scenariosImportScenarioCreateBodyEventSeriesItemNameMax = 100;

export const scenariosImportScenarioCreateBody = zod
  .object({
    name: zod.string().max(scenariosImportScenarioCreateBodyNameMax),
    maritalStatus: zod.string(),
    investmentTypes: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosImportScenarioCreateBodyInvestmentTypesItemNameMax),
          description: zod.string(),
          returnAmtOrPct: zod.string(),
          returnDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          expenseRatio: zod.number(),
          incomeAmtOrPct: zod.string(),
          incomeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          taxability: zod.boolean()
        })
        .describe('Serializer for investment types')
    ),
    investments: zod.array(
      zod
        .object({
          investmentType: zod.string(),
          value: zod.number(),
          taxStatus: zod.string(),
          id: zod.string()
        })
        .describe('Serializer for individual investments')
    ),
    eventSeries: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosImportScenarioCreateBodyEventSeriesItemNameMax),
          start: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          duration: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          type: zod
            .enum(['income', 'expense', 'invest', 'rebalance'])
            .describe(
              '* `income` - Income\n* `expense` - Expense\n* `invest` - Invest\n* `rebalance` - Rebalance'
            ),
          initialAmount: zod.number().optional(),
          changeAmtOrPct: zod.string().optional(),
          changeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          inflationAdjusted: zod.boolean().optional(),
          userFraction: zod.number().optional(),
          socialSecurity: zod.boolean().optional(),
          discretionary: zod.boolean().optional(),
          assetAllocation: zod
            .record(zod.string(), zod.any())
            .describe('Get initial asset allocation as dict'),
          glidePath: zod.boolean().optional(),
          assetAllocation2: zod
            .record(zod.string(), zod.any())
            .describe('Get final asset allocation for glide path'),
          maxCash: zod.number().optional()
        })
        .describe('Serializer for event series with complex nested data')
    ),
    inflationAssumption: zod
      .object({
        type: zod
          .enum(['fixed', 'normal', 'uniform'])
          .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      })
      .describe('Serializer for probability distributions'),
    afterTaxContributionLimit: zod.number(),
    RothConversionOpt: zod.boolean(),
    RothConversionStart: zod.number().optional(),
    RothConversionEnd: zod.number().optional(),
    financialGoal: zod.number(),
    residenceState: zod.string()
  })
  .describe('Main serializer for complete scenarios matching YAML format');

export const scenariosImportScenarioCreateResponseNameMax = 200;
export const scenariosImportScenarioCreateResponseInvestmentTypesItemNameMax = 100;
export const scenariosImportScenarioCreateResponseEventSeriesItemNameMax = 100;

export const scenariosImportScenarioCreateResponse = zod
  .object({
    name: zod.string().max(scenariosImportScenarioCreateResponseNameMax),
    maritalStatus: zod.string(),
    birthYears: zod.array(zod.number()),
    lifeExpectancy: zod.array(
      zod
        .object({
          type: zod
            .enum(['fixed', 'normal', 'uniform'])
            .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .describe('Serializer for probability distributions')
    ),
    investmentTypes: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosImportScenarioCreateResponseInvestmentTypesItemNameMax),
          description: zod.string(),
          returnAmtOrPct: zod.string(),
          returnDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          expenseRatio: zod.number(),
          incomeAmtOrPct: zod.string(),
          incomeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          taxability: zod.boolean()
        })
        .describe('Serializer for investment types')
    ),
    investments: zod.array(
      zod
        .object({
          investmentType: zod.string(),
          value: zod.number(),
          taxStatus: zod.string(),
          id: zod.string()
        })
        .describe('Serializer for individual investments')
    ),
    eventSeries: zod.array(
      zod
        .object({
          name: zod.string().max(scenariosImportScenarioCreateResponseEventSeriesItemNameMax),
          start: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          duration: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .describe('Serializer for probability distributions'),
          type: zod
            .enum(['income', 'expense', 'invest', 'rebalance'])
            .describe(
              '* `income` - Income\n* `expense` - Expense\n* `invest` - Invest\n* `rebalance` - Rebalance'
            ),
          initialAmount: zod.number().optional(),
          changeAmtOrPct: zod.string().optional(),
          changeDistribution: zod
            .object({
              type: zod
                .enum(['fixed', 'normal', 'uniform'])
                .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional()
            .describe('Serializer for probability distributions'),
          inflationAdjusted: zod.boolean().optional(),
          userFraction: zod.number().optional(),
          socialSecurity: zod.boolean().optional(),
          discretionary: zod.boolean().optional(),
          assetAllocation: zod
            .record(zod.string(), zod.any())
            .describe('Get initial asset allocation as dict'),
          glidePath: zod.boolean().optional(),
          assetAllocation2: zod
            .record(zod.string(), zod.any())
            .describe('Get final asset allocation for glide path'),
          maxCash: zod.number().optional()
        })
        .describe('Serializer for event series with complex nested data')
    ),
    inflationAssumption: zod
      .object({
        type: zod
          .enum(['fixed', 'normal', 'uniform'])
          .describe('* `fixed` - Fixed\n* `normal` - Normal\n* `uniform` - Uniform'),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      })
      .describe('Serializer for probability distributions'),
    afterTaxContributionLimit: zod.number(),
    spendingStrategy: zod.array(zod.string()),
    expenseWithdrawalStrategy: zod.array(zod.string()),
    RMDStrategy: zod.array(zod.string()),
    RothConversionOpt: zod.boolean(),
    RothConversionStart: zod.number().optional(),
    RothConversionEnd: zod.number().optional(),
    RothConversionStrategy: zod.array(zod.string()),
    financialGoal: zod.number(),
    residenceState: zod.string()
  })
  .describe('Main serializer for complete scenarios matching YAML format');
