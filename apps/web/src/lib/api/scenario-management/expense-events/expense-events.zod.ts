/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * ScenarioManager.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import { z as zod } from 'zod';

export const postApiScenariosScenarioIdExpenseEventsParams = zod.object({
  scenarioId: zod.string()
});

export const postApiScenariosScenarioIdExpenseEventsBodyNameMax = 255;
export const postApiScenariosScenarioIdExpenseEventsBodyDescriptionMax = 1000;
export const postApiScenariosScenarioIdExpenseEventsBodyStartTimingTypeMax = 50;

export const postApiScenariosScenarioIdExpenseEventsBody = zod.object({
  name: zod.string().min(1).max(postApiScenariosScenarioIdExpenseEventsBodyNameMax),
  description: zod
    .string()
    .max(postApiScenariosScenarioIdExpenseEventsBodyDescriptionMax)
    .nullish(),
  startYear: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  duration: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  referenceEventSeriesId: zod.string().nullish(),
  startTimingType: zod
    .string()
    .max(postApiScenariosScenarioIdExpenseEventsBodyStartTimingTypeMax)
    .nullish(),
  isActive: zod.boolean().optional(),
  orderIndex: zod.number().optional(),
  initialAmount: zod.number(),
  annualChange: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  inflationAdjusted: zod.boolean().optional(),
  userPercentage: zod.number().nullish(),
  isDiscretionary: zod.boolean().optional()
});

export const postApiScenariosScenarioIdExpenseEventsResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
  startYear: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  duration: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  referenceEventSeriesId: zod.string().nullish(),
  startTimingType: zod.string().nullish(),
  isActive: zod.boolean().optional(),
  orderIndex: zod.number().optional(),
  initialAmount: zod.number().nullish(),
  annualChange: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  inflationAdjusted: zod.boolean().optional(),
  userPercentage: zod.number().nullish(),
  isSocialSecurity: zod.boolean().optional(),
  isDiscretionary: zod.boolean().optional(),
  assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
  isGlidePath: zod.boolean().optional(),
  initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
  finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
  maximumCash: zod.number().nullish(),
  targetTaxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional()
});

export const getApiScenariosScenarioIdExpenseEventsParams = zod.object({
  scenarioId: zod.string()
});

export const getApiScenariosScenarioIdExpenseEventsResponseItem = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
  startYear: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  duration: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  referenceEventSeriesId: zod.string().nullish(),
  startTimingType: zod.string().nullish(),
  isActive: zod.boolean().optional(),
  orderIndex: zod.number().optional(),
  initialAmount: zod.number().nullish(),
  annualChange: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  inflationAdjusted: zod.boolean().optional(),
  userPercentage: zod.number().nullish(),
  isSocialSecurity: zod.boolean().optional(),
  isDiscretionary: zod.boolean().optional(),
  assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
  isGlidePath: zod.boolean().optional(),
  initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
  finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
  maximumCash: zod.number().nullish(),
  targetTaxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional()
});
export const getApiScenariosScenarioIdExpenseEventsResponse = zod.array(
  getApiScenariosScenarioIdExpenseEventsResponseItem
);

export const getApiScenariosScenarioIdExpenseEventsIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});

export const getApiScenariosScenarioIdExpenseEventsIdResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
  startYear: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  duration: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  referenceEventSeriesId: zod.string().nullish(),
  startTimingType: zod.string().nullish(),
  isActive: zod.boolean().optional(),
  orderIndex: zod.number().optional(),
  initialAmount: zod.number().nullish(),
  annualChange: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  inflationAdjusted: zod.boolean().optional(),
  userPercentage: zod.number().nullish(),
  isSocialSecurity: zod.boolean().optional(),
  isDiscretionary: zod.boolean().optional(),
  assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
  isGlidePath: zod.boolean().optional(),
  initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
  finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
  maximumCash: zod.number().nullish(),
  targetTaxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional()
});

export const putApiScenariosScenarioIdExpenseEventsIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});

export const putApiScenariosScenarioIdExpenseEventsIdBodyNameMax = 255;
export const putApiScenariosScenarioIdExpenseEventsIdBodyDescriptionMax = 1000;
export const putApiScenariosScenarioIdExpenseEventsIdBodyStartTimingTypeMax = 50;

export const putApiScenariosScenarioIdExpenseEventsIdBody = zod.object({
  name: zod.string().min(1).max(putApiScenariosScenarioIdExpenseEventsIdBodyNameMax),
  description: zod
    .string()
    .max(putApiScenariosScenarioIdExpenseEventsIdBodyDescriptionMax)
    .nullish(),
  startYear: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  duration: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  referenceEventSeriesId: zod.string().nullish(),
  startTimingType: zod
    .string()
    .max(putApiScenariosScenarioIdExpenseEventsIdBodyStartTimingTypeMax)
    .nullish(),
  isActive: zod.boolean().optional(),
  orderIndex: zod.number().optional(),
  initialAmount: zod.number(),
  annualChange: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  inflationAdjusted: zod.boolean().optional(),
  userPercentage: zod.number().nullish(),
  isDiscretionary: zod.boolean().optional()
});

export const putApiScenariosScenarioIdExpenseEventsIdResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
  startYear: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  duration: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  referenceEventSeriesId: zod.string().nullish(),
  startTimingType: zod.string().nullish(),
  isActive: zod.boolean().optional(),
  orderIndex: zod.number().optional(),
  initialAmount: zod.number().nullish(),
  annualChange: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  inflationAdjusted: zod.boolean().optional(),
  userPercentage: zod.number().nullish(),
  isSocialSecurity: zod.boolean().optional(),
  isDiscretionary: zod.boolean().optional(),
  assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
  isGlidePath: zod.boolean().optional(),
  initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
  finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
  maximumCash: zod.number().nullish(),
  targetTaxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional()
});

export const deleteApiScenariosScenarioIdExpenseEventsIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});
