/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Scenario Manager API
 * API for managing scenarios, strategies, and investments.
 * OpenAPI spec version: v1
 */
import { z as zod } from 'zod';

export const postApiScenariosScenarioIdIncomeEventsParams = zod.object({
  scenarioId: zod.string()
});

export const postApiScenariosScenarioIdIncomeEventsBodyNameMax = 255;
export const postApiScenariosScenarioIdIncomeEventsBodyDescriptionMax = 1000;
export const postApiScenariosScenarioIdIncomeEventsBodyStartTimingTypeMax = 50;

export const postApiScenariosScenarioIdIncomeEventsBody = zod.object({
  name: zod.string().min(1).max(postApiScenariosScenarioIdIncomeEventsBodyNameMax),
  description: zod.string().max(postApiScenariosScenarioIdIncomeEventsBodyDescriptionMax).nullish(),
  startYear: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  duration: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  referenceEventSeriesId: zod.string().nullish(),
  startTimingType: zod
    .string()
    .max(postApiScenariosScenarioIdIncomeEventsBodyStartTimingTypeMax)
    .nullish(),
  isActive: zod.boolean().optional(),
  orderIndex: zod.number().optional(),
  initialAmount: zod.number(),
  annualChange: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  inflationAdjusted: zod.boolean().optional(),
  userPercentage: zod.number().nullish(),
  isSocialSecurity: zod.boolean().optional()
});

export const postApiScenariosScenarioIdIncomeEventsResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
  startYear: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  duration: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  referenceEventSeriesId: zod.string().nullish(),
  startTimingType: zod.string().nullish(),
  isActive: zod.boolean().optional(),
  orderIndex: zod.number().optional(),
  initialAmount: zod.number().nullish(),
  annualChange: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  inflationAdjusted: zod.boolean().optional(),
  userPercentage: zod.number().nullish(),
  isSocialSecurity: zod.boolean().optional(),
  isDiscretionary: zod.boolean().optional(),
  assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
  isGlidePath: zod.boolean().optional(),
  initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
  finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
  maximumCash: zod.number().nullish(),
  targetTaxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional()
});

export const getApiScenariosScenarioIdIncomeEventsParams = zod.object({
  scenarioId: zod.string()
});

export const getApiScenariosScenarioIdIncomeEventsResponseItem = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
  startYear: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  duration: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  referenceEventSeriesId: zod.string().nullish(),
  startTimingType: zod.string().nullish(),
  isActive: zod.boolean().optional(),
  orderIndex: zod.number().optional(),
  initialAmount: zod.number().nullish(),
  annualChange: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  inflationAdjusted: zod.boolean().optional(),
  userPercentage: zod.number().nullish(),
  isSocialSecurity: zod.boolean().optional(),
  isDiscretionary: zod.boolean().optional(),
  assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
  isGlidePath: zod.boolean().optional(),
  initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
  finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
  maximumCash: zod.number().nullish(),
  targetTaxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional()
});
export const getApiScenariosScenarioIdIncomeEventsResponse = zod.array(
  getApiScenariosScenarioIdIncomeEventsResponseItem
);

export const getApiScenariosScenarioIdIncomeEventsIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});

export const getApiScenariosScenarioIdIncomeEventsIdResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
  startYear: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  duration: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  referenceEventSeriesId: zod.string().nullish(),
  startTimingType: zod.string().nullish(),
  isActive: zod.boolean().optional(),
  orderIndex: zod.number().optional(),
  initialAmount: zod.number().nullish(),
  annualChange: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  inflationAdjusted: zod.boolean().optional(),
  userPercentage: zod.number().nullish(),
  isSocialSecurity: zod.boolean().optional(),
  isDiscretionary: zod.boolean().optional(),
  assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
  isGlidePath: zod.boolean().optional(),
  initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
  finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
  maximumCash: zod.number().nullish(),
  targetTaxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional()
});

export const putApiScenariosScenarioIdIncomeEventsIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});

export const putApiScenariosScenarioIdIncomeEventsIdBodyNameMax = 255;
export const putApiScenariosScenarioIdIncomeEventsIdBodyDescriptionMax = 1000;
export const putApiScenariosScenarioIdIncomeEventsIdBodyStartTimingTypeMax = 50;

export const putApiScenariosScenarioIdIncomeEventsIdBody = zod.object({
  name: zod.string().min(1).max(putApiScenariosScenarioIdIncomeEventsIdBodyNameMax),
  description: zod
    .string()
    .max(putApiScenariosScenarioIdIncomeEventsIdBodyDescriptionMax)
    .nullish(),
  startYear: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  duration: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  referenceEventSeriesId: zod.string().nullish(),
  startTimingType: zod
    .string()
    .max(putApiScenariosScenarioIdIncomeEventsIdBodyStartTimingTypeMax)
    .nullish(),
  isActive: zod.boolean().optional(),
  orderIndex: zod.number().optional(),
  initialAmount: zod.number(),
  annualChange: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  inflationAdjusted: zod.boolean().optional(),
  userPercentage: zod.number().nullish(),
  isSocialSecurity: zod.boolean().optional()
});

export const putApiScenariosScenarioIdIncomeEventsIdResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
  startYear: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  duration: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  referenceEventSeriesId: zod.string().nullish(),
  startTimingType: zod.string().nullish(),
  isActive: zod.boolean().optional(),
  orderIndex: zod.number().optional(),
  initialAmount: zod.number().nullish(),
  annualChange: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  inflationAdjusted: zod.boolean().optional(),
  userPercentage: zod.number().nullish(),
  isSocialSecurity: zod.boolean().optional(),
  isDiscretionary: zod.boolean().optional(),
  assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
  isGlidePath: zod.boolean().optional(),
  initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
  finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
  maximumCash: zod.number().nullish(),
  targetTaxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional()
});

export const deleteApiScenariosScenarioIdIncomeEventsIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});
