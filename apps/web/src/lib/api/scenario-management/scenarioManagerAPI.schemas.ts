/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Scenario Manager API
 * API for managing scenarios, strategies, and investments.
 * OpenAPI spec version: v1
 */
export type AccountTaxStatus = (typeof AccountTaxStatus)[keyof typeof AccountTaxStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountTaxStatus = {
  NonRetirement: 'NonRetirement',
  PreTaxRetirement: 'PreTaxRetirement',
  AfterTaxRetirement: 'AfterTaxRetirement'
} as const;

export interface CreateExpenseEventRequest {
  /**
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * @maxLength 1000
   * @nullable
   */
  description?: string | null;
  startYear?: Distribution;
  duration?: Distribution;
  /** @nullable */
  referenceEventSeriesId?: string | null;
  /**
   * @maxLength 50
   * @nullable
   */
  startTimingType?: string | null;
  isActive?: boolean;
  orderIndex?: number;
  initialAmount: number;
  annualChange?: Distribution;
  inflationAdjusted?: boolean;
  /** @nullable */
  userPercentage?: number | null;
  isDiscretionary?: boolean;
}

export interface CreateIncomeEventRequest {
  /**
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * @maxLength 1000
   * @nullable
   */
  description?: string | null;
  startYear?: Distribution;
  duration?: Distribution;
  /** @nullable */
  referenceEventSeriesId?: string | null;
  /**
   * @maxLength 50
   * @nullable
   */
  startTimingType?: string | null;
  isActive?: boolean;
  orderIndex?: number;
  initialAmount: number;
  annualChange?: Distribution;
  inflationAdjusted?: boolean;
  /** @nullable */
  userPercentage?: number | null;
  isSocialSecurity?: boolean;
}

export type CreateInvestEventRequestAssetAllocation = { [key: string]: number };

/**
 * @nullable
 */
export type CreateInvestEventRequestInitialAllocation = { [key: string]: number } | null;

/**
 * @nullable
 */
export type CreateInvestEventRequestFinalAllocation = { [key: string]: number } | null;

export interface CreateInvestEventRequest {
  /**
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * @maxLength 1000
   * @nullable
   */
  description?: string | null;
  startYear?: Distribution;
  duration?: Distribution;
  /** @nullable */
  referenceEventSeriesId?: string | null;
  /**
   * @maxLength 50
   * @nullable
   */
  startTimingType?: string | null;
  isActive?: boolean;
  orderIndex?: number;
  assetAllocation: CreateInvestEventRequestAssetAllocation;
  isGlidePath?: boolean;
  /** @nullable */
  initialAllocation?: CreateInvestEventRequestInitialAllocation;
  /** @nullable */
  finalAllocation?: CreateInvestEventRequestFinalAllocation;
  /** @nullable */
  maximumCash?: number | null;
}

export interface CreateInvestmentRequest {
  /** @minLength 1 */
  investmentTypeId: string;
  /**
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  currentValue?: number;
  taxStatus?: AccountTaxStatus;
  costBasis?: number;
  orderIndex?: number;
}

export interface CreateInvestmentTypeRequest {
  /**
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * @maxLength 1000
   * @nullable
   */
  description?: string | null;
  expectedAnnualReturn: Distribution;
  expenseRatio?: number;
  expectedAnnualIncome: Distribution;
  taxability?: InvestmentTaxability;
  isCash?: boolean;
}

export type CreateRebalanceEventRequestAssetAllocation = { [key: string]: number };

/**
 * @nullable
 */
export type CreateRebalanceEventRequestInitialAllocation = { [key: string]: number } | null;

/**
 * @nullable
 */
export type CreateRebalanceEventRequestFinalAllocation = { [key: string]: number } | null;

export interface CreateRebalanceEventRequest {
  /**
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * @maxLength 1000
   * @nullable
   */
  description?: string | null;
  startYear?: Distribution;
  duration?: Distribution;
  /** @nullable */
  referenceEventSeriesId?: string | null;
  /**
   * @maxLength 50
   * @nullable
   */
  startTimingType?: string | null;
  isActive?: boolean;
  orderIndex?: number;
  assetAllocation: CreateRebalanceEventRequestAssetAllocation;
  isGlidePath?: boolean;
  /** @nullable */
  initialAllocation?: CreateRebalanceEventRequestInitialAllocation;
  /** @nullable */
  finalAllocation?: CreateRebalanceEventRequestFinalAllocation;
  targetTaxStatus: AccountTaxStatus;
}

export interface CreateScenarioRequest {
  /**
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /** @nullable */
  description?: string | null;
  scenarioType: ScenarioType;
}

export interface CreateStrategyRequest {
  /** @minLength 1 */
  scenarioId: string;
  strategyType?: StrategyType;
  /**
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * @maxLength 1000
   * @nullable
   */
  description?: string | null;
  isActive?: boolean;
  /** @nullable */
  ordering?: string[] | null;
}

export interface Distribution {
  /** @nullable */
  type: string | null;
  /** @nullable */
  value?: number | null;
  /** @nullable */
  mean?: number | null;
  /** @nullable */
  stdev?: number | null;
  /** @nullable */
  lower?: number | null;
  /** @nullable */
  upper?: number | null;
}

/**
 * @nullable
 */
export type EventSeriesAssetAllocation = { [key: string]: number } | null;

/**
 * @nullable
 */
export type EventSeriesInitialAllocation = { [key: string]: number } | null;

/**
 * @nullable
 */
export type EventSeriesFinalAllocation = { [key: string]: number } | null;

export interface EventSeries {
  /** @nullable */
  id?: string | null;
  createdAt?: string;
  updatedAt?: string;
  /** @minLength 1 */
  scenarioId: string;
  /**
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * @maxLength 1000
   * @nullable
   */
  description?: string | null;
  eventType?: EventSeriesType;
  startYear?: Distribution;
  duration?: Distribution;
  /** @nullable */
  referenceEventSeriesId?: string | null;
  /**
   * @maxLength 50
   * @nullable
   */
  startTimingType?: string | null;
  isActive?: boolean;
  orderIndex?: number;
  /** @nullable */
  initialAmount?: number | null;
  annualChange?: Distribution;
  inflationAdjusted?: boolean;
  /** @nullable */
  userPercentage?: number | null;
  isSocialSecurity?: boolean;
  isDiscretionary?: boolean;
  /** @nullable */
  assetAllocation?: EventSeriesAssetAllocation;
  isGlidePath?: boolean;
  /** @nullable */
  initialAllocation?: EventSeriesInitialAllocation;
  /** @nullable */
  finalAllocation?: EventSeriesFinalAllocation;
  /** @nullable */
  maximumCash?: number | null;
  targetTaxStatus?: AccountTaxStatus;
  scenario?: Scenario;
  referenceEventSeries?: EventSeries;
  /** @nullable */
  referencingEventSeries?: EventSeries[] | null;
}

/**
 * @nullable
 */
export type EventSeriesResponseAssetAllocation = { [key: string]: number } | null;

/**
 * @nullable
 */
export type EventSeriesResponseInitialAllocation = { [key: string]: number } | null;

/**
 * @nullable
 */
export type EventSeriesResponseFinalAllocation = { [key: string]: number } | null;

export interface EventSeriesResponse {
  /** @nullable */
  id: string | null;
  /** @nullable */
  scenarioId: string | null;
  /** @nullable */
  name: string | null;
  /** @nullable */
  description?: string | null;
  eventType?: EventSeriesType;
  startYear?: Distribution;
  duration?: Distribution;
  /** @nullable */
  referenceEventSeriesId?: string | null;
  /** @nullable */
  startTimingType?: string | null;
  isActive?: boolean;
  orderIndex?: number;
  /** @nullable */
  initialAmount?: number | null;
  annualChange?: Distribution;
  inflationAdjusted?: boolean;
  /** @nullable */
  userPercentage?: number | null;
  isSocialSecurity?: boolean;
  isDiscretionary?: boolean;
  /** @nullable */
  assetAllocation?: EventSeriesResponseAssetAllocation;
  isGlidePath?: boolean;
  /** @nullable */
  initialAllocation?: EventSeriesResponseInitialAllocation;
  /** @nullable */
  finalAllocation?: EventSeriesResponseFinalAllocation;
  /** @nullable */
  maximumCash?: number | null;
  targetTaxStatus?: AccountTaxStatus;
  createdAt?: string;
  updatedAt?: string;
}

export type EventSeriesType = (typeof EventSeriesType)[keyof typeof EventSeriesType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventSeriesType = {
  Income: 'Income',
  Expense: 'Expense',
  Invest: 'Invest',
  Rebalance: 'Rebalance'
} as const;

export interface Investment {
  /** @nullable */
  id?: string | null;
  createdAt?: string;
  updatedAt?: string;
  /** @minLength 1 */
  scenarioId: string;
  /** @minLength 1 */
  investmentTypeId: string;
  /**
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  currentValue?: number;
  taxStatus?: AccountTaxStatus;
  costBasis?: number;
  orderIndex?: number;
  scenario?: Scenario;
  investmentType?: InvestmentType;
}

export interface InvestmentResponse {
  /** @nullable */
  id: string | null;
  /** @minLength 1 */
  scenarioId: string;
  /** @minLength 1 */
  investmentTypeId: string;
  /**
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  currentValue?: number;
  taxStatus?: AccountTaxStatus;
  costBasis?: number;
  orderIndex?: number;
  scenario?: Scenario;
  investmentType?: InvestmentType;
}

export type InvestmentTaxability = (typeof InvestmentTaxability)[keyof typeof InvestmentTaxability];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvestmentTaxability = {
  Taxable: 'Taxable',
  TaxExempt: 'TaxExempt'
} as const;

export interface InvestmentType {
  /** @nullable */
  id?: string | null;
  createdAt?: string;
  updatedAt?: string;
  /** @minLength 1 */
  scenarioId: string;
  /**
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * @maxLength 1000
   * @nullable
   */
  description?: string | null;
  expectedAnnualReturn: Distribution;
  expenseRatio?: number;
  expectedAnnualIncome: Distribution;
  taxability?: InvestmentTaxability;
  isCash?: boolean;
  scenario?: Scenario;
  /** @nullable */
  investments?: Investment[] | null;
}

export interface InvestmentTypeResponse {
  /** @nullable */
  id: string | null;
  /** @nullable */
  scenarioId: string | null;
  /** @nullable */
  name: string | null;
  /** @nullable */
  description?: string | null;
  expectedAnnualReturn: Distribution;
  expenseRatio?: number;
  expectedAnnualIncome: Distribution;
  taxability?: InvestmentTaxability;
  isCash?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface Scenario {
  /** @nullable */
  id?: string | null;
  createdAt?: string;
  updatedAt?: string;
  /**
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /** @nullable */
  description?: string | null;
  /** @minLength 1 */
  ownerId: string;
  scenarioType?: ScenarioType;
  status?: ScenarioStatus;
  /** @nullable */
  userBirthYear?: number | null;
  /** @nullable */
  spouseBirthYear?: number | null;
  userLifeExpectancy?: Distribution;
  spouseLifeExpectancy?: Distribution;
  financialGoal?: number;
  /**
   * @maxLength 100
   * @nullable
   */
  stateOfResidence?: string | null;
  inflationAssumption?: Distribution;
  annualRetirementContributionLimit?: number;
  rothOptimizerEnabled?: boolean;
  /** @nullable */
  rothOptimizerStartYear?: number | null;
  /** @nullable */
  rothOptimizerEndYear?: number | null;
  /**
   * @maxLength 255
   * @nullable
   */
  importSource?: string | null;
  exportCount?: number;
  /** @nullable */
  lastSimulationRun?: string | null;
  /** @nullable */
  investmentTypes?: InvestmentType[] | null;
  /** @nullable */
  investments?: Investment[] | null;
  /** @nullable */
  eventSeries?: EventSeries[] | null;
  /** @nullable */
  strategies?: Strategy[] | null;
  /** @nullable */
  scenarioShares?: ScenarioShare[] | null;
}

export interface ScenarioResponse {
  /** @nullable */
  id: string | null;
  /** @nullable */
  name: string | null;
  /** @nullable */
  description?: string | null;
  /** @nullable */
  ownerId: string | null;
  scenarioType?: ScenarioType;
  status?: ScenarioStatus;
  createdAt?: string;
  updatedAt?: string;
  /** @nullable */
  userBirthYear?: number | null;
  /** @nullable */
  spouseBirthYear?: number | null;
  userLifeExpectancy?: Distribution;
  spouseLifeExpectancy?: Distribution;
  financialGoal?: number;
  /** @nullable */
  stateOfResidence?: string | null;
  inflationAssumption?: Distribution;
  annualRetirementContributionLimit?: number;
  rothOptimizerEnabled?: boolean;
  /** @nullable */
  rothOptimizerStartYear?: number | null;
  /** @nullable */
  rothOptimizerEndYear?: number | null;
  /** @nullable */
  importSource?: string | null;
  exportCount?: number;
  /** @nullable */
  lastSimulationRun?: string | null;
}

export interface ScenarioShare {
  /** @nullable */
  id?: string | null;
  createdAt?: string;
  updatedAt?: string;
  /** @minLength 1 */
  scenarioId: string;
  /** @minLength 1 */
  sharedWithUserId: string;
  permission?: SharePermission;
  /** @minLength 1 */
  sharedByUserId: string;
  isActive?: boolean;
  scenario?: Scenario;
}

export type ScenarioStatus = (typeof ScenarioStatus)[keyof typeof ScenarioStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ScenarioStatus = {
  Draft: 'Draft',
  Complete: 'Complete'
} as const;

export type ScenarioType = (typeof ScenarioType)[keyof typeof ScenarioType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ScenarioType = {
  Individual: 'Individual',
  MarriedCouple: 'MarriedCouple'
} as const;

export type SharePermission = (typeof SharePermission)[keyof typeof SharePermission];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SharePermission = {
  ReadOnly: 'ReadOnly',
  ReadWrite: 'ReadWrite'
} as const;

/**
 * @nullable
 */
export type StrategySettings = { [key: string]: unknown } | null;

export interface Strategy {
  /** @nullable */
  id?: string | null;
  createdAt?: string;
  updatedAt?: string;
  /** @minLength 1 */
  scenarioId: string;
  strategyType?: StrategyType;
  /**
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * @maxLength 1000
   * @nullable
   */
  description?: string | null;
  isActive?: boolean;
  /** @nullable */
  ordering?: string[] | null;
  /** @nullable */
  settings?: StrategySettings;
  scenario?: Scenario;
}

export interface StrategyResponse {
  /** @nullable */
  id: string | null;
  /** @minLength 1 */
  scenarioId: string;
  strategyType?: StrategyType;
  /**
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * @maxLength 1000
   * @nullable
   */
  description?: string | null;
  isActive?: boolean;
  /** @nullable */
  ordering?: string[] | null;
}

export type StrategyType = (typeof StrategyType)[keyof typeof StrategyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StrategyType = {
  Spending: 'Spending',
  ExpenseWithdrawal: 'ExpenseWithdrawal',
  Rmd: 'Rmd',
  RothConversion: 'RothConversion'
} as const;

export interface UpdateInvestmentRequest {
  /**
   * @maxLength 255
   * @nullable
   */
  name?: string | null;
  /** @nullable */
  currentValue?: number | null;
  taxStatus?: AccountTaxStatus;
  /** @nullable */
  costBasis?: number | null;
  /** @nullable */
  orderIndex?: number | null;
}

export interface UpdateScenarioRequest {
  /**
   * @maxLength 255
   * @nullable
   */
  name?: string | null;
  /** @nullable */
  description?: string | null;
  scenarioType?: ScenarioType;
  /** @nullable */
  userBirthYear?: number | null;
  /** @nullable */
  spouseBirthYear?: number | null;
  userLifeExpectancy?: Distribution;
  spouseLifeExpectancy?: Distribution;
  /** @nullable */
  financialGoal?: number | null;
  /**
   * @maxLength 100
   * @nullable
   */
  stateOfResidence?: string | null;
  inflationAssumption?: Distribution;
  /** @nullable */
  annualRetirementContributionLimit?: number | null;
  /** @nullable */
  rothOptimizerEnabled?: boolean | null;
  /** @nullable */
  rothOptimizerStartYear?: number | null;
  /** @nullable */
  rothOptimizerEndYear?: number | null;
}
