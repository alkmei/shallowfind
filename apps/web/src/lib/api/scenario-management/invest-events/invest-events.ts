/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * ScenarioManager.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import { createMutation, createQuery } from '@tanstack/svelte-query';
import type {
  CreateMutationOptions,
  CreateMutationResult,
  CreateQueryOptions,
  CreateQueryResult,
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey
} from '@tanstack/svelte-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  CreateInvestEventRequest,
  EventSeriesResponse
} from '../scenarioManagerApiVersion1000CultureNeutralPublicKeyTokenNull.schemas';

export const postApiScenariosScenarioIdInvestEvents = (
  scenarioId: string,
  createInvestEventRequest: CreateInvestEventRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<EventSeriesResponse>> => {
  return axios.post(
    `/api/scenarios/${scenarioId}/invest-events`,
    createInvestEventRequest,
    options
  );
};

export const getPostApiScenariosScenarioIdInvestEventsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof postApiScenariosScenarioIdInvestEvents>>,
    TError,
    { scenarioId: string; data: CreateInvestEventRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof postApiScenariosScenarioIdInvestEvents>>,
  TError,
  { scenarioId: string; data: CreateInvestEventRequest },
  TContext
> => {
  const mutationKey = ['postApiScenariosScenarioIdInvestEvents'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiScenariosScenarioIdInvestEvents>>,
    { scenarioId: string; data: CreateInvestEventRequest }
  > = (props) => {
    const { scenarioId, data } = props ?? {};

    return postApiScenariosScenarioIdInvestEvents(scenarioId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiScenariosScenarioIdInvestEventsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiScenariosScenarioIdInvestEvents>>
>;
export type PostApiScenariosScenarioIdInvestEventsMutationBody = CreateInvestEventRequest;
export type PostApiScenariosScenarioIdInvestEventsMutationError = AxiosError<unknown>;

export const createPostApiScenariosScenarioIdInvestEvents = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof postApiScenariosScenarioIdInvestEvents>>,
      TError,
      { scenarioId: string; data: CreateInvestEventRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateMutationResult<
  Awaited<ReturnType<typeof postApiScenariosScenarioIdInvestEvents>>,
  TError,
  { scenarioId: string; data: CreateInvestEventRequest },
  TContext
> => {
  const mutationOptions = getPostApiScenariosScenarioIdInvestEventsMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
export const getApiScenariosScenarioIdInvestEvents = (
  scenarioId: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<EventSeriesResponse[]>> => {
  return axios.get(`/api/scenarios/${scenarioId}/invest-events`, options);
};

export const getGetApiScenariosScenarioIdInvestEventsQueryKey = (scenarioId?: string) => {
  return [`/api/scenarios/${scenarioId}/invest-events`] as const;
};

export const getGetApiScenariosScenarioIdInvestEventsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestEvents>>,
  TError = AxiosError<unknown>
>(
  scenarioId: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestEvents>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiScenariosScenarioIdInvestEventsQueryKey(scenarioId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestEvents>>
  > = ({ signal }) =>
    getApiScenariosScenarioIdInvestEvents(scenarioId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!scenarioId,
    useQuery: true,
    staleTime: 300000,
    ...queryOptions
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestEvents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiScenariosScenarioIdInvestEventsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestEvents>>
>;
export type GetApiScenariosScenarioIdInvestEventsQueryError = AxiosError<unknown>;

export function createGetApiScenariosScenarioIdInvestEvents<
  TData = Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestEvents>>,
  TError = AxiosError<unknown>
>(
  scenarioId: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestEvents>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiScenariosScenarioIdInvestEventsQueryOptions(scenarioId, options);

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiScenariosScenarioIdInvestEventsId = (
  scenarioId: string,
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<EventSeriesResponse>> => {
  return axios.get(`/api/scenarios/${scenarioId}/invest-events/${id}`, options);
};

export const getGetApiScenariosScenarioIdInvestEventsIdQueryKey = (
  scenarioId?: string,
  id?: string
) => {
  return [`/api/scenarios/${scenarioId}/invest-events/${id}`] as const;
};

export const getGetApiScenariosScenarioIdInvestEventsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestEventsId>>,
  TError = AxiosError<unknown>
>(
  scenarioId: string,
  id: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestEventsId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiScenariosScenarioIdInvestEventsIdQueryKey(scenarioId, id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestEventsId>>
  > = ({ signal }) =>
    getApiScenariosScenarioIdInvestEventsId(scenarioId, id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(scenarioId && id),
    useQuery: true,
    staleTime: 300000,
    ...queryOptions
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestEventsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiScenariosScenarioIdInvestEventsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestEventsId>>
>;
export type GetApiScenariosScenarioIdInvestEventsIdQueryError = AxiosError<unknown>;

export function createGetApiScenariosScenarioIdInvestEventsId<
  TData = Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestEventsId>>,
  TError = AxiosError<unknown>
>(
  scenarioId: string,
  id: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestEventsId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiScenariosScenarioIdInvestEventsIdQueryOptions(
    scenarioId,
    id,
    options
  );

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiScenariosScenarioIdInvestEventsId = (
  scenarioId: string,
  id: string,
  createInvestEventRequest: CreateInvestEventRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<EventSeriesResponse>> => {
  return axios.put(
    `/api/scenarios/${scenarioId}/invest-events/${id}`,
    createInvestEventRequest,
    options
  );
};

export const getPutApiScenariosScenarioIdInvestEventsIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof putApiScenariosScenarioIdInvestEventsId>>,
    TError,
    { scenarioId: string; id: string; data: CreateInvestEventRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof putApiScenariosScenarioIdInvestEventsId>>,
  TError,
  { scenarioId: string; id: string; data: CreateInvestEventRequest },
  TContext
> => {
  const mutationKey = ['putApiScenariosScenarioIdInvestEventsId'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiScenariosScenarioIdInvestEventsId>>,
    { scenarioId: string; id: string; data: CreateInvestEventRequest }
  > = (props) => {
    const { scenarioId, id, data } = props ?? {};

    return putApiScenariosScenarioIdInvestEventsId(scenarioId, id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiScenariosScenarioIdInvestEventsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiScenariosScenarioIdInvestEventsId>>
>;
export type PutApiScenariosScenarioIdInvestEventsIdMutationBody = CreateInvestEventRequest;
export type PutApiScenariosScenarioIdInvestEventsIdMutationError = AxiosError<unknown>;

export const createPutApiScenariosScenarioIdInvestEventsId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof putApiScenariosScenarioIdInvestEventsId>>,
      TError,
      { scenarioId: string; id: string; data: CreateInvestEventRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateMutationResult<
  Awaited<ReturnType<typeof putApiScenariosScenarioIdInvestEventsId>>,
  TError,
  { scenarioId: string; id: string; data: CreateInvestEventRequest },
  TContext
> => {
  const mutationOptions = getPutApiScenariosScenarioIdInvestEventsIdMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
export const deleteApiScenariosScenarioIdInvestEventsId = (
  scenarioId: string,
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<null>> => {
  return axios.delete(`/api/scenarios/${scenarioId}/invest-events/${id}`, options);
};

export const getDeleteApiScenariosScenarioIdInvestEventsIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof deleteApiScenariosScenarioIdInvestEventsId>>,
    TError,
    { scenarioId: string; id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof deleteApiScenariosScenarioIdInvestEventsId>>,
  TError,
  { scenarioId: string; id: string },
  TContext
> => {
  const mutationKey = ['deleteApiScenariosScenarioIdInvestEventsId'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiScenariosScenarioIdInvestEventsId>>,
    { scenarioId: string; id: string }
  > = (props) => {
    const { scenarioId, id } = props ?? {};

    return deleteApiScenariosScenarioIdInvestEventsId(scenarioId, id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiScenariosScenarioIdInvestEventsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiScenariosScenarioIdInvestEventsId>>
>;

export type DeleteApiScenariosScenarioIdInvestEventsIdMutationError = AxiosError<unknown>;

export const createDeleteApiScenariosScenarioIdInvestEventsId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof deleteApiScenariosScenarioIdInvestEventsId>>,
      TError,
      { scenarioId: string; id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateMutationResult<
  Awaited<ReturnType<typeof deleteApiScenariosScenarioIdInvestEventsId>>,
  TError,
  { scenarioId: string; id: string },
  TContext
> => {
  const mutationOptions = getDeleteApiScenariosScenarioIdInvestEventsIdMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
