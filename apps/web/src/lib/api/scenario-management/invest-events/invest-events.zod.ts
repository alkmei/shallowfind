/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Scenario Manager API
 * API for managing scenarios, strategies, and investments.
 * OpenAPI spec version: v1
 */
import { z as zod } from 'zod';

export const postApiScenariosScenarioIdInvestEventsParams = zod.object({
  scenarioId: zod.string()
});

export const postApiScenariosScenarioIdInvestEventsBodyNameMax = 255;
export const postApiScenariosScenarioIdInvestEventsBodyDescriptionMax = 1000;
export const postApiScenariosScenarioIdInvestEventsBodyStartTimingTypeMax = 50;

export const postApiScenariosScenarioIdInvestEventsBody = zod.object({
  name: zod.string().min(1).max(postApiScenariosScenarioIdInvestEventsBodyNameMax),
  description: zod.string().max(postApiScenariosScenarioIdInvestEventsBodyDescriptionMax).nullish(),
  startYear: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  duration: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  referenceEventSeriesId: zod.string().nullish(),
  startTimingType: zod
    .string()
    .max(postApiScenariosScenarioIdInvestEventsBodyStartTimingTypeMax)
    .nullish(),
  isActive: zod.boolean().optional(),
  orderIndex: zod.number().optional(),
  assetAllocation: zod.record(zod.string(), zod.number()),
  isGlidePath: zod.boolean().optional(),
  initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
  finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
  maximumCash: zod.number().nullish()
});

export const postApiScenariosScenarioIdInvestEventsResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
  startYear: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  duration: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  referenceEventSeriesId: zod.string().nullish(),
  startTimingType: zod.string().nullish(),
  isActive: zod.boolean().optional(),
  orderIndex: zod.number().optional(),
  initialAmount: zod.number().nullish(),
  annualChange: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  inflationAdjusted: zod.boolean().optional(),
  userPercentage: zod.number().nullish(),
  isSocialSecurity: zod.boolean().optional(),
  isDiscretionary: zod.boolean().optional(),
  assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
  isGlidePath: zod.boolean().optional(),
  initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
  finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
  maximumCash: zod.number().nullish(),
  targetTaxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional()
});

export const getApiScenariosScenarioIdInvestEventsParams = zod.object({
  scenarioId: zod.string()
});

export const getApiScenariosScenarioIdInvestEventsResponseItem = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
  startYear: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  duration: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  referenceEventSeriesId: zod.string().nullish(),
  startTimingType: zod.string().nullish(),
  isActive: zod.boolean().optional(),
  orderIndex: zod.number().optional(),
  initialAmount: zod.number().nullish(),
  annualChange: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  inflationAdjusted: zod.boolean().optional(),
  userPercentage: zod.number().nullish(),
  isSocialSecurity: zod.boolean().optional(),
  isDiscretionary: zod.boolean().optional(),
  assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
  isGlidePath: zod.boolean().optional(),
  initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
  finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
  maximumCash: zod.number().nullish(),
  targetTaxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional()
});
export const getApiScenariosScenarioIdInvestEventsResponse = zod.array(
  getApiScenariosScenarioIdInvestEventsResponseItem
);

export const getApiScenariosScenarioIdInvestEventsIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});

export const getApiScenariosScenarioIdInvestEventsIdResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
  startYear: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  duration: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  referenceEventSeriesId: zod.string().nullish(),
  startTimingType: zod.string().nullish(),
  isActive: zod.boolean().optional(),
  orderIndex: zod.number().optional(),
  initialAmount: zod.number().nullish(),
  annualChange: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  inflationAdjusted: zod.boolean().optional(),
  userPercentage: zod.number().nullish(),
  isSocialSecurity: zod.boolean().optional(),
  isDiscretionary: zod.boolean().optional(),
  assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
  isGlidePath: zod.boolean().optional(),
  initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
  finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
  maximumCash: zod.number().nullish(),
  targetTaxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional()
});

export const putApiScenariosScenarioIdInvestEventsIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});

export const putApiScenariosScenarioIdInvestEventsIdBodyNameMax = 255;
export const putApiScenariosScenarioIdInvestEventsIdBodyDescriptionMax = 1000;
export const putApiScenariosScenarioIdInvestEventsIdBodyStartTimingTypeMax = 50;

export const putApiScenariosScenarioIdInvestEventsIdBody = zod.object({
  name: zod.string().min(1).max(putApiScenariosScenarioIdInvestEventsIdBodyNameMax),
  description: zod
    .string()
    .max(putApiScenariosScenarioIdInvestEventsIdBodyDescriptionMax)
    .nullish(),
  startYear: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  duration: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  referenceEventSeriesId: zod.string().nullish(),
  startTimingType: zod
    .string()
    .max(putApiScenariosScenarioIdInvestEventsIdBodyStartTimingTypeMax)
    .nullish(),
  isActive: zod.boolean().optional(),
  orderIndex: zod.number().optional(),
  assetAllocation: zod.record(zod.string(), zod.number()),
  isGlidePath: zod.boolean().optional(),
  initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
  finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
  maximumCash: zod.number().nullish()
});

export const putApiScenariosScenarioIdInvestEventsIdResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
  startYear: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  duration: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  referenceEventSeriesId: zod.string().nullish(),
  startTimingType: zod.string().nullish(),
  isActive: zod.boolean().optional(),
  orderIndex: zod.number().optional(),
  initialAmount: zod.number().nullish(),
  annualChange: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  inflationAdjusted: zod.boolean().optional(),
  userPercentage: zod.number().nullish(),
  isSocialSecurity: zod.boolean().optional(),
  isDiscretionary: zod.boolean().optional(),
  assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
  isGlidePath: zod.boolean().optional(),
  initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
  finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
  maximumCash: zod.number().nullish(),
  targetTaxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional()
});

export const deleteApiScenariosScenarioIdInvestEventsIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});
