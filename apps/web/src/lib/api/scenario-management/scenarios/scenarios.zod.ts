/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Scenario Manager API
 * API for managing scenarios, strategies, and investments.
 * OpenAPI spec version: v1
 */
import { z as zod } from 'zod';

export const postApiScenariosBodyNameMax = 255;

export const postApiScenariosBody = zod.object({
  name: zod.string().min(1).max(postApiScenariosBodyNameMax),
  description: zod.string().nullish(),
  scenarioType: zod.enum(['Individual', 'MarriedCouple'])
});

export const postApiScenariosResponse = zod.object({
  id: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  ownerId: zod.string().nullable(),
  scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
  status: zod.enum(['Draft', 'Complete']).optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional(),
  userBirthYear: zod.number().nullish(),
  spouseBirthYear: zod.number().nullish(),
  userLifeExpectancy: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  spouseLifeExpectancy: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  financialGoal: zod.number().optional(),
  stateOfResidence: zod.string().nullish(),
  inflationAssumption: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  annualRetirementContributionLimit: zod.number().optional(),
  rothOptimizerEnabled: zod.boolean().optional(),
  rothOptimizerStartYear: zod.number().nullish(),
  rothOptimizerEndYear: zod.number().nullish(),
  importSource: zod.string().nullish(),
  exportCount: zod.number().optional(),
  lastSimulationRun: zod.string().datetime({}).nullish()
});

export const getApiScenariosResponseItem = zod.object({
  id: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  ownerId: zod.string().nullable(),
  scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
  status: zod.enum(['Draft', 'Complete']).optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional(),
  userBirthYear: zod.number().nullish(),
  spouseBirthYear: zod.number().nullish(),
  userLifeExpectancy: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  spouseLifeExpectancy: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  financialGoal: zod.number().optional(),
  stateOfResidence: zod.string().nullish(),
  inflationAssumption: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  annualRetirementContributionLimit: zod.number().optional(),
  rothOptimizerEnabled: zod.boolean().optional(),
  rothOptimizerStartYear: zod.number().nullish(),
  rothOptimizerEndYear: zod.number().nullish(),
  importSource: zod.string().nullish(),
  exportCount: zod.number().optional(),
  lastSimulationRun: zod.string().datetime({}).nullish()
});
export const getApiScenariosResponse = zod.array(getApiScenariosResponseItem);

export const getApiScenariosIdParams = zod.object({
  id: zod.string()
});

export const getApiScenariosIdResponse = zod.object({
  id: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  ownerId: zod.string().nullable(),
  scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
  status: zod.enum(['Draft', 'Complete']).optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional(),
  userBirthYear: zod.number().nullish(),
  spouseBirthYear: zod.number().nullish(),
  userLifeExpectancy: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  spouseLifeExpectancy: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  financialGoal: zod.number().optional(),
  stateOfResidence: zod.string().nullish(),
  inflationAssumption: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  annualRetirementContributionLimit: zod.number().optional(),
  rothOptimizerEnabled: zod.boolean().optional(),
  rothOptimizerStartYear: zod.number().nullish(),
  rothOptimizerEndYear: zod.number().nullish(),
  importSource: zod.string().nullish(),
  exportCount: zod.number().optional(),
  lastSimulationRun: zod.string().datetime({}).nullish()
});

export const putApiScenariosIdParams = zod.object({
  id: zod.string()
});

export const putApiScenariosIdBodyNameMax = 255;
export const putApiScenariosIdBodyStateOfResidenceMax = 100;

export const putApiScenariosIdBody = zod.object({
  name: zod.string().max(putApiScenariosIdBodyNameMax).nullish(),
  description: zod.string().nullish(),
  scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
  userBirthYear: zod.number().nullish(),
  spouseBirthYear: zod.number().nullish(),
  userLifeExpectancy: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  spouseLifeExpectancy: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  financialGoal: zod.number().nullish(),
  stateOfResidence: zod.string().max(putApiScenariosIdBodyStateOfResidenceMax).nullish(),
  inflationAssumption: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  annualRetirementContributionLimit: zod.number().nullish(),
  rothOptimizerEnabled: zod.boolean().nullish(),
  rothOptimizerStartYear: zod.number().nullish(),
  rothOptimizerEndYear: zod.number().nullish()
});

export const putApiScenariosIdResponse = zod.object({
  id: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  ownerId: zod.string().nullable(),
  scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
  status: zod.enum(['Draft', 'Complete']).optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional(),
  userBirthYear: zod.number().nullish(),
  spouseBirthYear: zod.number().nullish(),
  userLifeExpectancy: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  spouseLifeExpectancy: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  financialGoal: zod.number().optional(),
  stateOfResidence: zod.string().nullish(),
  inflationAssumption: zod
    .object({
      type: zod.string().nullable(),
      value: zod.number().nullish(),
      mean: zod.number().nullish(),
      stdev: zod.number().nullish(),
      lower: zod.number().nullish(),
      upper: zod.number().nullish()
    })
    .optional(),
  annualRetirementContributionLimit: zod.number().optional(),
  rothOptimizerEnabled: zod.boolean().optional(),
  rothOptimizerStartYear: zod.number().nullish(),
  rothOptimizerEndYear: zod.number().nullish(),
  importSource: zod.string().nullish(),
  exportCount: zod.number().optional(),
  lastSimulationRun: zod.string().datetime({}).nullish()
});

export const deleteApiScenariosIdParams = zod.object({
  id: zod.string()
});
