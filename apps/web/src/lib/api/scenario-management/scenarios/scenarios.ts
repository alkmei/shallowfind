/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * ScenarioManager.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import { createMutation, createQuery } from '@tanstack/svelte-query';
import type {
  CreateMutationOptions,
  CreateMutationResult,
  CreateQueryOptions,
  CreateQueryResult,
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey
} from '@tanstack/svelte-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  CreateScenarioRequest,
  ScenarioResponse,
  UpdateScenarioRequest
} from '../scenarioManagerApiVersion1000CultureNeutralPublicKeyTokenNull.schemas';

export const postApiScenarios = (
  createScenarioRequest: CreateScenarioRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ScenarioResponse>> => {
  return axios.post(`/api/scenarios`, createScenarioRequest, options);
};

export const getPostApiScenariosMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof postApiScenarios>>,
    TError,
    { data: CreateScenarioRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof postApiScenarios>>,
  TError,
  { data: CreateScenarioRequest },
  TContext
> => {
  const mutationKey = ['postApiScenarios'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiScenarios>>,
    { data: CreateScenarioRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiScenarios(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiScenariosMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiScenarios>>
>;
export type PostApiScenariosMutationBody = CreateScenarioRequest;
export type PostApiScenariosMutationError = AxiosError<unknown>;

export const createPostApiScenarios = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof postApiScenarios>>,
      TError,
      { data: CreateScenarioRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateMutationResult<
  Awaited<ReturnType<typeof postApiScenarios>>,
  TError,
  { data: CreateScenarioRequest },
  TContext
> => {
  const mutationOptions = getPostApiScenariosMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
export const getApiScenarios = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ScenarioResponse[]>> => {
  return axios.get(`/api/scenarios`, options);
};

export const getGetApiScenariosQueryKey = () => {
  return [`/api/scenarios`] as const;
};

export const getGetApiScenariosQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiScenarios>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof getApiScenarios>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiScenariosQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiScenarios>>> = ({ signal }) =>
    getApiScenarios({ signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    useQuery: true,
    staleTime: 300000,
    ...queryOptions
  } as CreateQueryOptions<Awaited<ReturnType<typeof getApiScenarios>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetApiScenariosQueryResult = NonNullable<Awaited<ReturnType<typeof getApiScenarios>>>;
export type GetApiScenariosQueryError = AxiosError<unknown>;

export function createGetApiScenarios<
  TData = Awaited<ReturnType<typeof getApiScenarios>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof getApiScenarios>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiScenariosQueryOptions(options);

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiScenariosId = (
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ScenarioResponse>> => {
  return axios.get(`/api/scenarios/${id}`, options);
};

export const getGetApiScenariosIdQueryKey = (id?: string) => {
  return [`/api/scenarios/${id}`] as const;
};

export const getGetApiScenariosIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiScenariosId>>,
  TError = AxiosError<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<Awaited<ReturnType<typeof getApiScenariosId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiScenariosIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiScenariosId>>> = ({ signal }) =>
    getApiScenariosId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    useQuery: true,
    staleTime: 300000,
    ...queryOptions
  } as CreateQueryOptions<Awaited<ReturnType<typeof getApiScenariosId>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetApiScenariosIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiScenariosId>>
>;
export type GetApiScenariosIdQueryError = AxiosError<unknown>;

export function createGetApiScenariosId<
  TData = Awaited<ReturnType<typeof getApiScenariosId>>,
  TError = AxiosError<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<Awaited<ReturnType<typeof getApiScenariosId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiScenariosIdQueryOptions(id, options);

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiScenariosId = (
  id: string,
  updateScenarioRequest: UpdateScenarioRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ScenarioResponse>> => {
  return axios.put(`/api/scenarios/${id}`, updateScenarioRequest, options);
};

export const getPutApiScenariosIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof putApiScenariosId>>,
    TError,
    { id: string; data: UpdateScenarioRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof putApiScenariosId>>,
  TError,
  { id: string; data: UpdateScenarioRequest },
  TContext
> => {
  const mutationKey = ['putApiScenariosId'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiScenariosId>>,
    { id: string; data: UpdateScenarioRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiScenariosId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiScenariosIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiScenariosId>>
>;
export type PutApiScenariosIdMutationBody = UpdateScenarioRequest;
export type PutApiScenariosIdMutationError = AxiosError<unknown>;

export const createPutApiScenariosId = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof putApiScenariosId>>,
      TError,
      { id: string; data: UpdateScenarioRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateMutationResult<
  Awaited<ReturnType<typeof putApiScenariosId>>,
  TError,
  { id: string; data: UpdateScenarioRequest },
  TContext
> => {
  const mutationOptions = getPutApiScenariosIdMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
export const deleteApiScenariosId = (
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<null>> => {
  return axios.delete(`/api/scenarios/${id}`, options);
};

export const getDeleteApiScenariosIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof deleteApiScenariosId>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof deleteApiScenariosId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteApiScenariosId'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiScenariosId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiScenariosId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiScenariosIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiScenariosId>>
>;

export type DeleteApiScenariosIdMutationError = AxiosError<unknown>;

export const createDeleteApiScenariosId = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof deleteApiScenariosId>>,
      TError,
      { id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateMutationResult<
  Awaited<ReturnType<typeof deleteApiScenariosId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteApiScenariosIdMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
