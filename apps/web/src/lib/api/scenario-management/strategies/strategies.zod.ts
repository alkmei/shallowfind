/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * ScenarioManager.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import { z as zod } from 'zod';

export const postApiScenariosScenarioIdStrategiesParams = zod.object({
  scenarioId: zod.string()
});

export const postApiScenariosScenarioIdStrategiesBodyNameMax = 255;
export const postApiScenariosScenarioIdStrategiesBodyDescriptionMax = 1000;

export const postApiScenariosScenarioIdStrategiesBody = zod.object({
  scenarioId: zod.string().min(1),
  strategyType: zod.enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion']).optional(),
  name: zod.string().min(1).max(postApiScenariosScenarioIdStrategiesBodyNameMax),
  description: zod.string().max(postApiScenariosScenarioIdStrategiesBodyDescriptionMax).nullish(),
  isActive: zod.boolean().optional(),
  ordering: zod.array(zod.string()).nullish()
});

export const postApiScenariosScenarioIdStrategiesResponseNameMax = 255;
export const postApiScenariosScenarioIdStrategiesResponseDescriptionMax = 1000;

export const postApiScenariosScenarioIdStrategiesResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().min(1),
  strategyType: zod.enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion']).optional(),
  name: zod.string().min(1).max(postApiScenariosScenarioIdStrategiesResponseNameMax),
  description: zod
    .string()
    .max(postApiScenariosScenarioIdStrategiesResponseDescriptionMax)
    .nullish(),
  isActive: zod.boolean().optional(),
  ordering: zod.array(zod.string()).nullish()
});

export const getApiScenariosScenarioIdStrategiesParams = zod.object({
  scenarioId: zod.string()
});

export const getApiScenariosScenarioIdStrategiesResponseNameMax = 255;
export const getApiScenariosScenarioIdStrategiesResponseDescriptionMax = 1000;

export const getApiScenariosScenarioIdStrategiesResponseItem = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().min(1),
  strategyType: zod.enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion']).optional(),
  name: zod.string().min(1).max(getApiScenariosScenarioIdStrategiesResponseNameMax),
  description: zod
    .string()
    .max(getApiScenariosScenarioIdStrategiesResponseDescriptionMax)
    .nullish(),
  isActive: zod.boolean().optional(),
  ordering: zod.array(zod.string()).nullish()
});
export const getApiScenariosScenarioIdStrategiesResponse = zod.array(
  getApiScenariosScenarioIdStrategiesResponseItem
);

export const getApiScenariosScenarioIdStrategiesIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});

export const getApiScenariosScenarioIdStrategiesIdResponseNameMax = 255;
export const getApiScenariosScenarioIdStrategiesIdResponseDescriptionMax = 1000;

export const getApiScenariosScenarioIdStrategiesIdResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().min(1),
  strategyType: zod.enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion']).optional(),
  name: zod.string().min(1).max(getApiScenariosScenarioIdStrategiesIdResponseNameMax),
  description: zod
    .string()
    .max(getApiScenariosScenarioIdStrategiesIdResponseDescriptionMax)
    .nullish(),
  isActive: zod.boolean().optional(),
  ordering: zod.array(zod.string()).nullish()
});

export const putApiScenariosScenarioIdStrategiesIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});

export const putApiScenariosScenarioIdStrategiesIdBodyNameMax = 255;
export const putApiScenariosScenarioIdStrategiesIdBodyDescriptionMax = 1000;

export const putApiScenariosScenarioIdStrategiesIdBody = zod.object({
  scenarioId: zod.string().min(1),
  strategyType: zod.enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion']).optional(),
  name: zod.string().min(1).max(putApiScenariosScenarioIdStrategiesIdBodyNameMax),
  description: zod.string().max(putApiScenariosScenarioIdStrategiesIdBodyDescriptionMax).nullish(),
  isActive: zod.boolean().optional(),
  ordering: zod.array(zod.string()).nullish()
});

export const putApiScenariosScenarioIdStrategiesIdResponseNameMax = 255;
export const putApiScenariosScenarioIdStrategiesIdResponseDescriptionMax = 1000;

export const putApiScenariosScenarioIdStrategiesIdResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().min(1),
  strategyType: zod.enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion']).optional(),
  name: zod.string().min(1).max(putApiScenariosScenarioIdStrategiesIdResponseNameMax),
  description: zod
    .string()
    .max(putApiScenariosScenarioIdStrategiesIdResponseDescriptionMax)
    .nullish(),
  isActive: zod.boolean().optional(),
  ordering: zod.array(zod.string()).nullish()
});

export const deleteApiScenariosScenarioIdStrategiesIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});
