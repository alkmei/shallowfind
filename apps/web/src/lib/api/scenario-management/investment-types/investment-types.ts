/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * ScenarioManager.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import { createMutation, createQuery } from '@tanstack/svelte-query';
import type {
  CreateMutationOptions,
  CreateMutationResult,
  CreateQueryOptions,
  CreateQueryResult,
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey
} from '@tanstack/svelte-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  CreateInvestmentTypeRequest,
  InvestmentTypeResponse
} from '../scenarioManagerApiVersion1000CultureNeutralPublicKeyTokenNull.schemas';

export const postApiScenariosScenarioIdInvestmentTypes = (
  scenarioId: string,
  createInvestmentTypeRequest: CreateInvestmentTypeRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<InvestmentTypeResponse>> => {
  return axios.post(
    `/api/scenarios/${scenarioId}/investment-types`,
    createInvestmentTypeRequest,
    options
  );
};

export const getPostApiScenariosScenarioIdInvestmentTypesMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof postApiScenariosScenarioIdInvestmentTypes>>,
    TError,
    { scenarioId: string; data: CreateInvestmentTypeRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof postApiScenariosScenarioIdInvestmentTypes>>,
  TError,
  { scenarioId: string; data: CreateInvestmentTypeRequest },
  TContext
> => {
  const mutationKey = ['postApiScenariosScenarioIdInvestmentTypes'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiScenariosScenarioIdInvestmentTypes>>,
    { scenarioId: string; data: CreateInvestmentTypeRequest }
  > = (props) => {
    const { scenarioId, data } = props ?? {};

    return postApiScenariosScenarioIdInvestmentTypes(scenarioId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiScenariosScenarioIdInvestmentTypesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiScenariosScenarioIdInvestmentTypes>>
>;
export type PostApiScenariosScenarioIdInvestmentTypesMutationBody = CreateInvestmentTypeRequest;
export type PostApiScenariosScenarioIdInvestmentTypesMutationError = AxiosError<unknown>;

export const createPostApiScenariosScenarioIdInvestmentTypes = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof postApiScenariosScenarioIdInvestmentTypes>>,
      TError,
      { scenarioId: string; data: CreateInvestmentTypeRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateMutationResult<
  Awaited<ReturnType<typeof postApiScenariosScenarioIdInvestmentTypes>>,
  TError,
  { scenarioId: string; data: CreateInvestmentTypeRequest },
  TContext
> => {
  const mutationOptions = getPostApiScenariosScenarioIdInvestmentTypesMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
export const getApiScenariosScenarioIdInvestmentTypes = (
  scenarioId: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<InvestmentTypeResponse[]>> => {
  return axios.get(`/api/scenarios/${scenarioId}/investment-types`, options);
};

export const getGetApiScenariosScenarioIdInvestmentTypesQueryKey = (scenarioId?: string) => {
  return [`/api/scenarios/${scenarioId}/investment-types`] as const;
};

export const getGetApiScenariosScenarioIdInvestmentTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentTypes>>,
  TError = AxiosError<unknown>
>(
  scenarioId: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentTypes>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiScenariosScenarioIdInvestmentTypesQueryKey(scenarioId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentTypes>>
  > = ({ signal }) =>
    getApiScenariosScenarioIdInvestmentTypes(scenarioId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!scenarioId,
    useQuery: true,
    staleTime: 300000,
    ...queryOptions
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentTypes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiScenariosScenarioIdInvestmentTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentTypes>>
>;
export type GetApiScenariosScenarioIdInvestmentTypesQueryError = AxiosError<unknown>;

export function createGetApiScenariosScenarioIdInvestmentTypes<
  TData = Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentTypes>>,
  TError = AxiosError<unknown>
>(
  scenarioId: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentTypes>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiScenariosScenarioIdInvestmentTypesQueryOptions(scenarioId, options);

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiScenariosScenarioIdInvestmentTypesId = (
  scenarioId: string,
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<InvestmentTypeResponse>> => {
  return axios.get(`/api/scenarios/${scenarioId}/investment-types/${id}`, options);
};

export const getGetApiScenariosScenarioIdInvestmentTypesIdQueryKey = (
  scenarioId?: string,
  id?: string
) => {
  return [`/api/scenarios/${scenarioId}/investment-types/${id}`] as const;
};

export const getGetApiScenariosScenarioIdInvestmentTypesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentTypesId>>,
  TError = AxiosError<unknown>
>(
  scenarioId: string,
  id: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentTypesId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiScenariosScenarioIdInvestmentTypesIdQueryKey(scenarioId, id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentTypesId>>
  > = ({ signal }) =>
    getApiScenariosScenarioIdInvestmentTypesId(scenarioId, id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(scenarioId && id),
    useQuery: true,
    staleTime: 300000,
    ...queryOptions
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentTypesId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiScenariosScenarioIdInvestmentTypesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentTypesId>>
>;
export type GetApiScenariosScenarioIdInvestmentTypesIdQueryError = AxiosError<unknown>;

export function createGetApiScenariosScenarioIdInvestmentTypesId<
  TData = Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentTypesId>>,
  TError = AxiosError<unknown>
>(
  scenarioId: string,
  id: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentTypesId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiScenariosScenarioIdInvestmentTypesIdQueryOptions(
    scenarioId,
    id,
    options
  );

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiScenariosScenarioIdInvestmentTypesId = (
  scenarioId: string,
  id: string,
  createInvestmentTypeRequest: CreateInvestmentTypeRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<InvestmentTypeResponse>> => {
  return axios.put(
    `/api/scenarios/${scenarioId}/investment-types/${id}`,
    createInvestmentTypeRequest,
    options
  );
};

export const getPutApiScenariosScenarioIdInvestmentTypesIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof putApiScenariosScenarioIdInvestmentTypesId>>,
    TError,
    { scenarioId: string; id: string; data: CreateInvestmentTypeRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof putApiScenariosScenarioIdInvestmentTypesId>>,
  TError,
  { scenarioId: string; id: string; data: CreateInvestmentTypeRequest },
  TContext
> => {
  const mutationKey = ['putApiScenariosScenarioIdInvestmentTypesId'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiScenariosScenarioIdInvestmentTypesId>>,
    { scenarioId: string; id: string; data: CreateInvestmentTypeRequest }
  > = (props) => {
    const { scenarioId, id, data } = props ?? {};

    return putApiScenariosScenarioIdInvestmentTypesId(scenarioId, id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiScenariosScenarioIdInvestmentTypesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiScenariosScenarioIdInvestmentTypesId>>
>;
export type PutApiScenariosScenarioIdInvestmentTypesIdMutationBody = CreateInvestmentTypeRequest;
export type PutApiScenariosScenarioIdInvestmentTypesIdMutationError = AxiosError<unknown>;

export const createPutApiScenariosScenarioIdInvestmentTypesId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof putApiScenariosScenarioIdInvestmentTypesId>>,
      TError,
      { scenarioId: string; id: string; data: CreateInvestmentTypeRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateMutationResult<
  Awaited<ReturnType<typeof putApiScenariosScenarioIdInvestmentTypesId>>,
  TError,
  { scenarioId: string; id: string; data: CreateInvestmentTypeRequest },
  TContext
> => {
  const mutationOptions = getPutApiScenariosScenarioIdInvestmentTypesIdMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
export const deleteApiScenariosScenarioIdInvestmentTypesId = (
  scenarioId: string,
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<null>> => {
  return axios.delete(`/api/scenarios/${scenarioId}/investment-types/${id}`, options);
};

export const getDeleteApiScenariosScenarioIdInvestmentTypesIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof deleteApiScenariosScenarioIdInvestmentTypesId>>,
    TError,
    { scenarioId: string; id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof deleteApiScenariosScenarioIdInvestmentTypesId>>,
  TError,
  { scenarioId: string; id: string },
  TContext
> => {
  const mutationKey = ['deleteApiScenariosScenarioIdInvestmentTypesId'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiScenariosScenarioIdInvestmentTypesId>>,
    { scenarioId: string; id: string }
  > = (props) => {
    const { scenarioId, id } = props ?? {};

    return deleteApiScenariosScenarioIdInvestmentTypesId(scenarioId, id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiScenariosScenarioIdInvestmentTypesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiScenariosScenarioIdInvestmentTypesId>>
>;

export type DeleteApiScenariosScenarioIdInvestmentTypesIdMutationError = AxiosError<unknown>;

export const createDeleteApiScenariosScenarioIdInvestmentTypesId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof deleteApiScenariosScenarioIdInvestmentTypesId>>,
      TError,
      { scenarioId: string; id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateMutationResult<
  Awaited<ReturnType<typeof deleteApiScenariosScenarioIdInvestmentTypesId>>,
  TError,
  { scenarioId: string; id: string },
  TContext
> => {
  const mutationOptions = getDeleteApiScenariosScenarioIdInvestmentTypesIdMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
