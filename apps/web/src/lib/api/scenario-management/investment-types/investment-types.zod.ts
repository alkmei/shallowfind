/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * ScenarioManager.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import { z as zod } from 'zod';

export const postApiScenariosScenarioIdInvestmentTypesParams = zod.object({
  scenarioId: zod.string()
});

export const postApiScenariosScenarioIdInvestmentTypesBodyNameMax = 255;
export const postApiScenariosScenarioIdInvestmentTypesBodyDescriptionMax = 1000;

export const postApiScenariosScenarioIdInvestmentTypesBody = zod.object({
  name: zod.string().min(1).max(postApiScenariosScenarioIdInvestmentTypesBodyNameMax),
  description: zod
    .string()
    .max(postApiScenariosScenarioIdInvestmentTypesBodyDescriptionMax)
    .nullish(),
  expectedAnnualReturn: zod.object({
    type: zod.string().nullable(),
    value: zod.number().nullish(),
    mean: zod.number().nullish(),
    stdev: zod.number().nullish(),
    lower: zod.number().nullish(),
    upper: zod.number().nullish()
  }),
  expenseRatio: zod.number().optional(),
  expectedAnnualIncome: zod.object({
    type: zod.string().nullable(),
    value: zod.number().nullish(),
    mean: zod.number().nullish(),
    stdev: zod.number().nullish(),
    lower: zod.number().nullish(),
    upper: zod.number().nullish()
  }),
  taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
  isCash: zod.boolean().optional()
});

export const postApiScenariosScenarioIdInvestmentTypesResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  expectedAnnualReturn: zod.object({
    type: zod.string().nullable(),
    value: zod.number().nullish(),
    mean: zod.number().nullish(),
    stdev: zod.number().nullish(),
    lower: zod.number().nullish(),
    upper: zod.number().nullish()
  }),
  expenseRatio: zod.number().optional(),
  expectedAnnualIncome: zod.object({
    type: zod.string().nullable(),
    value: zod.number().nullish(),
    mean: zod.number().nullish(),
    stdev: zod.number().nullish(),
    lower: zod.number().nullish(),
    upper: zod.number().nullish()
  }),
  taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
  isCash: zod.boolean().optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional()
});

export const getApiScenariosScenarioIdInvestmentTypesParams = zod.object({
  scenarioId: zod.string()
});

export const getApiScenariosScenarioIdInvestmentTypesResponseItem = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  expectedAnnualReturn: zod.object({
    type: zod.string().nullable(),
    value: zod.number().nullish(),
    mean: zod.number().nullish(),
    stdev: zod.number().nullish(),
    lower: zod.number().nullish(),
    upper: zod.number().nullish()
  }),
  expenseRatio: zod.number().optional(),
  expectedAnnualIncome: zod.object({
    type: zod.string().nullable(),
    value: zod.number().nullish(),
    mean: zod.number().nullish(),
    stdev: zod.number().nullish(),
    lower: zod.number().nullish(),
    upper: zod.number().nullish()
  }),
  taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
  isCash: zod.boolean().optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional()
});
export const getApiScenariosScenarioIdInvestmentTypesResponse = zod.array(
  getApiScenariosScenarioIdInvestmentTypesResponseItem
);

export const getApiScenariosScenarioIdInvestmentTypesIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});

export const getApiScenariosScenarioIdInvestmentTypesIdResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  expectedAnnualReturn: zod.object({
    type: zod.string().nullable(),
    value: zod.number().nullish(),
    mean: zod.number().nullish(),
    stdev: zod.number().nullish(),
    lower: zod.number().nullish(),
    upper: zod.number().nullish()
  }),
  expenseRatio: zod.number().optional(),
  expectedAnnualIncome: zod.object({
    type: zod.string().nullable(),
    value: zod.number().nullish(),
    mean: zod.number().nullish(),
    stdev: zod.number().nullish(),
    lower: zod.number().nullish(),
    upper: zod.number().nullish()
  }),
  taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
  isCash: zod.boolean().optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional()
});

export const putApiScenariosScenarioIdInvestmentTypesIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});

export const putApiScenariosScenarioIdInvestmentTypesIdBodyNameMax = 255;
export const putApiScenariosScenarioIdInvestmentTypesIdBodyDescriptionMax = 1000;

export const putApiScenariosScenarioIdInvestmentTypesIdBody = zod.object({
  name: zod.string().min(1).max(putApiScenariosScenarioIdInvestmentTypesIdBodyNameMax),
  description: zod
    .string()
    .max(putApiScenariosScenarioIdInvestmentTypesIdBodyDescriptionMax)
    .nullish(),
  expectedAnnualReturn: zod.object({
    type: zod.string().nullable(),
    value: zod.number().nullish(),
    mean: zod.number().nullish(),
    stdev: zod.number().nullish(),
    lower: zod.number().nullish(),
    upper: zod.number().nullish()
  }),
  expenseRatio: zod.number().optional(),
  expectedAnnualIncome: zod.object({
    type: zod.string().nullable(),
    value: zod.number().nullish(),
    mean: zod.number().nullish(),
    stdev: zod.number().nullish(),
    lower: zod.number().nullish(),
    upper: zod.number().nullish()
  }),
  taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
  isCash: zod.boolean().optional()
});

export const putApiScenariosScenarioIdInvestmentTypesIdResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().nullable(),
  name: zod.string().nullable(),
  description: zod.string().nullish(),
  expectedAnnualReturn: zod.object({
    type: zod.string().nullable(),
    value: zod.number().nullish(),
    mean: zod.number().nullish(),
    stdev: zod.number().nullish(),
    lower: zod.number().nullish(),
    upper: zod.number().nullish()
  }),
  expenseRatio: zod.number().optional(),
  expectedAnnualIncome: zod.object({
    type: zod.string().nullable(),
    value: zod.number().nullish(),
    mean: zod.number().nullish(),
    stdev: zod.number().nullish(),
    lower: zod.number().nullish(),
    upper: zod.number().nullish()
  }),
  taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
  isCash: zod.boolean().optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional()
});

export const deleteApiScenariosScenarioIdInvestmentTypesIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});
