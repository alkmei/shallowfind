/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * ScenarioManager.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import { z as zod } from 'zod';

export const postApiScenariosScenarioIdInvestmentsParams = zod.object({
  scenarioId: zod.string()
});

export const postApiScenariosScenarioIdInvestmentsBodyNameMax = 255;

export const postApiScenariosScenarioIdInvestmentsBody = zod.object({
  investmentTypeId: zod.string().min(1),
  name: zod.string().min(1).max(postApiScenariosScenarioIdInvestmentsBodyNameMax),
  currentValue: zod.number().optional(),
  taxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  costBasis: zod.number().optional(),
  orderIndex: zod.number().optional()
});

export const postApiScenariosScenarioIdInvestmentsResponseNameMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseScenarioNameMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseScenarioStateOfResidenceMax = 100;
export const postApiScenariosScenarioIdInvestmentsResponseScenarioImportSourceMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentTypesItemNameMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentTypesItemDescriptionMax = 1000;
export const postApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentTypesItemInvestmentsItemNameMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentsItemNameMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentsItemInvestmentTypeNameMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentsItemInvestmentTypeDescriptionMax = 1000;
export const postApiScenariosScenarioIdInvestmentsResponseScenarioEventSeriesItemNameMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseScenarioEventSeriesItemDescriptionMax = 1000;
export const postApiScenariosScenarioIdInvestmentsResponseScenarioEventSeriesItemStartTimingTypeMax = 50;
export const postApiScenariosScenarioIdInvestmentsResponseScenarioStrategiesItemNameMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseScenarioStrategiesItemDescriptionMax = 1000;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeNameMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeDescriptionMax = 1000;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioNameMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioStateOfResidenceMax = 100;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioImportSourceMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioInvestmentsItemNameMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioEventSeriesItemNameMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioEventSeriesItemDescriptionMax = 1000;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioEventSeriesItemStartTimingTypeMax = 50;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioStrategiesItemNameMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioStrategiesItemDescriptionMax = 1000;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemNameMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioNameMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioStateOfResidenceMax = 100;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioImportSourceMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemNameMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemDescriptionMax = 1000;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemStartTimingTypeMax = 50;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemNameMax = 255;
export const postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemDescriptionMax = 1000;

export const postApiScenariosScenarioIdInvestmentsResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().min(1),
  investmentTypeId: zod.string().min(1),
  name: zod.string().min(1).max(postApiScenariosScenarioIdInvestmentsResponseNameMax),
  currentValue: zod.number().optional(),
  taxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  costBasis: zod.number().optional(),
  orderIndex: zod.number().optional(),
  scenario: zod
    .object({
      id: zod.string().nullish(),
      createdAt: zod.string().datetime({}).optional(),
      updatedAt: zod.string().datetime({}).optional(),
      name: zod.string().min(1).max(postApiScenariosScenarioIdInvestmentsResponseScenarioNameMax),
      description: zod.string().nullish(),
      ownerId: zod.string().min(1),
      scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
      status: zod.enum(['Draft', 'Complete']).optional(),
      userBirthYear: zod.number().nullish(),
      spouseBirthYear: zod.number().nullish(),
      userLifeExpectancy: zod
        .object({
          type: zod.string().nullable(),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .optional(),
      spouseLifeExpectancy: zod
        .object({
          type: zod.string().nullable(),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .optional(),
      financialGoal: zod.number().optional(),
      stateOfResidence: zod
        .string()
        .max(postApiScenariosScenarioIdInvestmentsResponseScenarioStateOfResidenceMax)
        .nullish(),
      inflationAssumption: zod
        .object({
          type: zod.string().nullable(),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .optional(),
      annualRetirementContributionLimit: zod.number().optional(),
      rothOptimizerEnabled: zod.boolean().optional(),
      rothOptimizerStartYear: zod.number().nullish(),
      rothOptimizerEndYear: zod.number().nullish(),
      importSource: zod
        .string()
        .max(postApiScenariosScenarioIdInvestmentsResponseScenarioImportSourceMax)
        .nullish(),
      exportCount: zod.number().optional(),
      lastSimulationRun: zod.string().datetime({}).nullish(),
      investmentTypes: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(postApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentTypesItemNameMax),
            description: zod
              .string()
              .max(
                postApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentTypesItemDescriptionMax
              )
              .nullish(),
            expectedAnnualReturn: zod.object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            }),
            expenseRatio: zod.number().optional(),
            expectedAnnualIncome: zod.object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            }),
            taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
            isCash: zod.boolean().optional(),
            scenario: zod.any().optional(),
            investments: zod
              .array(
                zod.object({
                  id: zod.string().nullish(),
                  createdAt: zod.string().datetime({}).optional(),
                  updatedAt: zod.string().datetime({}).optional(),
                  scenarioId: zod.string().min(1),
                  investmentTypeId: zod.string().min(1),
                  name: zod
                    .string()
                    .min(1)
                    .max(
                      postApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentTypesItemInvestmentsItemNameMax
                    ),
                  currentValue: zod.number().optional(),
                  taxStatus: zod
                    .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                    .optional(),
                  costBasis: zod.number().optional(),
                  orderIndex: zod.number().optional(),
                  scenario: zod.any().optional(),
                  investmentType: zod.any().optional()
                })
              )
              .nullish()
          })
        )
        .nullish(),
      investments: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            investmentTypeId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(postApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentsItemNameMax),
            currentValue: zod.number().optional(),
            taxStatus: zod
              .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
              .optional(),
            costBasis: zod.number().optional(),
            orderIndex: zod.number().optional(),
            scenario: zod.any().optional(),
            investmentType: zod
              .object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    postApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentsItemInvestmentTypeNameMax
                  ),
                description: zod
                  .string()
                  .max(
                    postApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentsItemInvestmentTypeDescriptionMax
                  )
                  .nullish(),
                expectedAnnualReturn: zod.object({
                  type: zod.string().nullable(),
                  value: zod.number().nullish(),
                  mean: zod.number().nullish(),
                  stdev: zod.number().nullish(),
                  lower: zod.number().nullish(),
                  upper: zod.number().nullish()
                }),
                expenseRatio: zod.number().optional(),
                expectedAnnualIncome: zod.object({
                  type: zod.string().nullable(),
                  value: zod.number().nullish(),
                  mean: zod.number().nullish(),
                  stdev: zod.number().nullish(),
                  lower: zod.number().nullish(),
                  upper: zod.number().nullish()
                }),
                taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
                isCash: zod.boolean().optional(),
                scenario: zod.any().optional(),
                investments: zod.array(zod.any()).nullish()
              })
              .optional()
          })
        )
        .nullish(),
      eventSeries: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(postApiScenariosScenarioIdInvestmentsResponseScenarioEventSeriesItemNameMax),
            description: zod
              .string()
              .max(
                postApiScenariosScenarioIdInvestmentsResponseScenarioEventSeriesItemDescriptionMax
              )
              .nullish(),
            eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
            startYear: zod
              .object({
                type: zod.string().nullable(),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .optional(),
            duration: zod
              .object({
                type: zod.string().nullable(),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .optional(),
            referenceEventSeriesId: zod.string().nullish(),
            startTimingType: zod
              .string()
              .max(
                postApiScenariosScenarioIdInvestmentsResponseScenarioEventSeriesItemStartTimingTypeMax
              )
              .nullish(),
            isActive: zod.boolean().optional(),
            orderIndex: zod.number().optional(),
            initialAmount: zod.number().nullish(),
            annualChange: zod
              .object({
                type: zod.string().nullable(),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .optional(),
            inflationAdjusted: zod.boolean().optional(),
            userPercentage: zod.number().nullish(),
            isSocialSecurity: zod.boolean().optional(),
            isDiscretionary: zod.boolean().optional(),
            assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
            isGlidePath: zod.boolean().optional(),
            initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
            finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
            maximumCash: zod.number().nullish(),
            targetTaxStatus: zod
              .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
              .optional(),
            scenario: zod.any().optional(),
            referenceEventSeries: zod.any().optional(),
            referencingEventSeries: zod.array(zod.any()).nullish()
          })
        )
        .nullish(),
      strategies: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            strategyType: zod
              .enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion'])
              .optional(),
            name: zod
              .string()
              .min(1)
              .max(postApiScenariosScenarioIdInvestmentsResponseScenarioStrategiesItemNameMax),
            description: zod
              .string()
              .max(
                postApiScenariosScenarioIdInvestmentsResponseScenarioStrategiesItemDescriptionMax
              )
              .nullish(),
            isActive: zod.boolean().optional(),
            ordering: zod.array(zod.string()).nullish(),
            settings: zod.record(zod.string(), zod.any()).nullish(),
            scenario: zod.any().optional()
          })
        )
        .nullish(),
      scenarioShares: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            sharedWithUserId: zod.string().min(1),
            permission: zod.enum(['ReadOnly', 'ReadWrite']).optional(),
            sharedByUserId: zod.string().min(1),
            isActive: zod.boolean().optional(),
            scenario: zod.any().optional()
          })
        )
        .nullish()
    })
    .optional(),
  investmentType: zod
    .object({
      id: zod.string().nullish(),
      createdAt: zod.string().datetime({}).optional(),
      updatedAt: zod.string().datetime({}).optional(),
      scenarioId: zod.string().min(1),
      name: zod
        .string()
        .min(1)
        .max(postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeNameMax),
      description: zod
        .string()
        .max(postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeDescriptionMax)
        .nullish(),
      expectedAnnualReturn: zod.object({
        type: zod.string().nullable(),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      }),
      expenseRatio: zod.number().optional(),
      expectedAnnualIncome: zod.object({
        type: zod.string().nullable(),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      }),
      taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
      isCash: zod.boolean().optional(),
      scenario: zod
        .object({
          id: zod.string().nullish(),
          createdAt: zod.string().datetime({}).optional(),
          updatedAt: zod.string().datetime({}).optional(),
          name: zod
            .string()
            .min(1)
            .max(postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioNameMax),
          description: zod.string().nullish(),
          ownerId: zod.string().min(1),
          scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
          status: zod.enum(['Draft', 'Complete']).optional(),
          userBirthYear: zod.number().nullish(),
          spouseBirthYear: zod.number().nullish(),
          userLifeExpectancy: zod
            .object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional(),
          spouseLifeExpectancy: zod
            .object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional(),
          financialGoal: zod.number().optional(),
          stateOfResidence: zod
            .string()
            .max(
              postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioStateOfResidenceMax
            )
            .nullish(),
          inflationAssumption: zod
            .object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional(),
          annualRetirementContributionLimit: zod.number().optional(),
          rothOptimizerEnabled: zod.boolean().optional(),
          rothOptimizerStartYear: zod.number().nullish(),
          rothOptimizerEndYear: zod.number().nullish(),
          importSource: zod
            .string()
            .max(postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioImportSourceMax)
            .nullish(),
          exportCount: zod.number().optional(),
          lastSimulationRun: zod.string().datetime({}).nullish(),
          investmentTypes: zod.array(zod.any()).nullish(),
          investments: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                investmentTypeId: zod.string().min(1),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioInvestmentsItemNameMax
                  ),
                currentValue: zod.number().optional(),
                taxStatus: zod
                  .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                  .optional(),
                costBasis: zod.number().optional(),
                orderIndex: zod.number().optional(),
                scenario: zod.any().optional(),
                investmentType: zod.any().optional()
              })
            )
            .nullish(),
          eventSeries: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioEventSeriesItemNameMax
                  ),
                description: zod
                  .string()
                  .max(
                    postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioEventSeriesItemDescriptionMax
                  )
                  .nullish(),
                eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
                startYear: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                duration: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                referenceEventSeriesId: zod.string().nullish(),
                startTimingType: zod
                  .string()
                  .max(
                    postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioEventSeriesItemStartTimingTypeMax
                  )
                  .nullish(),
                isActive: zod.boolean().optional(),
                orderIndex: zod.number().optional(),
                initialAmount: zod.number().nullish(),
                annualChange: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                inflationAdjusted: zod.boolean().optional(),
                userPercentage: zod.number().nullish(),
                isSocialSecurity: zod.boolean().optional(),
                isDiscretionary: zod.boolean().optional(),
                assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
                isGlidePath: zod.boolean().optional(),
                initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
                finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
                maximumCash: zod.number().nullish(),
                targetTaxStatus: zod
                  .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                  .optional(),
                scenario: zod.any().optional(),
                referenceEventSeries: zod.any().optional(),
                referencingEventSeries: zod.array(zod.any()).nullish()
              })
            )
            .nullish(),
          strategies: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                strategyType: zod
                  .enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion'])
                  .optional(),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioStrategiesItemNameMax
                  ),
                description: zod
                  .string()
                  .max(
                    postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioStrategiesItemDescriptionMax
                  )
                  .nullish(),
                isActive: zod.boolean().optional(),
                ordering: zod.array(zod.string()).nullish(),
                settings: zod.record(zod.string(), zod.any()).nullish(),
                scenario: zod.any().optional()
              })
            )
            .nullish(),
          scenarioShares: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                sharedWithUserId: zod.string().min(1),
                permission: zod.enum(['ReadOnly', 'ReadWrite']).optional(),
                sharedByUserId: zod.string().min(1),
                isActive: zod.boolean().optional(),
                scenario: zod.any().optional()
              })
            )
            .nullish()
        })
        .optional(),
      investments: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            investmentTypeId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(
                postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemNameMax
              ),
            currentValue: zod.number().optional(),
            taxStatus: zod
              .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
              .optional(),
            costBasis: zod.number().optional(),
            orderIndex: zod.number().optional(),
            scenario: zod
              .object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioNameMax
                  ),
                description: zod.string().nullish(),
                ownerId: zod.string().min(1),
                scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
                status: zod.enum(['Draft', 'Complete']).optional(),
                userBirthYear: zod.number().nullish(),
                spouseBirthYear: zod.number().nullish(),
                userLifeExpectancy: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                spouseLifeExpectancy: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                financialGoal: zod.number().optional(),
                stateOfResidence: zod
                  .string()
                  .max(
                    postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioStateOfResidenceMax
                  )
                  .nullish(),
                inflationAssumption: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                annualRetirementContributionLimit: zod.number().optional(),
                rothOptimizerEnabled: zod.boolean().optional(),
                rothOptimizerStartYear: zod.number().nullish(),
                rothOptimizerEndYear: zod.number().nullish(),
                importSource: zod
                  .string()
                  .max(
                    postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioImportSourceMax
                  )
                  .nullish(),
                exportCount: zod.number().optional(),
                lastSimulationRun: zod.string().datetime({}).nullish(),
                investmentTypes: zod.array(zod.any()).nullish(),
                investments: zod.array(zod.any()).nullish(),
                eventSeries: zod
                  .array(
                    zod.object({
                      id: zod.string().nullish(),
                      createdAt: zod.string().datetime({}).optional(),
                      updatedAt: zod.string().datetime({}).optional(),
                      scenarioId: zod.string().min(1),
                      name: zod
                        .string()
                        .min(1)
                        .max(
                          postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemNameMax
                        ),
                      description: zod
                        .string()
                        .max(
                          postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemDescriptionMax
                        )
                        .nullish(),
                      eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
                      startYear: zod
                        .object({
                          type: zod.string().nullable(),
                          value: zod.number().nullish(),
                          mean: zod.number().nullish(),
                          stdev: zod.number().nullish(),
                          lower: zod.number().nullish(),
                          upper: zod.number().nullish()
                        })
                        .optional(),
                      duration: zod
                        .object({
                          type: zod.string().nullable(),
                          value: zod.number().nullish(),
                          mean: zod.number().nullish(),
                          stdev: zod.number().nullish(),
                          lower: zod.number().nullish(),
                          upper: zod.number().nullish()
                        })
                        .optional(),
                      referenceEventSeriesId: zod.string().nullish(),
                      startTimingType: zod
                        .string()
                        .max(
                          postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemStartTimingTypeMax
                        )
                        .nullish(),
                      isActive: zod.boolean().optional(),
                      orderIndex: zod.number().optional(),
                      initialAmount: zod.number().nullish(),
                      annualChange: zod
                        .object({
                          type: zod.string().nullable(),
                          value: zod.number().nullish(),
                          mean: zod.number().nullish(),
                          stdev: zod.number().nullish(),
                          lower: zod.number().nullish(),
                          upper: zod.number().nullish()
                        })
                        .optional(),
                      inflationAdjusted: zod.boolean().optional(),
                      userPercentage: zod.number().nullish(),
                      isSocialSecurity: zod.boolean().optional(),
                      isDiscretionary: zod.boolean().optional(),
                      assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
                      isGlidePath: zod.boolean().optional(),
                      initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
                      finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
                      maximumCash: zod.number().nullish(),
                      targetTaxStatus: zod
                        .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                        .optional(),
                      scenario: zod.any().optional(),
                      referenceEventSeries: zod.any().optional(),
                      referencingEventSeries: zod.array(zod.any()).nullish()
                    })
                  )
                  .nullish(),
                strategies: zod
                  .array(
                    zod.object({
                      id: zod.string().nullish(),
                      createdAt: zod.string().datetime({}).optional(),
                      updatedAt: zod.string().datetime({}).optional(),
                      scenarioId: zod.string().min(1),
                      strategyType: zod
                        .enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion'])
                        .optional(),
                      name: zod
                        .string()
                        .min(1)
                        .max(
                          postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemNameMax
                        ),
                      description: zod
                        .string()
                        .max(
                          postApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemDescriptionMax
                        )
                        .nullish(),
                      isActive: zod.boolean().optional(),
                      ordering: zod.array(zod.string()).nullish(),
                      settings: zod.record(zod.string(), zod.any()).nullish(),
                      scenario: zod.any().optional()
                    })
                  )
                  .nullish(),
                scenarioShares: zod
                  .array(
                    zod.object({
                      id: zod.string().nullish(),
                      createdAt: zod.string().datetime({}).optional(),
                      updatedAt: zod.string().datetime({}).optional(),
                      scenarioId: zod.string().min(1),
                      sharedWithUserId: zod.string().min(1),
                      permission: zod.enum(['ReadOnly', 'ReadWrite']).optional(),
                      sharedByUserId: zod.string().min(1),
                      isActive: zod.boolean().optional(),
                      scenario: zod.any().optional()
                    })
                  )
                  .nullish()
              })
              .optional(),
            investmentType: zod.any().optional()
          })
        )
        .nullish()
    })
    .optional()
});

export const getApiScenariosScenarioIdInvestmentsParams = zod.object({
  scenarioId: zod.string()
});

export const getApiScenariosScenarioIdInvestmentsResponseNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseScenarioNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseScenarioStateOfResidenceMax = 100;
export const getApiScenariosScenarioIdInvestmentsResponseScenarioImportSourceMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentTypesItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentTypesItemDescriptionMax = 1000;
export const getApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentTypesItemInvestmentsItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentsItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentsItemInvestmentTypeNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentsItemInvestmentTypeDescriptionMax = 1000;
export const getApiScenariosScenarioIdInvestmentsResponseScenarioEventSeriesItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseScenarioEventSeriesItemDescriptionMax = 1000;
export const getApiScenariosScenarioIdInvestmentsResponseScenarioEventSeriesItemStartTimingTypeMax = 50;
export const getApiScenariosScenarioIdInvestmentsResponseScenarioStrategiesItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseScenarioStrategiesItemDescriptionMax = 1000;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeDescriptionMax = 1000;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioStateOfResidenceMax = 100;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioImportSourceMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioInvestmentsItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioEventSeriesItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioEventSeriesItemDescriptionMax = 1000;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioEventSeriesItemStartTimingTypeMax = 50;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioStrategiesItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioStrategiesItemDescriptionMax = 1000;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioStateOfResidenceMax = 100;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioImportSourceMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemDescriptionMax = 1000;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemStartTimingTypeMax = 50;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemDescriptionMax = 1000;

export const getApiScenariosScenarioIdInvestmentsResponseItem = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().min(1),
  investmentTypeId: zod.string().min(1),
  name: zod.string().min(1).max(getApiScenariosScenarioIdInvestmentsResponseNameMax),
  currentValue: zod.number().optional(),
  taxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  costBasis: zod.number().optional(),
  orderIndex: zod.number().optional(),
  scenario: zod
    .object({
      id: zod.string().nullish(),
      createdAt: zod.string().datetime({}).optional(),
      updatedAt: zod.string().datetime({}).optional(),
      name: zod.string().min(1).max(getApiScenariosScenarioIdInvestmentsResponseScenarioNameMax),
      description: zod.string().nullish(),
      ownerId: zod.string().min(1),
      scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
      status: zod.enum(['Draft', 'Complete']).optional(),
      userBirthYear: zod.number().nullish(),
      spouseBirthYear: zod.number().nullish(),
      userLifeExpectancy: zod
        .object({
          type: zod.string().nullable(),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .optional(),
      spouseLifeExpectancy: zod
        .object({
          type: zod.string().nullable(),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .optional(),
      financialGoal: zod.number().optional(),
      stateOfResidence: zod
        .string()
        .max(getApiScenariosScenarioIdInvestmentsResponseScenarioStateOfResidenceMax)
        .nullish(),
      inflationAssumption: zod
        .object({
          type: zod.string().nullable(),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .optional(),
      annualRetirementContributionLimit: zod.number().optional(),
      rothOptimizerEnabled: zod.boolean().optional(),
      rothOptimizerStartYear: zod.number().nullish(),
      rothOptimizerEndYear: zod.number().nullish(),
      importSource: zod
        .string()
        .max(getApiScenariosScenarioIdInvestmentsResponseScenarioImportSourceMax)
        .nullish(),
      exportCount: zod.number().optional(),
      lastSimulationRun: zod.string().datetime({}).nullish(),
      investmentTypes: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(getApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentTypesItemNameMax),
            description: zod
              .string()
              .max(
                getApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentTypesItemDescriptionMax
              )
              .nullish(),
            expectedAnnualReturn: zod.object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            }),
            expenseRatio: zod.number().optional(),
            expectedAnnualIncome: zod.object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            }),
            taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
            isCash: zod.boolean().optional(),
            scenario: zod.any().optional(),
            investments: zod
              .array(
                zod.object({
                  id: zod.string().nullish(),
                  createdAt: zod.string().datetime({}).optional(),
                  updatedAt: zod.string().datetime({}).optional(),
                  scenarioId: zod.string().min(1),
                  investmentTypeId: zod.string().min(1),
                  name: zod
                    .string()
                    .min(1)
                    .max(
                      getApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentTypesItemInvestmentsItemNameMax
                    ),
                  currentValue: zod.number().optional(),
                  taxStatus: zod
                    .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                    .optional(),
                  costBasis: zod.number().optional(),
                  orderIndex: zod.number().optional(),
                  scenario: zod.any().optional(),
                  investmentType: zod.any().optional()
                })
              )
              .nullish()
          })
        )
        .nullish(),
      investments: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            investmentTypeId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(getApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentsItemNameMax),
            currentValue: zod.number().optional(),
            taxStatus: zod
              .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
              .optional(),
            costBasis: zod.number().optional(),
            orderIndex: zod.number().optional(),
            scenario: zod.any().optional(),
            investmentType: zod
              .object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    getApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentsItemInvestmentTypeNameMax
                  ),
                description: zod
                  .string()
                  .max(
                    getApiScenariosScenarioIdInvestmentsResponseScenarioInvestmentsItemInvestmentTypeDescriptionMax
                  )
                  .nullish(),
                expectedAnnualReturn: zod.object({
                  type: zod.string().nullable(),
                  value: zod.number().nullish(),
                  mean: zod.number().nullish(),
                  stdev: zod.number().nullish(),
                  lower: zod.number().nullish(),
                  upper: zod.number().nullish()
                }),
                expenseRatio: zod.number().optional(),
                expectedAnnualIncome: zod.object({
                  type: zod.string().nullable(),
                  value: zod.number().nullish(),
                  mean: zod.number().nullish(),
                  stdev: zod.number().nullish(),
                  lower: zod.number().nullish(),
                  upper: zod.number().nullish()
                }),
                taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
                isCash: zod.boolean().optional(),
                scenario: zod.any().optional(),
                investments: zod.array(zod.any()).nullish()
              })
              .optional()
          })
        )
        .nullish(),
      eventSeries: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(getApiScenariosScenarioIdInvestmentsResponseScenarioEventSeriesItemNameMax),
            description: zod
              .string()
              .max(
                getApiScenariosScenarioIdInvestmentsResponseScenarioEventSeriesItemDescriptionMax
              )
              .nullish(),
            eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
            startYear: zod
              .object({
                type: zod.string().nullable(),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .optional(),
            duration: zod
              .object({
                type: zod.string().nullable(),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .optional(),
            referenceEventSeriesId: zod.string().nullish(),
            startTimingType: zod
              .string()
              .max(
                getApiScenariosScenarioIdInvestmentsResponseScenarioEventSeriesItemStartTimingTypeMax
              )
              .nullish(),
            isActive: zod.boolean().optional(),
            orderIndex: zod.number().optional(),
            initialAmount: zod.number().nullish(),
            annualChange: zod
              .object({
                type: zod.string().nullable(),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .optional(),
            inflationAdjusted: zod.boolean().optional(),
            userPercentage: zod.number().nullish(),
            isSocialSecurity: zod.boolean().optional(),
            isDiscretionary: zod.boolean().optional(),
            assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
            isGlidePath: zod.boolean().optional(),
            initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
            finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
            maximumCash: zod.number().nullish(),
            targetTaxStatus: zod
              .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
              .optional(),
            scenario: zod.any().optional(),
            referenceEventSeries: zod.any().optional(),
            referencingEventSeries: zod.array(zod.any()).nullish()
          })
        )
        .nullish(),
      strategies: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            strategyType: zod
              .enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion'])
              .optional(),
            name: zod
              .string()
              .min(1)
              .max(getApiScenariosScenarioIdInvestmentsResponseScenarioStrategiesItemNameMax),
            description: zod
              .string()
              .max(getApiScenariosScenarioIdInvestmentsResponseScenarioStrategiesItemDescriptionMax)
              .nullish(),
            isActive: zod.boolean().optional(),
            ordering: zod.array(zod.string()).nullish(),
            settings: zod.record(zod.string(), zod.any()).nullish(),
            scenario: zod.any().optional()
          })
        )
        .nullish(),
      scenarioShares: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            sharedWithUserId: zod.string().min(1),
            permission: zod.enum(['ReadOnly', 'ReadWrite']).optional(),
            sharedByUserId: zod.string().min(1),
            isActive: zod.boolean().optional(),
            scenario: zod.any().optional()
          })
        )
        .nullish()
    })
    .optional(),
  investmentType: zod
    .object({
      id: zod.string().nullish(),
      createdAt: zod.string().datetime({}).optional(),
      updatedAt: zod.string().datetime({}).optional(),
      scenarioId: zod.string().min(1),
      name: zod
        .string()
        .min(1)
        .max(getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeNameMax),
      description: zod
        .string()
        .max(getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeDescriptionMax)
        .nullish(),
      expectedAnnualReturn: zod.object({
        type: zod.string().nullable(),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      }),
      expenseRatio: zod.number().optional(),
      expectedAnnualIncome: zod.object({
        type: zod.string().nullable(),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      }),
      taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
      isCash: zod.boolean().optional(),
      scenario: zod
        .object({
          id: zod.string().nullish(),
          createdAt: zod.string().datetime({}).optional(),
          updatedAt: zod.string().datetime({}).optional(),
          name: zod
            .string()
            .min(1)
            .max(getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioNameMax),
          description: zod.string().nullish(),
          ownerId: zod.string().min(1),
          scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
          status: zod.enum(['Draft', 'Complete']).optional(),
          userBirthYear: zod.number().nullish(),
          spouseBirthYear: zod.number().nullish(),
          userLifeExpectancy: zod
            .object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional(),
          spouseLifeExpectancy: zod
            .object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional(),
          financialGoal: zod.number().optional(),
          stateOfResidence: zod
            .string()
            .max(
              getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioStateOfResidenceMax
            )
            .nullish(),
          inflationAssumption: zod
            .object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional(),
          annualRetirementContributionLimit: zod.number().optional(),
          rothOptimizerEnabled: zod.boolean().optional(),
          rothOptimizerStartYear: zod.number().nullish(),
          rothOptimizerEndYear: zod.number().nullish(),
          importSource: zod
            .string()
            .max(getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioImportSourceMax)
            .nullish(),
          exportCount: zod.number().optional(),
          lastSimulationRun: zod.string().datetime({}).nullish(),
          investmentTypes: zod.array(zod.any()).nullish(),
          investments: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                investmentTypeId: zod.string().min(1),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioInvestmentsItemNameMax
                  ),
                currentValue: zod.number().optional(),
                taxStatus: zod
                  .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                  .optional(),
                costBasis: zod.number().optional(),
                orderIndex: zod.number().optional(),
                scenario: zod.any().optional(),
                investmentType: zod.any().optional()
              })
            )
            .nullish(),
          eventSeries: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioEventSeriesItemNameMax
                  ),
                description: zod
                  .string()
                  .max(
                    getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioEventSeriesItemDescriptionMax
                  )
                  .nullish(),
                eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
                startYear: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                duration: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                referenceEventSeriesId: zod.string().nullish(),
                startTimingType: zod
                  .string()
                  .max(
                    getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioEventSeriesItemStartTimingTypeMax
                  )
                  .nullish(),
                isActive: zod.boolean().optional(),
                orderIndex: zod.number().optional(),
                initialAmount: zod.number().nullish(),
                annualChange: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                inflationAdjusted: zod.boolean().optional(),
                userPercentage: zod.number().nullish(),
                isSocialSecurity: zod.boolean().optional(),
                isDiscretionary: zod.boolean().optional(),
                assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
                isGlidePath: zod.boolean().optional(),
                initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
                finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
                maximumCash: zod.number().nullish(),
                targetTaxStatus: zod
                  .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                  .optional(),
                scenario: zod.any().optional(),
                referenceEventSeries: zod.any().optional(),
                referencingEventSeries: zod.array(zod.any()).nullish()
              })
            )
            .nullish(),
          strategies: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                strategyType: zod
                  .enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion'])
                  .optional(),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioStrategiesItemNameMax
                  ),
                description: zod
                  .string()
                  .max(
                    getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeScenarioStrategiesItemDescriptionMax
                  )
                  .nullish(),
                isActive: zod.boolean().optional(),
                ordering: zod.array(zod.string()).nullish(),
                settings: zod.record(zod.string(), zod.any()).nullish(),
                scenario: zod.any().optional()
              })
            )
            .nullish(),
          scenarioShares: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                sharedWithUserId: zod.string().min(1),
                permission: zod.enum(['ReadOnly', 'ReadWrite']).optional(),
                sharedByUserId: zod.string().min(1),
                isActive: zod.boolean().optional(),
                scenario: zod.any().optional()
              })
            )
            .nullish()
        })
        .optional(),
      investments: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            investmentTypeId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(
                getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemNameMax
              ),
            currentValue: zod.number().optional(),
            taxStatus: zod
              .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
              .optional(),
            costBasis: zod.number().optional(),
            orderIndex: zod.number().optional(),
            scenario: zod
              .object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioNameMax
                  ),
                description: zod.string().nullish(),
                ownerId: zod.string().min(1),
                scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
                status: zod.enum(['Draft', 'Complete']).optional(),
                userBirthYear: zod.number().nullish(),
                spouseBirthYear: zod.number().nullish(),
                userLifeExpectancy: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                spouseLifeExpectancy: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                financialGoal: zod.number().optional(),
                stateOfResidence: zod
                  .string()
                  .max(
                    getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioStateOfResidenceMax
                  )
                  .nullish(),
                inflationAssumption: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                annualRetirementContributionLimit: zod.number().optional(),
                rothOptimizerEnabled: zod.boolean().optional(),
                rothOptimizerStartYear: zod.number().nullish(),
                rothOptimizerEndYear: zod.number().nullish(),
                importSource: zod
                  .string()
                  .max(
                    getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioImportSourceMax
                  )
                  .nullish(),
                exportCount: zod.number().optional(),
                lastSimulationRun: zod.string().datetime({}).nullish(),
                investmentTypes: zod.array(zod.any()).nullish(),
                investments: zod.array(zod.any()).nullish(),
                eventSeries: zod
                  .array(
                    zod.object({
                      id: zod.string().nullish(),
                      createdAt: zod.string().datetime({}).optional(),
                      updatedAt: zod.string().datetime({}).optional(),
                      scenarioId: zod.string().min(1),
                      name: zod
                        .string()
                        .min(1)
                        .max(
                          getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemNameMax
                        ),
                      description: zod
                        .string()
                        .max(
                          getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemDescriptionMax
                        )
                        .nullish(),
                      eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
                      startYear: zod
                        .object({
                          type: zod.string().nullable(),
                          value: zod.number().nullish(),
                          mean: zod.number().nullish(),
                          stdev: zod.number().nullish(),
                          lower: zod.number().nullish(),
                          upper: zod.number().nullish()
                        })
                        .optional(),
                      duration: zod
                        .object({
                          type: zod.string().nullable(),
                          value: zod.number().nullish(),
                          mean: zod.number().nullish(),
                          stdev: zod.number().nullish(),
                          lower: zod.number().nullish(),
                          upper: zod.number().nullish()
                        })
                        .optional(),
                      referenceEventSeriesId: zod.string().nullish(),
                      startTimingType: zod
                        .string()
                        .max(
                          getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemStartTimingTypeMax
                        )
                        .nullish(),
                      isActive: zod.boolean().optional(),
                      orderIndex: zod.number().optional(),
                      initialAmount: zod.number().nullish(),
                      annualChange: zod
                        .object({
                          type: zod.string().nullable(),
                          value: zod.number().nullish(),
                          mean: zod.number().nullish(),
                          stdev: zod.number().nullish(),
                          lower: zod.number().nullish(),
                          upper: zod.number().nullish()
                        })
                        .optional(),
                      inflationAdjusted: zod.boolean().optional(),
                      userPercentage: zod.number().nullish(),
                      isSocialSecurity: zod.boolean().optional(),
                      isDiscretionary: zod.boolean().optional(),
                      assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
                      isGlidePath: zod.boolean().optional(),
                      initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
                      finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
                      maximumCash: zod.number().nullish(),
                      targetTaxStatus: zod
                        .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                        .optional(),
                      scenario: zod.any().optional(),
                      referenceEventSeries: zod.any().optional(),
                      referencingEventSeries: zod.array(zod.any()).nullish()
                    })
                  )
                  .nullish(),
                strategies: zod
                  .array(
                    zod.object({
                      id: zod.string().nullish(),
                      createdAt: zod.string().datetime({}).optional(),
                      updatedAt: zod.string().datetime({}).optional(),
                      scenarioId: zod.string().min(1),
                      strategyType: zod
                        .enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion'])
                        .optional(),
                      name: zod
                        .string()
                        .min(1)
                        .max(
                          getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemNameMax
                        ),
                      description: zod
                        .string()
                        .max(
                          getApiScenariosScenarioIdInvestmentsResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemDescriptionMax
                        )
                        .nullish(),
                      isActive: zod.boolean().optional(),
                      ordering: zod.array(zod.string()).nullish(),
                      settings: zod.record(zod.string(), zod.any()).nullish(),
                      scenario: zod.any().optional()
                    })
                  )
                  .nullish(),
                scenarioShares: zod
                  .array(
                    zod.object({
                      id: zod.string().nullish(),
                      createdAt: zod.string().datetime({}).optional(),
                      updatedAt: zod.string().datetime({}).optional(),
                      scenarioId: zod.string().min(1),
                      sharedWithUserId: zod.string().min(1),
                      permission: zod.enum(['ReadOnly', 'ReadWrite']).optional(),
                      sharedByUserId: zod.string().min(1),
                      isActive: zod.boolean().optional(),
                      scenario: zod.any().optional()
                    })
                  )
                  .nullish()
              })
              .optional(),
            investmentType: zod.any().optional()
          })
        )
        .nullish()
    })
    .optional()
});
export const getApiScenariosScenarioIdInvestmentsResponse = zod.array(
  getApiScenariosScenarioIdInvestmentsResponseItem
);

export const getApiScenariosScenarioIdInvestmentsIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});

export const getApiScenariosScenarioIdInvestmentsIdResponseNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseScenarioNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseScenarioStateOfResidenceMax = 100;
export const getApiScenariosScenarioIdInvestmentsIdResponseScenarioImportSourceMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentTypesItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentTypesItemDescriptionMax = 1000;
export const getApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentTypesItemInvestmentsItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentsItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentsItemInvestmentTypeNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentsItemInvestmentTypeDescriptionMax = 1000;
export const getApiScenariosScenarioIdInvestmentsIdResponseScenarioEventSeriesItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseScenarioEventSeriesItemDescriptionMax = 1000;
export const getApiScenariosScenarioIdInvestmentsIdResponseScenarioEventSeriesItemStartTimingTypeMax = 50;
export const getApiScenariosScenarioIdInvestmentsIdResponseScenarioStrategiesItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseScenarioStrategiesItemDescriptionMax = 1000;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeDescriptionMax = 1000;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioStateOfResidenceMax = 100;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioImportSourceMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioInvestmentsItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioEventSeriesItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioEventSeriesItemDescriptionMax = 1000;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioEventSeriesItemStartTimingTypeMax = 50;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioStrategiesItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioStrategiesItemDescriptionMax = 1000;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioStateOfResidenceMax = 100;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioImportSourceMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemDescriptionMax = 1000;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemStartTimingTypeMax = 50;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemNameMax = 255;
export const getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemDescriptionMax = 1000;

export const getApiScenariosScenarioIdInvestmentsIdResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().min(1),
  investmentTypeId: zod.string().min(1),
  name: zod.string().min(1).max(getApiScenariosScenarioIdInvestmentsIdResponseNameMax),
  currentValue: zod.number().optional(),
  taxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  costBasis: zod.number().optional(),
  orderIndex: zod.number().optional(),
  scenario: zod
    .object({
      id: zod.string().nullish(),
      createdAt: zod.string().datetime({}).optional(),
      updatedAt: zod.string().datetime({}).optional(),
      name: zod.string().min(1).max(getApiScenariosScenarioIdInvestmentsIdResponseScenarioNameMax),
      description: zod.string().nullish(),
      ownerId: zod.string().min(1),
      scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
      status: zod.enum(['Draft', 'Complete']).optional(),
      userBirthYear: zod.number().nullish(),
      spouseBirthYear: zod.number().nullish(),
      userLifeExpectancy: zod
        .object({
          type: zod.string().nullable(),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .optional(),
      spouseLifeExpectancy: zod
        .object({
          type: zod.string().nullable(),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .optional(),
      financialGoal: zod.number().optional(),
      stateOfResidence: zod
        .string()
        .max(getApiScenariosScenarioIdInvestmentsIdResponseScenarioStateOfResidenceMax)
        .nullish(),
      inflationAssumption: zod
        .object({
          type: zod.string().nullable(),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .optional(),
      annualRetirementContributionLimit: zod.number().optional(),
      rothOptimizerEnabled: zod.boolean().optional(),
      rothOptimizerStartYear: zod.number().nullish(),
      rothOptimizerEndYear: zod.number().nullish(),
      importSource: zod
        .string()
        .max(getApiScenariosScenarioIdInvestmentsIdResponseScenarioImportSourceMax)
        .nullish(),
      exportCount: zod.number().optional(),
      lastSimulationRun: zod.string().datetime({}).nullish(),
      investmentTypes: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(
                getApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentTypesItemNameMax
              ),
            description: zod
              .string()
              .max(
                getApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentTypesItemDescriptionMax
              )
              .nullish(),
            expectedAnnualReturn: zod.object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            }),
            expenseRatio: zod.number().optional(),
            expectedAnnualIncome: zod.object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            }),
            taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
            isCash: zod.boolean().optional(),
            scenario: zod.any().optional(),
            investments: zod
              .array(
                zod.object({
                  id: zod.string().nullish(),
                  createdAt: zod.string().datetime({}).optional(),
                  updatedAt: zod.string().datetime({}).optional(),
                  scenarioId: zod.string().min(1),
                  investmentTypeId: zod.string().min(1),
                  name: zod
                    .string()
                    .min(1)
                    .max(
                      getApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentTypesItemInvestmentsItemNameMax
                    ),
                  currentValue: zod.number().optional(),
                  taxStatus: zod
                    .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                    .optional(),
                  costBasis: zod.number().optional(),
                  orderIndex: zod.number().optional(),
                  scenario: zod.any().optional(),
                  investmentType: zod.any().optional()
                })
              )
              .nullish()
          })
        )
        .nullish(),
      investments: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            investmentTypeId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(getApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentsItemNameMax),
            currentValue: zod.number().optional(),
            taxStatus: zod
              .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
              .optional(),
            costBasis: zod.number().optional(),
            orderIndex: zod.number().optional(),
            scenario: zod.any().optional(),
            investmentType: zod
              .object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    getApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentsItemInvestmentTypeNameMax
                  ),
                description: zod
                  .string()
                  .max(
                    getApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentsItemInvestmentTypeDescriptionMax
                  )
                  .nullish(),
                expectedAnnualReturn: zod.object({
                  type: zod.string().nullable(),
                  value: zod.number().nullish(),
                  mean: zod.number().nullish(),
                  stdev: zod.number().nullish(),
                  lower: zod.number().nullish(),
                  upper: zod.number().nullish()
                }),
                expenseRatio: zod.number().optional(),
                expectedAnnualIncome: zod.object({
                  type: zod.string().nullable(),
                  value: zod.number().nullish(),
                  mean: zod.number().nullish(),
                  stdev: zod.number().nullish(),
                  lower: zod.number().nullish(),
                  upper: zod.number().nullish()
                }),
                taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
                isCash: zod.boolean().optional(),
                scenario: zod.any().optional(),
                investments: zod.array(zod.any()).nullish()
              })
              .optional()
          })
        )
        .nullish(),
      eventSeries: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(getApiScenariosScenarioIdInvestmentsIdResponseScenarioEventSeriesItemNameMax),
            description: zod
              .string()
              .max(
                getApiScenariosScenarioIdInvestmentsIdResponseScenarioEventSeriesItemDescriptionMax
              )
              .nullish(),
            eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
            startYear: zod
              .object({
                type: zod.string().nullable(),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .optional(),
            duration: zod
              .object({
                type: zod.string().nullable(),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .optional(),
            referenceEventSeriesId: zod.string().nullish(),
            startTimingType: zod
              .string()
              .max(
                getApiScenariosScenarioIdInvestmentsIdResponseScenarioEventSeriesItemStartTimingTypeMax
              )
              .nullish(),
            isActive: zod.boolean().optional(),
            orderIndex: zod.number().optional(),
            initialAmount: zod.number().nullish(),
            annualChange: zod
              .object({
                type: zod.string().nullable(),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .optional(),
            inflationAdjusted: zod.boolean().optional(),
            userPercentage: zod.number().nullish(),
            isSocialSecurity: zod.boolean().optional(),
            isDiscretionary: zod.boolean().optional(),
            assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
            isGlidePath: zod.boolean().optional(),
            initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
            finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
            maximumCash: zod.number().nullish(),
            targetTaxStatus: zod
              .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
              .optional(),
            scenario: zod.any().optional(),
            referenceEventSeries: zod.any().optional(),
            referencingEventSeries: zod.array(zod.any()).nullish()
          })
        )
        .nullish(),
      strategies: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            strategyType: zod
              .enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion'])
              .optional(),
            name: zod
              .string()
              .min(1)
              .max(getApiScenariosScenarioIdInvestmentsIdResponseScenarioStrategiesItemNameMax),
            description: zod
              .string()
              .max(
                getApiScenariosScenarioIdInvestmentsIdResponseScenarioStrategiesItemDescriptionMax
              )
              .nullish(),
            isActive: zod.boolean().optional(),
            ordering: zod.array(zod.string()).nullish(),
            settings: zod.record(zod.string(), zod.any()).nullish(),
            scenario: zod.any().optional()
          })
        )
        .nullish(),
      scenarioShares: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            sharedWithUserId: zod.string().min(1),
            permission: zod.enum(['ReadOnly', 'ReadWrite']).optional(),
            sharedByUserId: zod.string().min(1),
            isActive: zod.boolean().optional(),
            scenario: zod.any().optional()
          })
        )
        .nullish()
    })
    .optional(),
  investmentType: zod
    .object({
      id: zod.string().nullish(),
      createdAt: zod.string().datetime({}).optional(),
      updatedAt: zod.string().datetime({}).optional(),
      scenarioId: zod.string().min(1),
      name: zod
        .string()
        .min(1)
        .max(getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeNameMax),
      description: zod
        .string()
        .max(getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeDescriptionMax)
        .nullish(),
      expectedAnnualReturn: zod.object({
        type: zod.string().nullable(),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      }),
      expenseRatio: zod.number().optional(),
      expectedAnnualIncome: zod.object({
        type: zod.string().nullable(),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      }),
      taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
      isCash: zod.boolean().optional(),
      scenario: zod
        .object({
          id: zod.string().nullish(),
          createdAt: zod.string().datetime({}).optional(),
          updatedAt: zod.string().datetime({}).optional(),
          name: zod
            .string()
            .min(1)
            .max(getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioNameMax),
          description: zod.string().nullish(),
          ownerId: zod.string().min(1),
          scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
          status: zod.enum(['Draft', 'Complete']).optional(),
          userBirthYear: zod.number().nullish(),
          spouseBirthYear: zod.number().nullish(),
          userLifeExpectancy: zod
            .object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional(),
          spouseLifeExpectancy: zod
            .object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional(),
          financialGoal: zod.number().optional(),
          stateOfResidence: zod
            .string()
            .max(
              getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioStateOfResidenceMax
            )
            .nullish(),
          inflationAssumption: zod
            .object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional(),
          annualRetirementContributionLimit: zod.number().optional(),
          rothOptimizerEnabled: zod.boolean().optional(),
          rothOptimizerStartYear: zod.number().nullish(),
          rothOptimizerEndYear: zod.number().nullish(),
          importSource: zod
            .string()
            .max(
              getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioImportSourceMax
            )
            .nullish(),
          exportCount: zod.number().optional(),
          lastSimulationRun: zod.string().datetime({}).nullish(),
          investmentTypes: zod.array(zod.any()).nullish(),
          investments: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                investmentTypeId: zod.string().min(1),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioInvestmentsItemNameMax
                  ),
                currentValue: zod.number().optional(),
                taxStatus: zod
                  .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                  .optional(),
                costBasis: zod.number().optional(),
                orderIndex: zod.number().optional(),
                scenario: zod.any().optional(),
                investmentType: zod.any().optional()
              })
            )
            .nullish(),
          eventSeries: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioEventSeriesItemNameMax
                  ),
                description: zod
                  .string()
                  .max(
                    getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioEventSeriesItemDescriptionMax
                  )
                  .nullish(),
                eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
                startYear: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                duration: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                referenceEventSeriesId: zod.string().nullish(),
                startTimingType: zod
                  .string()
                  .max(
                    getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioEventSeriesItemStartTimingTypeMax
                  )
                  .nullish(),
                isActive: zod.boolean().optional(),
                orderIndex: zod.number().optional(),
                initialAmount: zod.number().nullish(),
                annualChange: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                inflationAdjusted: zod.boolean().optional(),
                userPercentage: zod.number().nullish(),
                isSocialSecurity: zod.boolean().optional(),
                isDiscretionary: zod.boolean().optional(),
                assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
                isGlidePath: zod.boolean().optional(),
                initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
                finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
                maximumCash: zod.number().nullish(),
                targetTaxStatus: zod
                  .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                  .optional(),
                scenario: zod.any().optional(),
                referenceEventSeries: zod.any().optional(),
                referencingEventSeries: zod.array(zod.any()).nullish()
              })
            )
            .nullish(),
          strategies: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                strategyType: zod
                  .enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion'])
                  .optional(),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioStrategiesItemNameMax
                  ),
                description: zod
                  .string()
                  .max(
                    getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioStrategiesItemDescriptionMax
                  )
                  .nullish(),
                isActive: zod.boolean().optional(),
                ordering: zod.array(zod.string()).nullish(),
                settings: zod.record(zod.string(), zod.any()).nullish(),
                scenario: zod.any().optional()
              })
            )
            .nullish(),
          scenarioShares: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                sharedWithUserId: zod.string().min(1),
                permission: zod.enum(['ReadOnly', 'ReadWrite']).optional(),
                sharedByUserId: zod.string().min(1),
                isActive: zod.boolean().optional(),
                scenario: zod.any().optional()
              })
            )
            .nullish()
        })
        .optional(),
      investments: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            investmentTypeId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(
                getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemNameMax
              ),
            currentValue: zod.number().optional(),
            taxStatus: zod
              .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
              .optional(),
            costBasis: zod.number().optional(),
            orderIndex: zod.number().optional(),
            scenario: zod
              .object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioNameMax
                  ),
                description: zod.string().nullish(),
                ownerId: zod.string().min(1),
                scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
                status: zod.enum(['Draft', 'Complete']).optional(),
                userBirthYear: zod.number().nullish(),
                spouseBirthYear: zod.number().nullish(),
                userLifeExpectancy: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                spouseLifeExpectancy: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                financialGoal: zod.number().optional(),
                stateOfResidence: zod
                  .string()
                  .max(
                    getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioStateOfResidenceMax
                  )
                  .nullish(),
                inflationAssumption: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                annualRetirementContributionLimit: zod.number().optional(),
                rothOptimizerEnabled: zod.boolean().optional(),
                rothOptimizerStartYear: zod.number().nullish(),
                rothOptimizerEndYear: zod.number().nullish(),
                importSource: zod
                  .string()
                  .max(
                    getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioImportSourceMax
                  )
                  .nullish(),
                exportCount: zod.number().optional(),
                lastSimulationRun: zod.string().datetime({}).nullish(),
                investmentTypes: zod.array(zod.any()).nullish(),
                investments: zod.array(zod.any()).nullish(),
                eventSeries: zod
                  .array(
                    zod.object({
                      id: zod.string().nullish(),
                      createdAt: zod.string().datetime({}).optional(),
                      updatedAt: zod.string().datetime({}).optional(),
                      scenarioId: zod.string().min(1),
                      name: zod
                        .string()
                        .min(1)
                        .max(
                          getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemNameMax
                        ),
                      description: zod
                        .string()
                        .max(
                          getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemDescriptionMax
                        )
                        .nullish(),
                      eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
                      startYear: zod
                        .object({
                          type: zod.string().nullable(),
                          value: zod.number().nullish(),
                          mean: zod.number().nullish(),
                          stdev: zod.number().nullish(),
                          lower: zod.number().nullish(),
                          upper: zod.number().nullish()
                        })
                        .optional(),
                      duration: zod
                        .object({
                          type: zod.string().nullable(),
                          value: zod.number().nullish(),
                          mean: zod.number().nullish(),
                          stdev: zod.number().nullish(),
                          lower: zod.number().nullish(),
                          upper: zod.number().nullish()
                        })
                        .optional(),
                      referenceEventSeriesId: zod.string().nullish(),
                      startTimingType: zod
                        .string()
                        .max(
                          getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemStartTimingTypeMax
                        )
                        .nullish(),
                      isActive: zod.boolean().optional(),
                      orderIndex: zod.number().optional(),
                      initialAmount: zod.number().nullish(),
                      annualChange: zod
                        .object({
                          type: zod.string().nullable(),
                          value: zod.number().nullish(),
                          mean: zod.number().nullish(),
                          stdev: zod.number().nullish(),
                          lower: zod.number().nullish(),
                          upper: zod.number().nullish()
                        })
                        .optional(),
                      inflationAdjusted: zod.boolean().optional(),
                      userPercentage: zod.number().nullish(),
                      isSocialSecurity: zod.boolean().optional(),
                      isDiscretionary: zod.boolean().optional(),
                      assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
                      isGlidePath: zod.boolean().optional(),
                      initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
                      finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
                      maximumCash: zod.number().nullish(),
                      targetTaxStatus: zod
                        .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                        .optional(),
                      scenario: zod.any().optional(),
                      referenceEventSeries: zod.any().optional(),
                      referencingEventSeries: zod.array(zod.any()).nullish()
                    })
                  )
                  .nullish(),
                strategies: zod
                  .array(
                    zod.object({
                      id: zod.string().nullish(),
                      createdAt: zod.string().datetime({}).optional(),
                      updatedAt: zod.string().datetime({}).optional(),
                      scenarioId: zod.string().min(1),
                      strategyType: zod
                        .enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion'])
                        .optional(),
                      name: zod
                        .string()
                        .min(1)
                        .max(
                          getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemNameMax
                        ),
                      description: zod
                        .string()
                        .max(
                          getApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemDescriptionMax
                        )
                        .nullish(),
                      isActive: zod.boolean().optional(),
                      ordering: zod.array(zod.string()).nullish(),
                      settings: zod.record(zod.string(), zod.any()).nullish(),
                      scenario: zod.any().optional()
                    })
                  )
                  .nullish(),
                scenarioShares: zod
                  .array(
                    zod.object({
                      id: zod.string().nullish(),
                      createdAt: zod.string().datetime({}).optional(),
                      updatedAt: zod.string().datetime({}).optional(),
                      scenarioId: zod.string().min(1),
                      sharedWithUserId: zod.string().min(1),
                      permission: zod.enum(['ReadOnly', 'ReadWrite']).optional(),
                      sharedByUserId: zod.string().min(1),
                      isActive: zod.boolean().optional(),
                      scenario: zod.any().optional()
                    })
                  )
                  .nullish()
              })
              .optional(),
            investmentType: zod.any().optional()
          })
        )
        .nullish()
    })
    .optional()
});

export const putApiScenariosScenarioIdInvestmentsIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});

export const putApiScenariosScenarioIdInvestmentsIdBodyNameMax = 255;

export const putApiScenariosScenarioIdInvestmentsIdBody = zod.object({
  investmentTypeId: zod.string().min(1),
  name: zod.string().min(1).max(putApiScenariosScenarioIdInvestmentsIdBodyNameMax),
  currentValue: zod.number().optional(),
  taxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  costBasis: zod.number().optional(),
  orderIndex: zod.number().optional()
});

export const putApiScenariosScenarioIdInvestmentsIdResponseNameMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseScenarioNameMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseScenarioStateOfResidenceMax = 100;
export const putApiScenariosScenarioIdInvestmentsIdResponseScenarioImportSourceMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentTypesItemNameMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentTypesItemDescriptionMax = 1000;
export const putApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentTypesItemInvestmentsItemNameMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentsItemNameMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentsItemInvestmentTypeNameMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentsItemInvestmentTypeDescriptionMax = 1000;
export const putApiScenariosScenarioIdInvestmentsIdResponseScenarioEventSeriesItemNameMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseScenarioEventSeriesItemDescriptionMax = 1000;
export const putApiScenariosScenarioIdInvestmentsIdResponseScenarioEventSeriesItemStartTimingTypeMax = 50;
export const putApiScenariosScenarioIdInvestmentsIdResponseScenarioStrategiesItemNameMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseScenarioStrategiesItemDescriptionMax = 1000;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeNameMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeDescriptionMax = 1000;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioNameMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioStateOfResidenceMax = 100;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioImportSourceMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioInvestmentsItemNameMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioEventSeriesItemNameMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioEventSeriesItemDescriptionMax = 1000;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioEventSeriesItemStartTimingTypeMax = 50;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioStrategiesItemNameMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioStrategiesItemDescriptionMax = 1000;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemNameMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioNameMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioStateOfResidenceMax = 100;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioImportSourceMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemNameMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemDescriptionMax = 1000;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemStartTimingTypeMax = 50;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemNameMax = 255;
export const putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemDescriptionMax = 1000;

export const putApiScenariosScenarioIdInvestmentsIdResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().min(1),
  investmentTypeId: zod.string().min(1),
  name: zod.string().min(1).max(putApiScenariosScenarioIdInvestmentsIdResponseNameMax),
  currentValue: zod.number().optional(),
  taxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  costBasis: zod.number().optional(),
  orderIndex: zod.number().optional(),
  scenario: zod
    .object({
      id: zod.string().nullish(),
      createdAt: zod.string().datetime({}).optional(),
      updatedAt: zod.string().datetime({}).optional(),
      name: zod.string().min(1).max(putApiScenariosScenarioIdInvestmentsIdResponseScenarioNameMax),
      description: zod.string().nullish(),
      ownerId: zod.string().min(1),
      scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
      status: zod.enum(['Draft', 'Complete']).optional(),
      userBirthYear: zod.number().nullish(),
      spouseBirthYear: zod.number().nullish(),
      userLifeExpectancy: zod
        .object({
          type: zod.string().nullable(),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .optional(),
      spouseLifeExpectancy: zod
        .object({
          type: zod.string().nullable(),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .optional(),
      financialGoal: zod.number().optional(),
      stateOfResidence: zod
        .string()
        .max(putApiScenariosScenarioIdInvestmentsIdResponseScenarioStateOfResidenceMax)
        .nullish(),
      inflationAssumption: zod
        .object({
          type: zod.string().nullable(),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .optional(),
      annualRetirementContributionLimit: zod.number().optional(),
      rothOptimizerEnabled: zod.boolean().optional(),
      rothOptimizerStartYear: zod.number().nullish(),
      rothOptimizerEndYear: zod.number().nullish(),
      importSource: zod
        .string()
        .max(putApiScenariosScenarioIdInvestmentsIdResponseScenarioImportSourceMax)
        .nullish(),
      exportCount: zod.number().optional(),
      lastSimulationRun: zod.string().datetime({}).nullish(),
      investmentTypes: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(
                putApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentTypesItemNameMax
              ),
            description: zod
              .string()
              .max(
                putApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentTypesItemDescriptionMax
              )
              .nullish(),
            expectedAnnualReturn: zod.object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            }),
            expenseRatio: zod.number().optional(),
            expectedAnnualIncome: zod.object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            }),
            taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
            isCash: zod.boolean().optional(),
            scenario: zod.any().optional(),
            investments: zod
              .array(
                zod.object({
                  id: zod.string().nullish(),
                  createdAt: zod.string().datetime({}).optional(),
                  updatedAt: zod.string().datetime({}).optional(),
                  scenarioId: zod.string().min(1),
                  investmentTypeId: zod.string().min(1),
                  name: zod
                    .string()
                    .min(1)
                    .max(
                      putApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentTypesItemInvestmentsItemNameMax
                    ),
                  currentValue: zod.number().optional(),
                  taxStatus: zod
                    .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                    .optional(),
                  costBasis: zod.number().optional(),
                  orderIndex: zod.number().optional(),
                  scenario: zod.any().optional(),
                  investmentType: zod.any().optional()
                })
              )
              .nullish()
          })
        )
        .nullish(),
      investments: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            investmentTypeId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(putApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentsItemNameMax),
            currentValue: zod.number().optional(),
            taxStatus: zod
              .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
              .optional(),
            costBasis: zod.number().optional(),
            orderIndex: zod.number().optional(),
            scenario: zod.any().optional(),
            investmentType: zod
              .object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    putApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentsItemInvestmentTypeNameMax
                  ),
                description: zod
                  .string()
                  .max(
                    putApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentsItemInvestmentTypeDescriptionMax
                  )
                  .nullish(),
                expectedAnnualReturn: zod.object({
                  type: zod.string().nullable(),
                  value: zod.number().nullish(),
                  mean: zod.number().nullish(),
                  stdev: zod.number().nullish(),
                  lower: zod.number().nullish(),
                  upper: zod.number().nullish()
                }),
                expenseRatio: zod.number().optional(),
                expectedAnnualIncome: zod.object({
                  type: zod.string().nullable(),
                  value: zod.number().nullish(),
                  mean: zod.number().nullish(),
                  stdev: zod.number().nullish(),
                  lower: zod.number().nullish(),
                  upper: zod.number().nullish()
                }),
                taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
                isCash: zod.boolean().optional(),
                scenario: zod.any().optional(),
                investments: zod.array(zod.any()).nullish()
              })
              .optional()
          })
        )
        .nullish(),
      eventSeries: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(putApiScenariosScenarioIdInvestmentsIdResponseScenarioEventSeriesItemNameMax),
            description: zod
              .string()
              .max(
                putApiScenariosScenarioIdInvestmentsIdResponseScenarioEventSeriesItemDescriptionMax
              )
              .nullish(),
            eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
            startYear: zod
              .object({
                type: zod.string().nullable(),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .optional(),
            duration: zod
              .object({
                type: zod.string().nullable(),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .optional(),
            referenceEventSeriesId: zod.string().nullish(),
            startTimingType: zod
              .string()
              .max(
                putApiScenariosScenarioIdInvestmentsIdResponseScenarioEventSeriesItemStartTimingTypeMax
              )
              .nullish(),
            isActive: zod.boolean().optional(),
            orderIndex: zod.number().optional(),
            initialAmount: zod.number().nullish(),
            annualChange: zod
              .object({
                type: zod.string().nullable(),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .optional(),
            inflationAdjusted: zod.boolean().optional(),
            userPercentage: zod.number().nullish(),
            isSocialSecurity: zod.boolean().optional(),
            isDiscretionary: zod.boolean().optional(),
            assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
            isGlidePath: zod.boolean().optional(),
            initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
            finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
            maximumCash: zod.number().nullish(),
            targetTaxStatus: zod
              .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
              .optional(),
            scenario: zod.any().optional(),
            referenceEventSeries: zod.any().optional(),
            referencingEventSeries: zod.array(zod.any()).nullish()
          })
        )
        .nullish(),
      strategies: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            strategyType: zod
              .enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion'])
              .optional(),
            name: zod
              .string()
              .min(1)
              .max(putApiScenariosScenarioIdInvestmentsIdResponseScenarioStrategiesItemNameMax),
            description: zod
              .string()
              .max(
                putApiScenariosScenarioIdInvestmentsIdResponseScenarioStrategiesItemDescriptionMax
              )
              .nullish(),
            isActive: zod.boolean().optional(),
            ordering: zod.array(zod.string()).nullish(),
            settings: zod.record(zod.string(), zod.any()).nullish(),
            scenario: zod.any().optional()
          })
        )
        .nullish(),
      scenarioShares: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            sharedWithUserId: zod.string().min(1),
            permission: zod.enum(['ReadOnly', 'ReadWrite']).optional(),
            sharedByUserId: zod.string().min(1),
            isActive: zod.boolean().optional(),
            scenario: zod.any().optional()
          })
        )
        .nullish()
    })
    .optional(),
  investmentType: zod
    .object({
      id: zod.string().nullish(),
      createdAt: zod.string().datetime({}).optional(),
      updatedAt: zod.string().datetime({}).optional(),
      scenarioId: zod.string().min(1),
      name: zod
        .string()
        .min(1)
        .max(putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeNameMax),
      description: zod
        .string()
        .max(putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeDescriptionMax)
        .nullish(),
      expectedAnnualReturn: zod.object({
        type: zod.string().nullable(),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      }),
      expenseRatio: zod.number().optional(),
      expectedAnnualIncome: zod.object({
        type: zod.string().nullable(),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      }),
      taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
      isCash: zod.boolean().optional(),
      scenario: zod
        .object({
          id: zod.string().nullish(),
          createdAt: zod.string().datetime({}).optional(),
          updatedAt: zod.string().datetime({}).optional(),
          name: zod
            .string()
            .min(1)
            .max(putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioNameMax),
          description: zod.string().nullish(),
          ownerId: zod.string().min(1),
          scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
          status: zod.enum(['Draft', 'Complete']).optional(),
          userBirthYear: zod.number().nullish(),
          spouseBirthYear: zod.number().nullish(),
          userLifeExpectancy: zod
            .object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional(),
          spouseLifeExpectancy: zod
            .object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional(),
          financialGoal: zod.number().optional(),
          stateOfResidence: zod
            .string()
            .max(
              putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioStateOfResidenceMax
            )
            .nullish(),
          inflationAssumption: zod
            .object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional(),
          annualRetirementContributionLimit: zod.number().optional(),
          rothOptimizerEnabled: zod.boolean().optional(),
          rothOptimizerStartYear: zod.number().nullish(),
          rothOptimizerEndYear: zod.number().nullish(),
          importSource: zod
            .string()
            .max(
              putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioImportSourceMax
            )
            .nullish(),
          exportCount: zod.number().optional(),
          lastSimulationRun: zod.string().datetime({}).nullish(),
          investmentTypes: zod.array(zod.any()).nullish(),
          investments: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                investmentTypeId: zod.string().min(1),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioInvestmentsItemNameMax
                  ),
                currentValue: zod.number().optional(),
                taxStatus: zod
                  .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                  .optional(),
                costBasis: zod.number().optional(),
                orderIndex: zod.number().optional(),
                scenario: zod.any().optional(),
                investmentType: zod.any().optional()
              })
            )
            .nullish(),
          eventSeries: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioEventSeriesItemNameMax
                  ),
                description: zod
                  .string()
                  .max(
                    putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioEventSeriesItemDescriptionMax
                  )
                  .nullish(),
                eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
                startYear: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                duration: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                referenceEventSeriesId: zod.string().nullish(),
                startTimingType: zod
                  .string()
                  .max(
                    putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioEventSeriesItemStartTimingTypeMax
                  )
                  .nullish(),
                isActive: zod.boolean().optional(),
                orderIndex: zod.number().optional(),
                initialAmount: zod.number().nullish(),
                annualChange: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                inflationAdjusted: zod.boolean().optional(),
                userPercentage: zod.number().nullish(),
                isSocialSecurity: zod.boolean().optional(),
                isDiscretionary: zod.boolean().optional(),
                assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
                isGlidePath: zod.boolean().optional(),
                initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
                finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
                maximumCash: zod.number().nullish(),
                targetTaxStatus: zod
                  .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                  .optional(),
                scenario: zod.any().optional(),
                referenceEventSeries: zod.any().optional(),
                referencingEventSeries: zod.array(zod.any()).nullish()
              })
            )
            .nullish(),
          strategies: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                strategyType: zod
                  .enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion'])
                  .optional(),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioStrategiesItemNameMax
                  ),
                description: zod
                  .string()
                  .max(
                    putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioStrategiesItemDescriptionMax
                  )
                  .nullish(),
                isActive: zod.boolean().optional(),
                ordering: zod.array(zod.string()).nullish(),
                settings: zod.record(zod.string(), zod.any()).nullish(),
                scenario: zod.any().optional()
              })
            )
            .nullish(),
          scenarioShares: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                sharedWithUserId: zod.string().min(1),
                permission: zod.enum(['ReadOnly', 'ReadWrite']).optional(),
                sharedByUserId: zod.string().min(1),
                isActive: zod.boolean().optional(),
                scenario: zod.any().optional()
              })
            )
            .nullish()
        })
        .optional(),
      investments: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            investmentTypeId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(
                putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemNameMax
              ),
            currentValue: zod.number().optional(),
            taxStatus: zod
              .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
              .optional(),
            costBasis: zod.number().optional(),
            orderIndex: zod.number().optional(),
            scenario: zod
              .object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioNameMax
                  ),
                description: zod.string().nullish(),
                ownerId: zod.string().min(1),
                scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
                status: zod.enum(['Draft', 'Complete']).optional(),
                userBirthYear: zod.number().nullish(),
                spouseBirthYear: zod.number().nullish(),
                userLifeExpectancy: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                spouseLifeExpectancy: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                financialGoal: zod.number().optional(),
                stateOfResidence: zod
                  .string()
                  .max(
                    putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioStateOfResidenceMax
                  )
                  .nullish(),
                inflationAssumption: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                annualRetirementContributionLimit: zod.number().optional(),
                rothOptimizerEnabled: zod.boolean().optional(),
                rothOptimizerStartYear: zod.number().nullish(),
                rothOptimizerEndYear: zod.number().nullish(),
                importSource: zod
                  .string()
                  .max(
                    putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioImportSourceMax
                  )
                  .nullish(),
                exportCount: zod.number().optional(),
                lastSimulationRun: zod.string().datetime({}).nullish(),
                investmentTypes: zod.array(zod.any()).nullish(),
                investments: zod.array(zod.any()).nullish(),
                eventSeries: zod
                  .array(
                    zod.object({
                      id: zod.string().nullish(),
                      createdAt: zod.string().datetime({}).optional(),
                      updatedAt: zod.string().datetime({}).optional(),
                      scenarioId: zod.string().min(1),
                      name: zod
                        .string()
                        .min(1)
                        .max(
                          putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemNameMax
                        ),
                      description: zod
                        .string()
                        .max(
                          putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemDescriptionMax
                        )
                        .nullish(),
                      eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
                      startYear: zod
                        .object({
                          type: zod.string().nullable(),
                          value: zod.number().nullish(),
                          mean: zod.number().nullish(),
                          stdev: zod.number().nullish(),
                          lower: zod.number().nullish(),
                          upper: zod.number().nullish()
                        })
                        .optional(),
                      duration: zod
                        .object({
                          type: zod.string().nullable(),
                          value: zod.number().nullish(),
                          mean: zod.number().nullish(),
                          stdev: zod.number().nullish(),
                          lower: zod.number().nullish(),
                          upper: zod.number().nullish()
                        })
                        .optional(),
                      referenceEventSeriesId: zod.string().nullish(),
                      startTimingType: zod
                        .string()
                        .max(
                          putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemStartTimingTypeMax
                        )
                        .nullish(),
                      isActive: zod.boolean().optional(),
                      orderIndex: zod.number().optional(),
                      initialAmount: zod.number().nullish(),
                      annualChange: zod
                        .object({
                          type: zod.string().nullable(),
                          value: zod.number().nullish(),
                          mean: zod.number().nullish(),
                          stdev: zod.number().nullish(),
                          lower: zod.number().nullish(),
                          upper: zod.number().nullish()
                        })
                        .optional(),
                      inflationAdjusted: zod.boolean().optional(),
                      userPercentage: zod.number().nullish(),
                      isSocialSecurity: zod.boolean().optional(),
                      isDiscretionary: zod.boolean().optional(),
                      assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
                      isGlidePath: zod.boolean().optional(),
                      initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
                      finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
                      maximumCash: zod.number().nullish(),
                      targetTaxStatus: zod
                        .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                        .optional(),
                      scenario: zod.any().optional(),
                      referenceEventSeries: zod.any().optional(),
                      referencingEventSeries: zod.array(zod.any()).nullish()
                    })
                  )
                  .nullish(),
                strategies: zod
                  .array(
                    zod.object({
                      id: zod.string().nullish(),
                      createdAt: zod.string().datetime({}).optional(),
                      updatedAt: zod.string().datetime({}).optional(),
                      scenarioId: zod.string().min(1),
                      strategyType: zod
                        .enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion'])
                        .optional(),
                      name: zod
                        .string()
                        .min(1)
                        .max(
                          putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemNameMax
                        ),
                      description: zod
                        .string()
                        .max(
                          putApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemDescriptionMax
                        )
                        .nullish(),
                      isActive: zod.boolean().optional(),
                      ordering: zod.array(zod.string()).nullish(),
                      settings: zod.record(zod.string(), zod.any()).nullish(),
                      scenario: zod.any().optional()
                    })
                  )
                  .nullish(),
                scenarioShares: zod
                  .array(
                    zod.object({
                      id: zod.string().nullish(),
                      createdAt: zod.string().datetime({}).optional(),
                      updatedAt: zod.string().datetime({}).optional(),
                      scenarioId: zod.string().min(1),
                      sharedWithUserId: zod.string().min(1),
                      permission: zod.enum(['ReadOnly', 'ReadWrite']).optional(),
                      sharedByUserId: zod.string().min(1),
                      isActive: zod.boolean().optional(),
                      scenario: zod.any().optional()
                    })
                  )
                  .nullish()
              })
              .optional(),
            investmentType: zod.any().optional()
          })
        )
        .nullish()
    })
    .optional()
});

export const patchApiScenariosScenarioIdInvestmentsIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});

export const patchApiScenariosScenarioIdInvestmentsIdBodyNameMax = 255;

export const patchApiScenariosScenarioIdInvestmentsIdBody = zod.object({
  name: zod.string().max(patchApiScenariosScenarioIdInvestmentsIdBodyNameMax).nullish(),
  currentValue: zod.number().nullish(),
  taxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  costBasis: zod.number().nullish(),
  orderIndex: zod.number().nullish()
});

export const patchApiScenariosScenarioIdInvestmentsIdResponseNameMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseScenarioNameMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseScenarioStateOfResidenceMax = 100;
export const patchApiScenariosScenarioIdInvestmentsIdResponseScenarioImportSourceMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentTypesItemNameMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentTypesItemDescriptionMax = 1000;
export const patchApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentTypesItemInvestmentsItemNameMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentsItemNameMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentsItemInvestmentTypeNameMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentsItemInvestmentTypeDescriptionMax = 1000;
export const patchApiScenariosScenarioIdInvestmentsIdResponseScenarioEventSeriesItemNameMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseScenarioEventSeriesItemDescriptionMax = 1000;
export const patchApiScenariosScenarioIdInvestmentsIdResponseScenarioEventSeriesItemStartTimingTypeMax = 50;
export const patchApiScenariosScenarioIdInvestmentsIdResponseScenarioStrategiesItemNameMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseScenarioStrategiesItemDescriptionMax = 1000;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeNameMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeDescriptionMax = 1000;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioNameMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioStateOfResidenceMax = 100;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioImportSourceMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioInvestmentsItemNameMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioEventSeriesItemNameMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioEventSeriesItemDescriptionMax = 1000;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioEventSeriesItemStartTimingTypeMax = 50;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioStrategiesItemNameMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioStrategiesItemDescriptionMax = 1000;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemNameMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioNameMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioStateOfResidenceMax = 100;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioImportSourceMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemNameMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemDescriptionMax = 1000;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemStartTimingTypeMax = 50;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemNameMax = 255;
export const patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemDescriptionMax = 1000;

export const patchApiScenariosScenarioIdInvestmentsIdResponse = zod.object({
  id: zod.string().nullable(),
  scenarioId: zod.string().min(1),
  investmentTypeId: zod.string().min(1),
  name: zod.string().min(1).max(patchApiScenariosScenarioIdInvestmentsIdResponseNameMax),
  currentValue: zod.number().optional(),
  taxStatus: zod.enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement']).optional(),
  costBasis: zod.number().optional(),
  orderIndex: zod.number().optional(),
  scenario: zod
    .object({
      id: zod.string().nullish(),
      createdAt: zod.string().datetime({}).optional(),
      updatedAt: zod.string().datetime({}).optional(),
      name: zod
        .string()
        .min(1)
        .max(patchApiScenariosScenarioIdInvestmentsIdResponseScenarioNameMax),
      description: zod.string().nullish(),
      ownerId: zod.string().min(1),
      scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
      status: zod.enum(['Draft', 'Complete']).optional(),
      userBirthYear: zod.number().nullish(),
      spouseBirthYear: zod.number().nullish(),
      userLifeExpectancy: zod
        .object({
          type: zod.string().nullable(),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .optional(),
      spouseLifeExpectancy: zod
        .object({
          type: zod.string().nullable(),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .optional(),
      financialGoal: zod.number().optional(),
      stateOfResidence: zod
        .string()
        .max(patchApiScenariosScenarioIdInvestmentsIdResponseScenarioStateOfResidenceMax)
        .nullish(),
      inflationAssumption: zod
        .object({
          type: zod.string().nullable(),
          value: zod.number().nullish(),
          mean: zod.number().nullish(),
          stdev: zod.number().nullish(),
          lower: zod.number().nullish(),
          upper: zod.number().nullish()
        })
        .optional(),
      annualRetirementContributionLimit: zod.number().optional(),
      rothOptimizerEnabled: zod.boolean().optional(),
      rothOptimizerStartYear: zod.number().nullish(),
      rothOptimizerEndYear: zod.number().nullish(),
      importSource: zod
        .string()
        .max(patchApiScenariosScenarioIdInvestmentsIdResponseScenarioImportSourceMax)
        .nullish(),
      exportCount: zod.number().optional(),
      lastSimulationRun: zod.string().datetime({}).nullish(),
      investmentTypes: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(
                patchApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentTypesItemNameMax
              ),
            description: zod
              .string()
              .max(
                patchApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentTypesItemDescriptionMax
              )
              .nullish(),
            expectedAnnualReturn: zod.object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            }),
            expenseRatio: zod.number().optional(),
            expectedAnnualIncome: zod.object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            }),
            taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
            isCash: zod.boolean().optional(),
            scenario: zod.any().optional(),
            investments: zod
              .array(
                zod.object({
                  id: zod.string().nullish(),
                  createdAt: zod.string().datetime({}).optional(),
                  updatedAt: zod.string().datetime({}).optional(),
                  scenarioId: zod.string().min(1),
                  investmentTypeId: zod.string().min(1),
                  name: zod
                    .string()
                    .min(1)
                    .max(
                      patchApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentTypesItemInvestmentsItemNameMax
                    ),
                  currentValue: zod.number().optional(),
                  taxStatus: zod
                    .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                    .optional(),
                  costBasis: zod.number().optional(),
                  orderIndex: zod.number().optional(),
                  scenario: zod.any().optional(),
                  investmentType: zod.any().optional()
                })
              )
              .nullish()
          })
        )
        .nullish(),
      investments: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            investmentTypeId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(patchApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentsItemNameMax),
            currentValue: zod.number().optional(),
            taxStatus: zod
              .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
              .optional(),
            costBasis: zod.number().optional(),
            orderIndex: zod.number().optional(),
            scenario: zod.any().optional(),
            investmentType: zod
              .object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    patchApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentsItemInvestmentTypeNameMax
                  ),
                description: zod
                  .string()
                  .max(
                    patchApiScenariosScenarioIdInvestmentsIdResponseScenarioInvestmentsItemInvestmentTypeDescriptionMax
                  )
                  .nullish(),
                expectedAnnualReturn: zod.object({
                  type: zod.string().nullable(),
                  value: zod.number().nullish(),
                  mean: zod.number().nullish(),
                  stdev: zod.number().nullish(),
                  lower: zod.number().nullish(),
                  upper: zod.number().nullish()
                }),
                expenseRatio: zod.number().optional(),
                expectedAnnualIncome: zod.object({
                  type: zod.string().nullable(),
                  value: zod.number().nullish(),
                  mean: zod.number().nullish(),
                  stdev: zod.number().nullish(),
                  lower: zod.number().nullish(),
                  upper: zod.number().nullish()
                }),
                taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
                isCash: zod.boolean().optional(),
                scenario: zod.any().optional(),
                investments: zod.array(zod.any()).nullish()
              })
              .optional()
          })
        )
        .nullish(),
      eventSeries: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(patchApiScenariosScenarioIdInvestmentsIdResponseScenarioEventSeriesItemNameMax),
            description: zod
              .string()
              .max(
                patchApiScenariosScenarioIdInvestmentsIdResponseScenarioEventSeriesItemDescriptionMax
              )
              .nullish(),
            eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
            startYear: zod
              .object({
                type: zod.string().nullable(),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .optional(),
            duration: zod
              .object({
                type: zod.string().nullable(),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .optional(),
            referenceEventSeriesId: zod.string().nullish(),
            startTimingType: zod
              .string()
              .max(
                patchApiScenariosScenarioIdInvestmentsIdResponseScenarioEventSeriesItemStartTimingTypeMax
              )
              .nullish(),
            isActive: zod.boolean().optional(),
            orderIndex: zod.number().optional(),
            initialAmount: zod.number().nullish(),
            annualChange: zod
              .object({
                type: zod.string().nullable(),
                value: zod.number().nullish(),
                mean: zod.number().nullish(),
                stdev: zod.number().nullish(),
                lower: zod.number().nullish(),
                upper: zod.number().nullish()
              })
              .optional(),
            inflationAdjusted: zod.boolean().optional(),
            userPercentage: zod.number().nullish(),
            isSocialSecurity: zod.boolean().optional(),
            isDiscretionary: zod.boolean().optional(),
            assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
            isGlidePath: zod.boolean().optional(),
            initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
            finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
            maximumCash: zod.number().nullish(),
            targetTaxStatus: zod
              .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
              .optional(),
            scenario: zod.any().optional(),
            referenceEventSeries: zod.any().optional(),
            referencingEventSeries: zod.array(zod.any()).nullish()
          })
        )
        .nullish(),
      strategies: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            strategyType: zod
              .enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion'])
              .optional(),
            name: zod
              .string()
              .min(1)
              .max(patchApiScenariosScenarioIdInvestmentsIdResponseScenarioStrategiesItemNameMax),
            description: zod
              .string()
              .max(
                patchApiScenariosScenarioIdInvestmentsIdResponseScenarioStrategiesItemDescriptionMax
              )
              .nullish(),
            isActive: zod.boolean().optional(),
            ordering: zod.array(zod.string()).nullish(),
            settings: zod.record(zod.string(), zod.any()).nullish(),
            scenario: zod.any().optional()
          })
        )
        .nullish(),
      scenarioShares: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            sharedWithUserId: zod.string().min(1),
            permission: zod.enum(['ReadOnly', 'ReadWrite']).optional(),
            sharedByUserId: zod.string().min(1),
            isActive: zod.boolean().optional(),
            scenario: zod.any().optional()
          })
        )
        .nullish()
    })
    .optional(),
  investmentType: zod
    .object({
      id: zod.string().nullish(),
      createdAt: zod.string().datetime({}).optional(),
      updatedAt: zod.string().datetime({}).optional(),
      scenarioId: zod.string().min(1),
      name: zod
        .string()
        .min(1)
        .max(patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeNameMax),
      description: zod
        .string()
        .max(patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeDescriptionMax)
        .nullish(),
      expectedAnnualReturn: zod.object({
        type: zod.string().nullable(),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      }),
      expenseRatio: zod.number().optional(),
      expectedAnnualIncome: zod.object({
        type: zod.string().nullable(),
        value: zod.number().nullish(),
        mean: zod.number().nullish(),
        stdev: zod.number().nullish(),
        lower: zod.number().nullish(),
        upper: zod.number().nullish()
      }),
      taxability: zod.enum(['Taxable', 'TaxExempt']).optional(),
      isCash: zod.boolean().optional(),
      scenario: zod
        .object({
          id: zod.string().nullish(),
          createdAt: zod.string().datetime({}).optional(),
          updatedAt: zod.string().datetime({}).optional(),
          name: zod
            .string()
            .min(1)
            .max(patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioNameMax),
          description: zod.string().nullish(),
          ownerId: zod.string().min(1),
          scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
          status: zod.enum(['Draft', 'Complete']).optional(),
          userBirthYear: zod.number().nullish(),
          spouseBirthYear: zod.number().nullish(),
          userLifeExpectancy: zod
            .object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional(),
          spouseLifeExpectancy: zod
            .object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional(),
          financialGoal: zod.number().optional(),
          stateOfResidence: zod
            .string()
            .max(
              patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioStateOfResidenceMax
            )
            .nullish(),
          inflationAssumption: zod
            .object({
              type: zod.string().nullable(),
              value: zod.number().nullish(),
              mean: zod.number().nullish(),
              stdev: zod.number().nullish(),
              lower: zod.number().nullish(),
              upper: zod.number().nullish()
            })
            .optional(),
          annualRetirementContributionLimit: zod.number().optional(),
          rothOptimizerEnabled: zod.boolean().optional(),
          rothOptimizerStartYear: zod.number().nullish(),
          rothOptimizerEndYear: zod.number().nullish(),
          importSource: zod
            .string()
            .max(
              patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioImportSourceMax
            )
            .nullish(),
          exportCount: zod.number().optional(),
          lastSimulationRun: zod.string().datetime({}).nullish(),
          investmentTypes: zod.array(zod.any()).nullish(),
          investments: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                investmentTypeId: zod.string().min(1),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioInvestmentsItemNameMax
                  ),
                currentValue: zod.number().optional(),
                taxStatus: zod
                  .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                  .optional(),
                costBasis: zod.number().optional(),
                orderIndex: zod.number().optional(),
                scenario: zod.any().optional(),
                investmentType: zod.any().optional()
              })
            )
            .nullish(),
          eventSeries: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioEventSeriesItemNameMax
                  ),
                description: zod
                  .string()
                  .max(
                    patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioEventSeriesItemDescriptionMax
                  )
                  .nullish(),
                eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
                startYear: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                duration: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                referenceEventSeriesId: zod.string().nullish(),
                startTimingType: zod
                  .string()
                  .max(
                    patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioEventSeriesItemStartTimingTypeMax
                  )
                  .nullish(),
                isActive: zod.boolean().optional(),
                orderIndex: zod.number().optional(),
                initialAmount: zod.number().nullish(),
                annualChange: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                inflationAdjusted: zod.boolean().optional(),
                userPercentage: zod.number().nullish(),
                isSocialSecurity: zod.boolean().optional(),
                isDiscretionary: zod.boolean().optional(),
                assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
                isGlidePath: zod.boolean().optional(),
                initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
                finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
                maximumCash: zod.number().nullish(),
                targetTaxStatus: zod
                  .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                  .optional(),
                scenario: zod.any().optional(),
                referenceEventSeries: zod.any().optional(),
                referencingEventSeries: zod.array(zod.any()).nullish()
              })
            )
            .nullish(),
          strategies: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                strategyType: zod
                  .enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion'])
                  .optional(),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioStrategiesItemNameMax
                  ),
                description: zod
                  .string()
                  .max(
                    patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeScenarioStrategiesItemDescriptionMax
                  )
                  .nullish(),
                isActive: zod.boolean().optional(),
                ordering: zod.array(zod.string()).nullish(),
                settings: zod.record(zod.string(), zod.any()).nullish(),
                scenario: zod.any().optional()
              })
            )
            .nullish(),
          scenarioShares: zod
            .array(
              zod.object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                scenarioId: zod.string().min(1),
                sharedWithUserId: zod.string().min(1),
                permission: zod.enum(['ReadOnly', 'ReadWrite']).optional(),
                sharedByUserId: zod.string().min(1),
                isActive: zod.boolean().optional(),
                scenario: zod.any().optional()
              })
            )
            .nullish()
        })
        .optional(),
      investments: zod
        .array(
          zod.object({
            id: zod.string().nullish(),
            createdAt: zod.string().datetime({}).optional(),
            updatedAt: zod.string().datetime({}).optional(),
            scenarioId: zod.string().min(1),
            investmentTypeId: zod.string().min(1),
            name: zod
              .string()
              .min(1)
              .max(
                patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemNameMax
              ),
            currentValue: zod.number().optional(),
            taxStatus: zod
              .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
              .optional(),
            costBasis: zod.number().optional(),
            orderIndex: zod.number().optional(),
            scenario: zod
              .object({
                id: zod.string().nullish(),
                createdAt: zod.string().datetime({}).optional(),
                updatedAt: zod.string().datetime({}).optional(),
                name: zod
                  .string()
                  .min(1)
                  .max(
                    patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioNameMax
                  ),
                description: zod.string().nullish(),
                ownerId: zod.string().min(1),
                scenarioType: zod.enum(['Individual', 'MarriedCouple']).optional(),
                status: zod.enum(['Draft', 'Complete']).optional(),
                userBirthYear: zod.number().nullish(),
                spouseBirthYear: zod.number().nullish(),
                userLifeExpectancy: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                spouseLifeExpectancy: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                financialGoal: zod.number().optional(),
                stateOfResidence: zod
                  .string()
                  .max(
                    patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioStateOfResidenceMax
                  )
                  .nullish(),
                inflationAssumption: zod
                  .object({
                    type: zod.string().nullable(),
                    value: zod.number().nullish(),
                    mean: zod.number().nullish(),
                    stdev: zod.number().nullish(),
                    lower: zod.number().nullish(),
                    upper: zod.number().nullish()
                  })
                  .optional(),
                annualRetirementContributionLimit: zod.number().optional(),
                rothOptimizerEnabled: zod.boolean().optional(),
                rothOptimizerStartYear: zod.number().nullish(),
                rothOptimizerEndYear: zod.number().nullish(),
                importSource: zod
                  .string()
                  .max(
                    patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioImportSourceMax
                  )
                  .nullish(),
                exportCount: zod.number().optional(),
                lastSimulationRun: zod.string().datetime({}).nullish(),
                investmentTypes: zod.array(zod.any()).nullish(),
                investments: zod.array(zod.any()).nullish(),
                eventSeries: zod
                  .array(
                    zod.object({
                      id: zod.string().nullish(),
                      createdAt: zod.string().datetime({}).optional(),
                      updatedAt: zod.string().datetime({}).optional(),
                      scenarioId: zod.string().min(1),
                      name: zod
                        .string()
                        .min(1)
                        .max(
                          patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemNameMax
                        ),
                      description: zod
                        .string()
                        .max(
                          patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemDescriptionMax
                        )
                        .nullish(),
                      eventType: zod.enum(['Income', 'Expense', 'Invest', 'Rebalance']).optional(),
                      startYear: zod
                        .object({
                          type: zod.string().nullable(),
                          value: zod.number().nullish(),
                          mean: zod.number().nullish(),
                          stdev: zod.number().nullish(),
                          lower: zod.number().nullish(),
                          upper: zod.number().nullish()
                        })
                        .optional(),
                      duration: zod
                        .object({
                          type: zod.string().nullable(),
                          value: zod.number().nullish(),
                          mean: zod.number().nullish(),
                          stdev: zod.number().nullish(),
                          lower: zod.number().nullish(),
                          upper: zod.number().nullish()
                        })
                        .optional(),
                      referenceEventSeriesId: zod.string().nullish(),
                      startTimingType: zod
                        .string()
                        .max(
                          patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioEventSeriesItemStartTimingTypeMax
                        )
                        .nullish(),
                      isActive: zod.boolean().optional(),
                      orderIndex: zod.number().optional(),
                      initialAmount: zod.number().nullish(),
                      annualChange: zod
                        .object({
                          type: zod.string().nullable(),
                          value: zod.number().nullish(),
                          mean: zod.number().nullish(),
                          stdev: zod.number().nullish(),
                          lower: zod.number().nullish(),
                          upper: zod.number().nullish()
                        })
                        .optional(),
                      inflationAdjusted: zod.boolean().optional(),
                      userPercentage: zod.number().nullish(),
                      isSocialSecurity: zod.boolean().optional(),
                      isDiscretionary: zod.boolean().optional(),
                      assetAllocation: zod.record(zod.string(), zod.number()).nullish(),
                      isGlidePath: zod.boolean().optional(),
                      initialAllocation: zod.record(zod.string(), zod.number()).nullish(),
                      finalAllocation: zod.record(zod.string(), zod.number()).nullish(),
                      maximumCash: zod.number().nullish(),
                      targetTaxStatus: zod
                        .enum(['NonRetirement', 'PreTaxRetirement', 'AfterTaxRetirement'])
                        .optional(),
                      scenario: zod.any().optional(),
                      referenceEventSeries: zod.any().optional(),
                      referencingEventSeries: zod.array(zod.any()).nullish()
                    })
                  )
                  .nullish(),
                strategies: zod
                  .array(
                    zod.object({
                      id: zod.string().nullish(),
                      createdAt: zod.string().datetime({}).optional(),
                      updatedAt: zod.string().datetime({}).optional(),
                      scenarioId: zod.string().min(1),
                      strategyType: zod
                        .enum(['Spending', 'ExpenseWithdrawal', 'Rmd', 'RothConversion'])
                        .optional(),
                      name: zod
                        .string()
                        .min(1)
                        .max(
                          patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemNameMax
                        ),
                      description: zod
                        .string()
                        .max(
                          patchApiScenariosScenarioIdInvestmentsIdResponseInvestmentTypeInvestmentsItemScenarioStrategiesItemDescriptionMax
                        )
                        .nullish(),
                      isActive: zod.boolean().optional(),
                      ordering: zod.array(zod.string()).nullish(),
                      settings: zod.record(zod.string(), zod.any()).nullish(),
                      scenario: zod.any().optional()
                    })
                  )
                  .nullish(),
                scenarioShares: zod
                  .array(
                    zod.object({
                      id: zod.string().nullish(),
                      createdAt: zod.string().datetime({}).optional(),
                      updatedAt: zod.string().datetime({}).optional(),
                      scenarioId: zod.string().min(1),
                      sharedWithUserId: zod.string().min(1),
                      permission: zod.enum(['ReadOnly', 'ReadWrite']).optional(),
                      sharedByUserId: zod.string().min(1),
                      isActive: zod.boolean().optional(),
                      scenario: zod.any().optional()
                    })
                  )
                  .nullish()
              })
              .optional(),
            investmentType: zod.any().optional()
          })
        )
        .nullish()
    })
    .optional()
});

export const deleteApiScenariosScenarioIdInvestmentsIdParams = zod.object({
  scenarioId: zod.string(),
  id: zod.string()
});
