/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * ScenarioManager.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * OpenAPI spec version: 1.0
 */
import { createMutation, createQuery } from '@tanstack/svelte-query';
import type {
  CreateMutationOptions,
  CreateMutationResult,
  CreateQueryOptions,
  CreateQueryResult,
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey
} from '@tanstack/svelte-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  CreateInvestmentRequest,
  InvestmentResponse,
  UpdateInvestmentRequest
} from '../scenarioManagerApiVersion1000CultureNeutralPublicKeyTokenNull.schemas';

export const postApiScenariosScenarioIdInvestments = (
  scenarioId: string,
  createInvestmentRequest: CreateInvestmentRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<InvestmentResponse>> => {
  return axios.post(`/api/scenarios/${scenarioId}/investments`, createInvestmentRequest, options);
};

export const getPostApiScenariosScenarioIdInvestmentsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof postApiScenariosScenarioIdInvestments>>,
    TError,
    { scenarioId: string; data: CreateInvestmentRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof postApiScenariosScenarioIdInvestments>>,
  TError,
  { scenarioId: string; data: CreateInvestmentRequest },
  TContext
> => {
  const mutationKey = ['postApiScenariosScenarioIdInvestments'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiScenariosScenarioIdInvestments>>,
    { scenarioId: string; data: CreateInvestmentRequest }
  > = (props) => {
    const { scenarioId, data } = props ?? {};

    return postApiScenariosScenarioIdInvestments(scenarioId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiScenariosScenarioIdInvestmentsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiScenariosScenarioIdInvestments>>
>;
export type PostApiScenariosScenarioIdInvestmentsMutationBody = CreateInvestmentRequest;
export type PostApiScenariosScenarioIdInvestmentsMutationError = AxiosError<unknown>;

export const createPostApiScenariosScenarioIdInvestments = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof postApiScenariosScenarioIdInvestments>>,
      TError,
      { scenarioId: string; data: CreateInvestmentRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateMutationResult<
  Awaited<ReturnType<typeof postApiScenariosScenarioIdInvestments>>,
  TError,
  { scenarioId: string; data: CreateInvestmentRequest },
  TContext
> => {
  const mutationOptions = getPostApiScenariosScenarioIdInvestmentsMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
export const getApiScenariosScenarioIdInvestments = (
  scenarioId: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<InvestmentResponse[]>> => {
  return axios.get(`/api/scenarios/${scenarioId}/investments`, options);
};

export const getGetApiScenariosScenarioIdInvestmentsQueryKey = (scenarioId?: string) => {
  return [`/api/scenarios/${scenarioId}/investments`] as const;
};

export const getGetApiScenariosScenarioIdInvestmentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestments>>,
  TError = AxiosError<unknown>
>(
  scenarioId: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestments>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiScenariosScenarioIdInvestmentsQueryKey(scenarioId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestments>>
  > = ({ signal }) => getApiScenariosScenarioIdInvestments(scenarioId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!scenarioId,
    useQuery: true,
    staleTime: 300000,
    ...queryOptions
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestments>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiScenariosScenarioIdInvestmentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestments>>
>;
export type GetApiScenariosScenarioIdInvestmentsQueryError = AxiosError<unknown>;

export function createGetApiScenariosScenarioIdInvestments<
  TData = Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestments>>,
  TError = AxiosError<unknown>
>(
  scenarioId: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestments>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiScenariosScenarioIdInvestmentsQueryOptions(scenarioId, options);

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiScenariosScenarioIdInvestmentsId = (
  scenarioId: string,
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<InvestmentResponse>> => {
  return axios.get(`/api/scenarios/${scenarioId}/investments/${id}`, options);
};

export const getGetApiScenariosScenarioIdInvestmentsIdQueryKey = (
  scenarioId?: string,
  id?: string
) => {
  return [`/api/scenarios/${scenarioId}/investments/${id}`] as const;
};

export const getGetApiScenariosScenarioIdInvestmentsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentsId>>,
  TError = AxiosError<unknown>
>(
  scenarioId: string,
  id: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentsId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiScenariosScenarioIdInvestmentsIdQueryKey(scenarioId, id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentsId>>
  > = ({ signal }) =>
    getApiScenariosScenarioIdInvestmentsId(scenarioId, id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(scenarioId && id),
    useQuery: true,
    staleTime: 300000,
    ...queryOptions
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiScenariosScenarioIdInvestmentsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentsId>>
>;
export type GetApiScenariosScenarioIdInvestmentsIdQueryError = AxiosError<unknown>;

export function createGetApiScenariosScenarioIdInvestmentsId<
  TData = Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentsId>>,
  TError = AxiosError<unknown>
>(
  scenarioId: string,
  id: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof getApiScenariosScenarioIdInvestmentsId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiScenariosScenarioIdInvestmentsIdQueryOptions(
    scenarioId,
    id,
    options
  );

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiScenariosScenarioIdInvestmentsId = (
  scenarioId: string,
  id: string,
  createInvestmentRequest: CreateInvestmentRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<InvestmentResponse>> => {
  return axios.put(
    `/api/scenarios/${scenarioId}/investments/${id}`,
    createInvestmentRequest,
    options
  );
};

export const getPutApiScenariosScenarioIdInvestmentsIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof putApiScenariosScenarioIdInvestmentsId>>,
    TError,
    { scenarioId: string; id: string; data: CreateInvestmentRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof putApiScenariosScenarioIdInvestmentsId>>,
  TError,
  { scenarioId: string; id: string; data: CreateInvestmentRequest },
  TContext
> => {
  const mutationKey = ['putApiScenariosScenarioIdInvestmentsId'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiScenariosScenarioIdInvestmentsId>>,
    { scenarioId: string; id: string; data: CreateInvestmentRequest }
  > = (props) => {
    const { scenarioId, id, data } = props ?? {};

    return putApiScenariosScenarioIdInvestmentsId(scenarioId, id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiScenariosScenarioIdInvestmentsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiScenariosScenarioIdInvestmentsId>>
>;
export type PutApiScenariosScenarioIdInvestmentsIdMutationBody = CreateInvestmentRequest;
export type PutApiScenariosScenarioIdInvestmentsIdMutationError = AxiosError<unknown>;

export const createPutApiScenariosScenarioIdInvestmentsId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof putApiScenariosScenarioIdInvestmentsId>>,
      TError,
      { scenarioId: string; id: string; data: CreateInvestmentRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateMutationResult<
  Awaited<ReturnType<typeof putApiScenariosScenarioIdInvestmentsId>>,
  TError,
  { scenarioId: string; id: string; data: CreateInvestmentRequest },
  TContext
> => {
  const mutationOptions = getPutApiScenariosScenarioIdInvestmentsIdMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
export const patchApiScenariosScenarioIdInvestmentsId = (
  scenarioId: string,
  id: string,
  updateInvestmentRequest: UpdateInvestmentRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<InvestmentResponse>> => {
  return axios.patch(
    `/api/scenarios/${scenarioId}/investments/${id}`,
    updateInvestmentRequest,
    options
  );
};

export const getPatchApiScenariosScenarioIdInvestmentsIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof patchApiScenariosScenarioIdInvestmentsId>>,
    TError,
    { scenarioId: string; id: string; data: UpdateInvestmentRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof patchApiScenariosScenarioIdInvestmentsId>>,
  TError,
  { scenarioId: string; id: string; data: UpdateInvestmentRequest },
  TContext
> => {
  const mutationKey = ['patchApiScenariosScenarioIdInvestmentsId'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchApiScenariosScenarioIdInvestmentsId>>,
    { scenarioId: string; id: string; data: UpdateInvestmentRequest }
  > = (props) => {
    const { scenarioId, id, data } = props ?? {};

    return patchApiScenariosScenarioIdInvestmentsId(scenarioId, id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchApiScenariosScenarioIdInvestmentsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchApiScenariosScenarioIdInvestmentsId>>
>;
export type PatchApiScenariosScenarioIdInvestmentsIdMutationBody = UpdateInvestmentRequest;
export type PatchApiScenariosScenarioIdInvestmentsIdMutationError = AxiosError<unknown>;

export const createPatchApiScenariosScenarioIdInvestmentsId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof patchApiScenariosScenarioIdInvestmentsId>>,
      TError,
      { scenarioId: string; id: string; data: UpdateInvestmentRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateMutationResult<
  Awaited<ReturnType<typeof patchApiScenariosScenarioIdInvestmentsId>>,
  TError,
  { scenarioId: string; id: string; data: UpdateInvestmentRequest },
  TContext
> => {
  const mutationOptions = getPatchApiScenariosScenarioIdInvestmentsIdMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
export const deleteApiScenariosScenarioIdInvestmentsId = (
  scenarioId: string,
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<null>> => {
  return axios.delete(`/api/scenarios/${scenarioId}/investments/${id}`, options);
};

export const getDeleteApiScenariosScenarioIdInvestmentsIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof deleteApiScenariosScenarioIdInvestmentsId>>,
    TError,
    { scenarioId: string; id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof deleteApiScenariosScenarioIdInvestmentsId>>,
  TError,
  { scenarioId: string; id: string },
  TContext
> => {
  const mutationKey = ['deleteApiScenariosScenarioIdInvestmentsId'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiScenariosScenarioIdInvestmentsId>>,
    { scenarioId: string; id: string }
  > = (props) => {
    const { scenarioId, id } = props ?? {};

    return deleteApiScenariosScenarioIdInvestmentsId(scenarioId, id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiScenariosScenarioIdInvestmentsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiScenariosScenarioIdInvestmentsId>>
>;

export type DeleteApiScenariosScenarioIdInvestmentsIdMutationError = AxiosError<unknown>;

export const createDeleteApiScenariosScenarioIdInvestmentsId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof deleteApiScenariosScenarioIdInvestmentsId>>,
      TError,
      { scenarioId: string; id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateMutationResult<
  Awaited<ReturnType<typeof deleteApiScenariosScenarioIdInvestmentsId>>,
  TError,
  { scenarioId: string; id: string },
  TContext
> => {
  const mutationOptions = getDeleteApiScenariosScenarioIdInvestmentsIdMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
