/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Shallowfind
 * Shallowfind Financial Planner
 * OpenAPI spec version: 0.0.1
 */
import { z as zod } from 'zod';

/**
 * ViewSet for admin users to manage all user accounts.
 */
export const adminUsersListResponseEmailMax = 254;
export const adminUsersListResponseFirstNameMax = 150;
export const adminUsersListResponseLastNameMax = 150;

export const adminUsersListResponseItem = zod.object({
  id: zod.number(),
  email: zod
    .string()
    .email()
    .max(adminUsersListResponseEmailMax)
    .describe('Required. Enter a valid email address.'),
  first_name: zod.string().max(adminUsersListResponseFirstNameMax).optional(),
  last_name: zod.string().max(adminUsersListResponseLastNameMax).optional(),
  password: zod.string().optional(),
  password_confirm: zod.string().optional(),
  is_active: zod
    .boolean()
    .optional()
    .describe(
      'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'
    ),
  is_staff: zod
    .boolean()
    .optional()
    .describe('Designates whether the user can log into this admin site.'),
  is_superuser: zod
    .boolean()
    .optional()
    .describe('Designates that this user has all permissions without explicitly assigning them.'),
  date_joined: zod.string().datetime({}),
  last_login: zod.string().datetime({}).nullable()
});
export const adminUsersListResponse = zod.array(adminUsersListResponseItem);

/**
 * ViewSet for admin users to manage all user accounts.
 */
export const adminUsersCreateBodyEmailMax = 254;
export const adminUsersCreateBodyFirstNameMax = 150;
export const adminUsersCreateBodyLastNameMax = 150;

export const adminUsersCreateBody = zod.object({
  email: zod
    .string()
    .email()
    .max(adminUsersCreateBodyEmailMax)
    .describe('Required. Enter a valid email address.'),
  first_name: zod.string().max(adminUsersCreateBodyFirstNameMax).optional(),
  last_name: zod.string().max(adminUsersCreateBodyLastNameMax).optional(),
  password: zod.string().optional(),
  password_confirm: zod.string().optional(),
  is_active: zod
    .boolean()
    .optional()
    .describe(
      'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'
    ),
  is_staff: zod
    .boolean()
    .optional()
    .describe('Designates whether the user can log into this admin site.'),
  is_superuser: zod
    .boolean()
    .optional()
    .describe('Designates that this user has all permissions without explicitly assigning them.')
});

/**
 * ViewSet for admin users to manage all user accounts.
 */
export const adminUsersRetrieveParams = zod.object({
  id: zod.number().describe('A unique integer value identifying this user.')
});

export const adminUsersRetrieveResponseEmailMax = 254;
export const adminUsersRetrieveResponseFirstNameMax = 150;
export const adminUsersRetrieveResponseLastNameMax = 150;

export const adminUsersRetrieveResponse = zod.object({
  id: zod.number(),
  email: zod
    .string()
    .email()
    .max(adminUsersRetrieveResponseEmailMax)
    .describe('Required. Enter a valid email address.'),
  first_name: zod.string().max(adminUsersRetrieveResponseFirstNameMax).optional(),
  last_name: zod.string().max(adminUsersRetrieveResponseLastNameMax).optional(),
  password: zod.string().optional(),
  password_confirm: zod.string().optional(),
  is_active: zod
    .boolean()
    .optional()
    .describe(
      'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'
    ),
  is_staff: zod
    .boolean()
    .optional()
    .describe('Designates whether the user can log into this admin site.'),
  is_superuser: zod
    .boolean()
    .optional()
    .describe('Designates that this user has all permissions without explicitly assigning them.'),
  date_joined: zod.string().datetime({}),
  last_login: zod.string().datetime({}).nullable()
});

/**
 * ViewSet for admin users to manage all user accounts.
 */
export const adminUsersUpdateParams = zod.object({
  id: zod.number().describe('A unique integer value identifying this user.')
});

export const adminUsersUpdateBodyEmailMax = 254;
export const adminUsersUpdateBodyFirstNameMax = 150;
export const adminUsersUpdateBodyLastNameMax = 150;

export const adminUsersUpdateBody = zod.object({
  email: zod
    .string()
    .email()
    .max(adminUsersUpdateBodyEmailMax)
    .describe('Required. Enter a valid email address.'),
  first_name: zod.string().max(adminUsersUpdateBodyFirstNameMax).optional(),
  last_name: zod.string().max(adminUsersUpdateBodyLastNameMax).optional(),
  password: zod.string().optional(),
  password_confirm: zod.string().optional(),
  is_active: zod
    .boolean()
    .optional()
    .describe(
      'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'
    ),
  is_staff: zod
    .boolean()
    .optional()
    .describe('Designates whether the user can log into this admin site.'),
  is_superuser: zod
    .boolean()
    .optional()
    .describe('Designates that this user has all permissions without explicitly assigning them.')
});

export const adminUsersUpdateResponseEmailMax = 254;
export const adminUsersUpdateResponseFirstNameMax = 150;
export const adminUsersUpdateResponseLastNameMax = 150;

export const adminUsersUpdateResponse = zod.object({
  id: zod.number(),
  email: zod
    .string()
    .email()
    .max(adminUsersUpdateResponseEmailMax)
    .describe('Required. Enter a valid email address.'),
  first_name: zod.string().max(adminUsersUpdateResponseFirstNameMax).optional(),
  last_name: zod.string().max(adminUsersUpdateResponseLastNameMax).optional(),
  password: zod.string().optional(),
  password_confirm: zod.string().optional(),
  is_active: zod
    .boolean()
    .optional()
    .describe(
      'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'
    ),
  is_staff: zod
    .boolean()
    .optional()
    .describe('Designates whether the user can log into this admin site.'),
  is_superuser: zod
    .boolean()
    .optional()
    .describe('Designates that this user has all permissions without explicitly assigning them.'),
  date_joined: zod.string().datetime({}),
  last_login: zod.string().datetime({}).nullable()
});

/**
 * ViewSet for admin users to manage all user accounts.
 */
export const adminUsersPartialUpdateParams = zod.object({
  id: zod.number().describe('A unique integer value identifying this user.')
});

export const adminUsersPartialUpdateBodyEmailMax = 254;
export const adminUsersPartialUpdateBodyFirstNameMax = 150;
export const adminUsersPartialUpdateBodyLastNameMax = 150;

export const adminUsersPartialUpdateBody = zod.object({
  email: zod
    .string()
    .email()
    .max(adminUsersPartialUpdateBodyEmailMax)
    .optional()
    .describe('Required. Enter a valid email address.'),
  first_name: zod.string().max(adminUsersPartialUpdateBodyFirstNameMax).optional(),
  last_name: zod.string().max(adminUsersPartialUpdateBodyLastNameMax).optional(),
  password: zod.string().optional(),
  password_confirm: zod.string().optional(),
  is_active: zod
    .boolean()
    .optional()
    .describe(
      'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'
    ),
  is_staff: zod
    .boolean()
    .optional()
    .describe('Designates whether the user can log into this admin site.'),
  is_superuser: zod
    .boolean()
    .optional()
    .describe('Designates that this user has all permissions without explicitly assigning them.')
});

export const adminUsersPartialUpdateResponseEmailMax = 254;
export const adminUsersPartialUpdateResponseFirstNameMax = 150;
export const adminUsersPartialUpdateResponseLastNameMax = 150;

export const adminUsersPartialUpdateResponse = zod.object({
  id: zod.number(),
  email: zod
    .string()
    .email()
    .max(adminUsersPartialUpdateResponseEmailMax)
    .describe('Required. Enter a valid email address.'),
  first_name: zod.string().max(adminUsersPartialUpdateResponseFirstNameMax).optional(),
  last_name: zod.string().max(adminUsersPartialUpdateResponseLastNameMax).optional(),
  password: zod.string().optional(),
  password_confirm: zod.string().optional(),
  is_active: zod
    .boolean()
    .optional()
    .describe(
      'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'
    ),
  is_staff: zod
    .boolean()
    .optional()
    .describe('Designates whether the user can log into this admin site.'),
  is_superuser: zod
    .boolean()
    .optional()
    .describe('Designates that this user has all permissions without explicitly assigning them.'),
  date_joined: zod.string().datetime({}),
  last_login: zod.string().datetime({}).nullable()
});

/**
 * ViewSet for admin users to manage all user accounts.
 */
export const adminUsersDestroyParams = zod.object({
  id: zod.number().describe('A unique integer value identifying this user.')
});

/**
 * Activate a user account.
 */
export const adminUsersActivateCreateParams = zod.object({
  id: zod.number().describe('A unique integer value identifying this user.')
});

export const adminUsersActivateCreateBodyEmailMax = 254;
export const adminUsersActivateCreateBodyFirstNameMax = 150;
export const adminUsersActivateCreateBodyLastNameMax = 150;

export const adminUsersActivateCreateBody = zod.object({
  email: zod
    .string()
    .email()
    .max(adminUsersActivateCreateBodyEmailMax)
    .describe('Required. Enter a valid email address.'),
  first_name: zod.string().max(adminUsersActivateCreateBodyFirstNameMax).optional(),
  last_name: zod.string().max(adminUsersActivateCreateBodyLastNameMax).optional(),
  password: zod.string().optional(),
  password_confirm: zod.string().optional(),
  is_active: zod
    .boolean()
    .optional()
    .describe(
      'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'
    ),
  is_staff: zod
    .boolean()
    .optional()
    .describe('Designates whether the user can log into this admin site.'),
  is_superuser: zod
    .boolean()
    .optional()
    .describe('Designates that this user has all permissions without explicitly assigning them.')
});

export const adminUsersActivateCreateResponseEmailMax = 254;
export const adminUsersActivateCreateResponseFirstNameMax = 150;
export const adminUsersActivateCreateResponseLastNameMax = 150;

export const adminUsersActivateCreateResponse = zod.object({
  id: zod.number(),
  email: zod
    .string()
    .email()
    .max(adminUsersActivateCreateResponseEmailMax)
    .describe('Required. Enter a valid email address.'),
  first_name: zod.string().max(adminUsersActivateCreateResponseFirstNameMax).optional(),
  last_name: zod.string().max(adminUsersActivateCreateResponseLastNameMax).optional(),
  password: zod.string().optional(),
  password_confirm: zod.string().optional(),
  is_active: zod
    .boolean()
    .optional()
    .describe(
      'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'
    ),
  is_staff: zod
    .boolean()
    .optional()
    .describe('Designates whether the user can log into this admin site.'),
  is_superuser: zod
    .boolean()
    .optional()
    .describe('Designates that this user has all permissions without explicitly assigning them.'),
  date_joined: zod.string().datetime({}),
  last_login: zod.string().datetime({}).nullable()
});

/**
 * Deactivate a user account.
 */
export const adminUsersDeactivateCreateParams = zod.object({
  id: zod.number().describe('A unique integer value identifying this user.')
});

export const adminUsersDeactivateCreateBodyEmailMax = 254;
export const adminUsersDeactivateCreateBodyFirstNameMax = 150;
export const adminUsersDeactivateCreateBodyLastNameMax = 150;

export const adminUsersDeactivateCreateBody = zod.object({
  email: zod
    .string()
    .email()
    .max(adminUsersDeactivateCreateBodyEmailMax)
    .describe('Required. Enter a valid email address.'),
  first_name: zod.string().max(adminUsersDeactivateCreateBodyFirstNameMax).optional(),
  last_name: zod.string().max(adminUsersDeactivateCreateBodyLastNameMax).optional(),
  password: zod.string().optional(),
  password_confirm: zod.string().optional(),
  is_active: zod
    .boolean()
    .optional()
    .describe(
      'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'
    ),
  is_staff: zod
    .boolean()
    .optional()
    .describe('Designates whether the user can log into this admin site.'),
  is_superuser: zod
    .boolean()
    .optional()
    .describe('Designates that this user has all permissions without explicitly assigning them.')
});

export const adminUsersDeactivateCreateResponseEmailMax = 254;
export const adminUsersDeactivateCreateResponseFirstNameMax = 150;
export const adminUsersDeactivateCreateResponseLastNameMax = 150;

export const adminUsersDeactivateCreateResponse = zod.object({
  id: zod.number(),
  email: zod
    .string()
    .email()
    .max(adminUsersDeactivateCreateResponseEmailMax)
    .describe('Required. Enter a valid email address.'),
  first_name: zod.string().max(adminUsersDeactivateCreateResponseFirstNameMax).optional(),
  last_name: zod.string().max(adminUsersDeactivateCreateResponseLastNameMax).optional(),
  password: zod.string().optional(),
  password_confirm: zod.string().optional(),
  is_active: zod
    .boolean()
    .optional()
    .describe(
      'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'
    ),
  is_staff: zod
    .boolean()
    .optional()
    .describe('Designates whether the user can log into this admin site.'),
  is_superuser: zod
    .boolean()
    .optional()
    .describe('Designates that this user has all permissions without explicitly assigning them.'),
  date_joined: zod.string().datetime({}),
  last_login: zod.string().datetime({}).nullable()
});

/**
 * Grant staff privileges to a user.
 */
export const adminUsersMakeStaffCreateParams = zod.object({
  id: zod.number().describe('A unique integer value identifying this user.')
});

export const adminUsersMakeStaffCreateBodyEmailMax = 254;
export const adminUsersMakeStaffCreateBodyFirstNameMax = 150;
export const adminUsersMakeStaffCreateBodyLastNameMax = 150;

export const adminUsersMakeStaffCreateBody = zod.object({
  email: zod
    .string()
    .email()
    .max(adminUsersMakeStaffCreateBodyEmailMax)
    .describe('Required. Enter a valid email address.'),
  first_name: zod.string().max(adminUsersMakeStaffCreateBodyFirstNameMax).optional(),
  last_name: zod.string().max(adminUsersMakeStaffCreateBodyLastNameMax).optional(),
  password: zod.string().optional(),
  password_confirm: zod.string().optional(),
  is_active: zod
    .boolean()
    .optional()
    .describe(
      'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'
    ),
  is_staff: zod
    .boolean()
    .optional()
    .describe('Designates whether the user can log into this admin site.'),
  is_superuser: zod
    .boolean()
    .optional()
    .describe('Designates that this user has all permissions without explicitly assigning them.')
});

export const adminUsersMakeStaffCreateResponseEmailMax = 254;
export const adminUsersMakeStaffCreateResponseFirstNameMax = 150;
export const adminUsersMakeStaffCreateResponseLastNameMax = 150;

export const adminUsersMakeStaffCreateResponse = zod.object({
  id: zod.number(),
  email: zod
    .string()
    .email()
    .max(adminUsersMakeStaffCreateResponseEmailMax)
    .describe('Required. Enter a valid email address.'),
  first_name: zod.string().max(adminUsersMakeStaffCreateResponseFirstNameMax).optional(),
  last_name: zod.string().max(adminUsersMakeStaffCreateResponseLastNameMax).optional(),
  password: zod.string().optional(),
  password_confirm: zod.string().optional(),
  is_active: zod
    .boolean()
    .optional()
    .describe(
      'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'
    ),
  is_staff: zod
    .boolean()
    .optional()
    .describe('Designates whether the user can log into this admin site.'),
  is_superuser: zod
    .boolean()
    .optional()
    .describe('Designates that this user has all permissions without explicitly assigning them.'),
  date_joined: zod.string().datetime({}),
  last_login: zod.string().datetime({}).nullable()
});

/**
 * Remove staff privileges from a user.
 */
export const adminUsersRemoveStaffCreateParams = zod.object({
  id: zod.number().describe('A unique integer value identifying this user.')
});

export const adminUsersRemoveStaffCreateBodyEmailMax = 254;
export const adminUsersRemoveStaffCreateBodyFirstNameMax = 150;
export const adminUsersRemoveStaffCreateBodyLastNameMax = 150;

export const adminUsersRemoveStaffCreateBody = zod.object({
  email: zod
    .string()
    .email()
    .max(adminUsersRemoveStaffCreateBodyEmailMax)
    .describe('Required. Enter a valid email address.'),
  first_name: zod.string().max(adminUsersRemoveStaffCreateBodyFirstNameMax).optional(),
  last_name: zod.string().max(adminUsersRemoveStaffCreateBodyLastNameMax).optional(),
  password: zod.string().optional(),
  password_confirm: zod.string().optional(),
  is_active: zod
    .boolean()
    .optional()
    .describe(
      'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'
    ),
  is_staff: zod
    .boolean()
    .optional()
    .describe('Designates whether the user can log into this admin site.'),
  is_superuser: zod
    .boolean()
    .optional()
    .describe('Designates that this user has all permissions without explicitly assigning them.')
});

export const adminUsersRemoveStaffCreateResponseEmailMax = 254;
export const adminUsersRemoveStaffCreateResponseFirstNameMax = 150;
export const adminUsersRemoveStaffCreateResponseLastNameMax = 150;

export const adminUsersRemoveStaffCreateResponse = zod.object({
  id: zod.number(),
  email: zod
    .string()
    .email()
    .max(adminUsersRemoveStaffCreateResponseEmailMax)
    .describe('Required. Enter a valid email address.'),
  first_name: zod.string().max(adminUsersRemoveStaffCreateResponseFirstNameMax).optional(),
  last_name: zod.string().max(adminUsersRemoveStaffCreateResponseLastNameMax).optional(),
  password: zod.string().optional(),
  password_confirm: zod.string().optional(),
  is_active: zod
    .boolean()
    .optional()
    .describe(
      'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'
    ),
  is_staff: zod
    .boolean()
    .optional()
    .describe('Designates whether the user can log into this admin site.'),
  is_superuser: zod
    .boolean()
    .optional()
    .describe('Designates that this user has all permissions without explicitly assigning them.'),
  date_joined: zod.string().datetime({}),
  last_login: zod.string().datetime({}).nullable()
});
