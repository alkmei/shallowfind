/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Shallowfind
 * Lifetime financial planning API
 * OpenAPI spec version: 0.0.1a
 */
import { createQuery } from '@tanstack/svelte-query';
import type {
  CreateQueryOptions,
  CreateQueryResult,
  DataTag,
  QueryClient,
  QueryFunction,
  QueryKey
} from '@tanstack/svelte-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

/**
 * @summary Read Root
 */
export const readRootGet = (options?: AxiosRequestConfig): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/`, options);
};

export const getReadRootGetQueryKey = () => {
  return [`/`] as const;
};

export const getReadRootGetQueryOptions = <
  TData = Awaited<ReturnType<typeof readRootGet>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getReadRootGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof readRootGet>>> = ({ signal }) =>
    readRootGet({ signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    useQuery: true,
    staleTime: 300000,
    ...queryOptions
  } as CreateQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type ReadRootGetQueryResult = NonNullable<Awaited<ReturnType<typeof readRootGet>>>;
export type ReadRootGetQueryError = AxiosError<unknown>;

/**
 * @summary Read Root
 */

export function createReadRootGet<
  TData = Awaited<ReturnType<typeof readRootGet>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<CreateQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>>;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getReadRootGetQueryOptions(options);

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Health Check
 */
export const healthCheckHealthGet = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/health`, options);
};

export const getHealthCheckHealthGetQueryKey = () => {
  return [`/health`] as const;
};

export const getHealthCheckHealthGetQueryOptions = <
  TData = Awaited<ReturnType<typeof healthCheckHealthGet>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    CreateQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getHealthCheckHealthGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckHealthGet>>> = ({ signal }) =>
    healthCheckHealthGet({ signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    useQuery: true,
    staleTime: 300000,
    ...queryOptions
  } as CreateQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type HealthCheckHealthGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof healthCheckHealthGet>>
>;
export type HealthCheckHealthGetQueryError = AxiosError<unknown>;

/**
 * @summary Health Check
 */

export function createHealthCheckHealthGet<
  TData = Awaited<ReturnType<typeof healthCheckHealthGet>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      CreateQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getHealthCheckHealthGetQueryOptions(options);

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
