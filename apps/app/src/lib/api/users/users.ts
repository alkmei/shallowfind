/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Shallowfind
 * Lifetime financial planning API
 * OpenAPI spec version: 0.0.1a
 */
import { createQuery } from '@tanstack/svelte-query';
import type {
  CreateQueryOptions,
  CreateQueryResult,
  DataTag,
  QueryClient,
  QueryFunction,
  QueryKey
} from '@tanstack/svelte-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type { HTTPValidationError, UserProfileResponse } from '../shallowfind.schemas';

/**
 * Fetch user by ID
 * @summary Get User
 */
export const getUserApiUsersUserIdGet = (
  userId: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UserProfileResponse>> => {
  return axios.get(`/api/users/${userId}`, options);
};

export const getGetUserApiUsersUserIdGetQueryKey = (userId: string) => {
  return [`/api/users/${userId}`] as const;
};

export const getGetUserApiUsersUserIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserApiUsersUserIdGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  userId: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<Awaited<ReturnType<typeof getUserApiUsersUserIdGet>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserApiUsersUserIdGetQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserApiUsersUserIdGet>>> = ({
    signal
  }) => getUserApiUsersUserIdGet(userId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    useQuery: true,
    staleTime: 300000,
    ...queryOptions
  } as CreateQueryOptions<Awaited<ReturnType<typeof getUserApiUsersUserIdGet>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetUserApiUsersUserIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserApiUsersUserIdGet>>
>;
export type GetUserApiUsersUserIdGetQueryError = AxiosError<HTTPValidationError>;

/**
 * @summary Get User
 */

export function createGetUserApiUsersUserIdGet<
  TData = Awaited<ReturnType<typeof getUserApiUsersUserIdGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  userId: string,
  options?: {
    query?: Partial<
      CreateQueryOptions<Awaited<ReturnType<typeof getUserApiUsersUserIdGet>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetUserApiUsersUserIdGetQueryOptions(userId, options);

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
