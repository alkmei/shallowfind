/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Shallowfind
 * Lifetime financial planning API
 * OpenAPI spec version: 0.0.1a
 */
import { createMutation, createQuery } from '@tanstack/svelte-query';
import type {
  CreateMutationOptions,
  CreateMutationResult,
  CreateQueryOptions,
  CreateQueryResult,
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey
} from '@tanstack/svelte-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  GoogleCallbackAuthGoogleCallbackGetParams,
  GuestLoginResponse,
  HTTPValidationError
} from '../shallowfind.schemas';

/**
 * Handles the OAuth callback and exchanges code for tokens
 * @summary Google Callback
 */
export const googleCallbackAuthGoogleCallbackGet = (
  params?: GoogleCallbackAuthGoogleCallbackGetParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/auth/google/callback`, {
    ...options,
    params: { ...params, ...options?.params }
  });
};

export const getGoogleCallbackAuthGoogleCallbackGetQueryKey = (
  params?: GoogleCallbackAuthGoogleCallbackGetParams
) => {
  return [`/auth/google/callback`, ...(params ? [params] : [])] as const;
};

export const getGoogleCallbackAuthGoogleCallbackGetQueryOptions = <
  TData = Awaited<ReturnType<typeof googleCallbackAuthGoogleCallbackGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  params?: GoogleCallbackAuthGoogleCallbackGetParams,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof googleCallbackAuthGoogleCallbackGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGoogleCallbackAuthGoogleCallbackGetQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof googleCallbackAuthGoogleCallbackGet>>> = ({
    signal
  }) => googleCallbackAuthGoogleCallbackGet(params, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    useQuery: true,
    staleTime: 300000,
    ...queryOptions
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof googleCallbackAuthGoogleCallbackGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GoogleCallbackAuthGoogleCallbackGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof googleCallbackAuthGoogleCallbackGet>>
>;
export type GoogleCallbackAuthGoogleCallbackGetQueryError = AxiosError<HTTPValidationError>;

/**
 * @summary Google Callback
 */

export function createGoogleCallbackAuthGoogleCallbackGet<
  TData = Awaited<ReturnType<typeof googleCallbackAuthGoogleCallbackGet>>,
  TError = AxiosError<HTTPValidationError>
>(
  params?: GoogleCallbackAuthGoogleCallbackGetParams,
  options?: {
    query?: Partial<
      CreateQueryOptions<
        Awaited<ReturnType<typeof googleCallbackAuthGoogleCallbackGet>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGoogleCallbackAuthGoogleCallbackGetQueryOptions(params, options);

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Google Login
 */
export const googleLoginAuthGoogleLoginGet = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`/auth/google/login`, options);
};

export const getGoogleLoginAuthGoogleLoginGetQueryKey = () => {
  return [`/auth/google/login`] as const;
};

export const getGoogleLoginAuthGoogleLoginGetQueryOptions = <
  TData = Awaited<ReturnType<typeof googleLoginAuthGoogleLoginGet>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    CreateQueryOptions<Awaited<ReturnType<typeof googleLoginAuthGoogleLoginGet>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGoogleLoginAuthGoogleLoginGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof googleLoginAuthGoogleLoginGet>>> = ({
    signal
  }) => googleLoginAuthGoogleLoginGet({ signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    useQuery: true,
    staleTime: 300000,
    ...queryOptions
  } as CreateQueryOptions<
    Awaited<ReturnType<typeof googleLoginAuthGoogleLoginGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GoogleLoginAuthGoogleLoginGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof googleLoginAuthGoogleLoginGet>>
>;
export type GoogleLoginAuthGoogleLoginGetQueryError = AxiosError<unknown>;

/**
 * @summary Google Login
 */

export function createGoogleLoginAuthGoogleLoginGet<
  TData = Awaited<ReturnType<typeof googleLoginAuthGoogleLoginGet>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      CreateQueryOptions<Awaited<ReturnType<typeof googleLoginAuthGoogleLoginGet>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGoogleLoginAuthGoogleLoginGetQueryOptions(options);

  const query = createQuery(queryOptions, queryClient) as CreateQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a guest session and set JWT cookie
 * @summary Create Guest Session
 */
export const createGuestSessionAuthGuestLoginPost = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GuestLoginResponse>> => {
  return axios.post(`/auth/guest/login`, undefined, options);
};

export const getCreateGuestSessionAuthGuestLoginPostMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof createGuestSessionAuthGuestLoginPost>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof createGuestSessionAuthGuestLoginPost>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['createGuestSessionAuthGuestLoginPost'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createGuestSessionAuthGuestLoginPost>>,
    void
  > = () => {
    return createGuestSessionAuthGuestLoginPost(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateGuestSessionAuthGuestLoginPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createGuestSessionAuthGuestLoginPost>>
>;

export type CreateGuestSessionAuthGuestLoginPostMutationError = AxiosError<unknown>;

/**
 * @summary Create Guest Session
 */
export const createCreateGuestSessionAuthGuestLoginPost = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(
  options?: {
    mutation?: CreateMutationOptions<
      Awaited<ReturnType<typeof createGuestSessionAuthGuestLoginPost>>,
      TError,
      void,
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): CreateMutationResult<
  Awaited<ReturnType<typeof createGuestSessionAuthGuestLoginPost>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getCreateGuestSessionAuthGuestLoginPostMutationOptions(options);

  return createMutation(mutationOptions, queryClient);
};
