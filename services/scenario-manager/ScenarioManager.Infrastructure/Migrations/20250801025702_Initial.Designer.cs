// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScenarioManager.Infrastructure.Data;

#nullable disable

namespace ScenarioManager.Infrastructure.Migrations
{
    [DbContext(typeof(ScenarioDbContext))]
    [Migration("20250801025702_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ScenarioManager.Domain.Entities.EventSeries", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AnnualChange")
                        .HasColumnType("jsonb");

                    b.Property<string>("AssetAllocation")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Duration")
                        .HasColumnType("jsonb");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FinalAllocation")
                        .HasColumnType("jsonb");

                    b.Property<bool>("InflationAdjusted")
                        .HasColumnType("boolean");

                    b.Property<string>("InitialAllocation")
                        .HasColumnType("jsonb");

                    b.Property<decimal?>("InitialAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDiscretionary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGlidePath")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSocialSecurity")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MaximumCash")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceEventSeriesId")
                        .HasColumnType("text");

                    b.Property<string>("ScenarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartTimingType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StartYear")
                        .HasColumnType("jsonb");

                    b.Property<string>("TargetTaxStatus")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("UserPercentage")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceEventSeriesId");

                    b.HasIndex("ScenarioId");

                    b.ToTable("EventSeries");
                });

            modelBuilder.Entity("ScenarioManager.Domain.Entities.Investment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("CostBasis")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CurrentValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("InvestmentTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<string>("ScenarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InvestmentTypeId");

                    b.HasIndex("ScenarioId");

                    b.ToTable("Investments");
                });

            modelBuilder.Entity("ScenarioManager.Domain.Entities.InvestmentType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ExpectedAnnualIncome")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ExpectedAnnualReturn")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal>("ExpenseRatio")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<bool>("IsCash")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ScenarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Taxability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId");

                    b.ToTable("InvestmentTypes");
                });

            modelBuilder.Entity("ScenarioManager.Domain.Entities.Scenario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("AnnualRetirementContributionLimit")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExportCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("FinancialGoal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ImportSource")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("InflationAssumption")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("LastSimulationRun")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("RothOptimizerEnabled")
                        .HasColumnType("boolean");

                    b.Property<int?>("RothOptimizerEndYear")
                        .HasColumnType("integer");

                    b.Property<int?>("RothOptimizerStartYear")
                        .HasColumnType("integer");

                    b.Property<string>("ScenarioType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SpouseBirthYear")
                        .HasColumnType("integer");

                    b.Property<string>("SpouseLifeExpectancy")
                        .HasColumnType("jsonb");

                    b.Property<string>("StateOfResidence")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserBirthYear")
                        .HasColumnType("integer");

                    b.Property<string>("UserLifeExpectancy")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Scenarios");
                });

            modelBuilder.Entity("ScenarioManager.Domain.Entities.ScenarioShare", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScenarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SharedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SharedWithUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId");

                    b.HasIndex("SharedWithUserId");

                    b.ToTable("ScenarioShares");
                });

            modelBuilder.Entity("ScenarioManager.Domain.Entities.Strategy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Ordering")
                        .HasColumnType("jsonb");

                    b.Property<string>("ScenarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Settings")
                        .HasColumnType("jsonb");

                    b.Property<string>("StrategyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId");

                    b.ToTable("Strategies");
                });

            modelBuilder.Entity("ScenarioManager.Domain.Entities.EventSeries", b =>
                {
                    b.HasOne("ScenarioManager.Domain.Entities.EventSeries", "ReferenceEventSeries")
                        .WithMany("ReferencingEventSeries")
                        .HasForeignKey("ReferenceEventSeriesId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ScenarioManager.Domain.Entities.Scenario", "Scenario")
                        .WithMany("EventSeries")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReferenceEventSeries");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("ScenarioManager.Domain.Entities.Investment", b =>
                {
                    b.HasOne("ScenarioManager.Domain.Entities.InvestmentType", "InvestmentType")
                        .WithMany("Investments")
                        .HasForeignKey("InvestmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScenarioManager.Domain.Entities.Scenario", "Scenario")
                        .WithMany("Investments")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvestmentType");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("ScenarioManager.Domain.Entities.InvestmentType", b =>
                {
                    b.HasOne("ScenarioManager.Domain.Entities.Scenario", "Scenario")
                        .WithMany("InvestmentTypes")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("ScenarioManager.Domain.Entities.ScenarioShare", b =>
                {
                    b.HasOne("ScenarioManager.Domain.Entities.Scenario", "Scenario")
                        .WithMany("ScenarioShares")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("ScenarioManager.Domain.Entities.Strategy", b =>
                {
                    b.HasOne("ScenarioManager.Domain.Entities.Scenario", "Scenario")
                        .WithMany("Strategies")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("ScenarioManager.Domain.Entities.EventSeries", b =>
                {
                    b.Navigation("ReferencingEventSeries");
                });

            modelBuilder.Entity("ScenarioManager.Domain.Entities.InvestmentType", b =>
                {
                    b.Navigation("Investments");
                });

            modelBuilder.Entity("ScenarioManager.Domain.Entities.Scenario", b =>
                {
                    b.Navigation("EventSeries");

                    b.Navigation("InvestmentTypes");

                    b.Navigation("Investments");

                    b.Navigation("ScenarioShares");

                    b.Navigation("Strategies");
                });
#pragma warning restore 612, 618
        }
    }
}
